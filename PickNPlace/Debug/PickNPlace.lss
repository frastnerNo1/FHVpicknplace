
PickNPlace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000015a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  2000000c  000015b4  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000098  00001640  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d275  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cce  00000000  00000000  0003d302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000565e  00000000  00000000  0003ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000398  00000000  00000000  0004562e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000778  00000000  00000000  000459c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013180  00000000  00000000  0004613e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009942  00000000  00000000  000592be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062ef9  00000000  00000000  00062c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000008d4  00000000  00000000  000c5afc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 20 00 20 a9 11 00 00 a5 11 00 00 a5 11 00 00     . . ............
	...
      2c:	a5 11 00 00 00 00 00 00 00 00 00 00 a5 11 00 00     ................
      3c:	a5 11 00 00 a5 11 00 00 a5 11 00 00 a5 11 00 00     ................
      4c:	a5 11 00 00 a5 11 00 00 a5 11 00 00 a5 11 00 00     ................
      5c:	95 03 00 00 a5 03 00 00 b5 03 00 00 c5 03 00 00     ................
      6c:	d5 03 00 00 e5 03 00 00 a5 11 00 00 a5 11 00 00     ................
      7c:	a5 11 00 00 a5 11 00 00 a5 11 00 00 a5 11 00 00     ................
      8c:	a5 11 00 00 a5 11 00 00 a5 11 00 00 a5 11 00 00     ................
      9c:	a5 11 00 00 a5 11 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	000015a8 	.word	0x000015a8

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000010 	.word	0x20000010
      f8:	000015a8 	.word	0x000015a8
      fc:	000015a8 	.word	0x000015a8
     100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     106:	2000      	movs	r0, #0
     108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
     10a:	4798      	blx	r3
     10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
     110:	21fa      	movs	r1, #250	; 0xfa
     112:	0089      	lsls	r1, r1, #2
     114:	47a0      	blx	r4
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
     118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
     11c:	0028      	movs	r0, r5
     11e:	47a0      	blx	r4
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
     122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     124:	2205      	movs	r2, #5
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
     128:	601a      	str	r2, [r3, #0]
}
     12a:	bd70      	pop	{r4, r5, r6, pc}
     12c:	00000f35 	.word	0x00000f35
     130:	000013ad 	.word	0x000013ad
     134:	20000000 	.word	0x20000000
     138:	000f4240 	.word	0x000f4240
     13c:	20000004 	.word	0x20000004
     140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_ms+0x24>)
     148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     14e:	2180      	movs	r1, #128	; 0x80
     150:	0249      	lsls	r1, r1, #9
	while (n--) {
     152:	3801      	subs	r0, #1
     154:	d307      	bcc.n	166 <delay_cycles_ms+0x22>
	if (n > 0) {
     156:	2c00      	cmp	r4, #0
     158:	d0fb      	beq.n	152 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     15a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     15c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	6813      	ldr	r3, [r2, #0]
     160:	420b      	tst	r3, r1
     162:	d0fc      	beq.n	15e <delay_cycles_ms+0x1a>
     164:	e7f5      	b.n	152 <delay_cycles_ms+0xe>
	}
}
     166:	bd30      	pop	{r4, r5, pc}
     168:	20000000 	.word	0x20000000
     16c:	e000e010 	.word	0xe000e010

00000170 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     170:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     172:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     174:	2340      	movs	r3, #64	; 0x40
     176:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     178:	4281      	cmp	r1, r0
     17a:	d202      	bcs.n	182 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     17c:	0018      	movs	r0, r3
     17e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     180:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     182:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     184:	1c63      	adds	r3, r4, #1
     186:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     188:	4288      	cmp	r0, r1
     18a:	d9f9      	bls.n	180 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     18c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     18e:	2cff      	cmp	r4, #255	; 0xff
     190:	d8f4      	bhi.n	17c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     192:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     194:	2300      	movs	r3, #0
     196:	e7f1      	b.n	17c <_sercom_get_sync_baud_val+0xc>

00000198 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     198:	b510      	push	{r4, lr}
     19a:	b082      	sub	sp, #8
     19c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     19e:	4b0e      	ldr	r3, [pc, #56]	; (1d8 <sercom_set_gclk_generator+0x40>)
     1a0:	781b      	ldrb	r3, [r3, #0]
     1a2:	2b00      	cmp	r3, #0
     1a4:	d007      	beq.n	1b6 <sercom_set_gclk_generator+0x1e>
     1a6:	2900      	cmp	r1, #0
     1a8:	d105      	bne.n	1b6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     1aa:	4b0b      	ldr	r3, [pc, #44]	; (1d8 <sercom_set_gclk_generator+0x40>)
     1ac:	785b      	ldrb	r3, [r3, #1]
     1ae:	4283      	cmp	r3, r0
     1b0:	d010      	beq.n	1d4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     1b2:	201d      	movs	r0, #29
     1b4:	e00c      	b.n	1d0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     1b6:	a901      	add	r1, sp, #4
     1b8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     1ba:	200c      	movs	r0, #12
     1bc:	4b07      	ldr	r3, [pc, #28]	; (1dc <sercom_set_gclk_generator+0x44>)
     1be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     1c0:	200c      	movs	r0, #12
     1c2:	4b07      	ldr	r3, [pc, #28]	; (1e0 <sercom_set_gclk_generator+0x48>)
     1c4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     1c6:	4b04      	ldr	r3, [pc, #16]	; (1d8 <sercom_set_gclk_generator+0x40>)
     1c8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     1ca:	2201      	movs	r2, #1
     1cc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     1ce:	2000      	movs	r0, #0
}
     1d0:	b002      	add	sp, #8
     1d2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     1d4:	2000      	movs	r0, #0
     1d6:	e7fb      	b.n	1d0 <sercom_set_gclk_generator+0x38>
     1d8:	20000028 	.word	0x20000028
     1dc:	0000104d 	.word	0x0000104d
     1e0:	00000fc1 	.word	0x00000fc1

000001e4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     1e4:	4b40      	ldr	r3, [pc, #256]	; (2e8 <_sercom_get_default_pad+0x104>)
     1e6:	4298      	cmp	r0, r3
     1e8:	d031      	beq.n	24e <_sercom_get_default_pad+0x6a>
     1ea:	d90a      	bls.n	202 <_sercom_get_default_pad+0x1e>
     1ec:	4b3f      	ldr	r3, [pc, #252]	; (2ec <_sercom_get_default_pad+0x108>)
     1ee:	4298      	cmp	r0, r3
     1f0:	d04d      	beq.n	28e <_sercom_get_default_pad+0xaa>
     1f2:	4b3f      	ldr	r3, [pc, #252]	; (2f0 <_sercom_get_default_pad+0x10c>)
     1f4:	4298      	cmp	r0, r3
     1f6:	d05a      	beq.n	2ae <_sercom_get_default_pad+0xca>
     1f8:	4b3e      	ldr	r3, [pc, #248]	; (2f4 <_sercom_get_default_pad+0x110>)
     1fa:	4298      	cmp	r0, r3
     1fc:	d037      	beq.n	26e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     1fe:	2000      	movs	r0, #0
}
     200:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     202:	4b3d      	ldr	r3, [pc, #244]	; (2f8 <_sercom_get_default_pad+0x114>)
     204:	4298      	cmp	r0, r3
     206:	d00c      	beq.n	222 <_sercom_get_default_pad+0x3e>
     208:	4b3c      	ldr	r3, [pc, #240]	; (2fc <_sercom_get_default_pad+0x118>)
     20a:	4298      	cmp	r0, r3
     20c:	d1f7      	bne.n	1fe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     20e:	2901      	cmp	r1, #1
     210:	d017      	beq.n	242 <_sercom_get_default_pad+0x5e>
     212:	2900      	cmp	r1, #0
     214:	d05d      	beq.n	2d2 <_sercom_get_default_pad+0xee>
     216:	2902      	cmp	r1, #2
     218:	d015      	beq.n	246 <_sercom_get_default_pad+0x62>
     21a:	2903      	cmp	r1, #3
     21c:	d015      	beq.n	24a <_sercom_get_default_pad+0x66>
	return 0;
     21e:	2000      	movs	r0, #0
     220:	e7ee      	b.n	200 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     222:	2901      	cmp	r1, #1
     224:	d007      	beq.n	236 <_sercom_get_default_pad+0x52>
     226:	2900      	cmp	r1, #0
     228:	d051      	beq.n	2ce <_sercom_get_default_pad+0xea>
     22a:	2902      	cmp	r1, #2
     22c:	d005      	beq.n	23a <_sercom_get_default_pad+0x56>
     22e:	2903      	cmp	r1, #3
     230:	d005      	beq.n	23e <_sercom_get_default_pad+0x5a>
	return 0;
     232:	2000      	movs	r0, #0
     234:	e7e4      	b.n	200 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     236:	4832      	ldr	r0, [pc, #200]	; (300 <_sercom_get_default_pad+0x11c>)
     238:	e7e2      	b.n	200 <_sercom_get_default_pad+0x1c>
     23a:	4832      	ldr	r0, [pc, #200]	; (304 <_sercom_get_default_pad+0x120>)
     23c:	e7e0      	b.n	200 <_sercom_get_default_pad+0x1c>
     23e:	4832      	ldr	r0, [pc, #200]	; (308 <_sercom_get_default_pad+0x124>)
     240:	e7de      	b.n	200 <_sercom_get_default_pad+0x1c>
     242:	4832      	ldr	r0, [pc, #200]	; (30c <_sercom_get_default_pad+0x128>)
     244:	e7dc      	b.n	200 <_sercom_get_default_pad+0x1c>
     246:	4832      	ldr	r0, [pc, #200]	; (310 <_sercom_get_default_pad+0x12c>)
     248:	e7da      	b.n	200 <_sercom_get_default_pad+0x1c>
     24a:	4832      	ldr	r0, [pc, #200]	; (314 <_sercom_get_default_pad+0x130>)
     24c:	e7d8      	b.n	200 <_sercom_get_default_pad+0x1c>
     24e:	2901      	cmp	r1, #1
     250:	d007      	beq.n	262 <_sercom_get_default_pad+0x7e>
     252:	2900      	cmp	r1, #0
     254:	d03f      	beq.n	2d6 <_sercom_get_default_pad+0xf2>
     256:	2902      	cmp	r1, #2
     258:	d005      	beq.n	266 <_sercom_get_default_pad+0x82>
     25a:	2903      	cmp	r1, #3
     25c:	d005      	beq.n	26a <_sercom_get_default_pad+0x86>
	return 0;
     25e:	2000      	movs	r0, #0
     260:	e7ce      	b.n	200 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     262:	482d      	ldr	r0, [pc, #180]	; (318 <_sercom_get_default_pad+0x134>)
     264:	e7cc      	b.n	200 <_sercom_get_default_pad+0x1c>
     266:	482d      	ldr	r0, [pc, #180]	; (31c <_sercom_get_default_pad+0x138>)
     268:	e7ca      	b.n	200 <_sercom_get_default_pad+0x1c>
     26a:	482d      	ldr	r0, [pc, #180]	; (320 <_sercom_get_default_pad+0x13c>)
     26c:	e7c8      	b.n	200 <_sercom_get_default_pad+0x1c>
     26e:	2901      	cmp	r1, #1
     270:	d007      	beq.n	282 <_sercom_get_default_pad+0x9e>
     272:	2900      	cmp	r1, #0
     274:	d031      	beq.n	2da <_sercom_get_default_pad+0xf6>
     276:	2902      	cmp	r1, #2
     278:	d005      	beq.n	286 <_sercom_get_default_pad+0xa2>
     27a:	2903      	cmp	r1, #3
     27c:	d005      	beq.n	28a <_sercom_get_default_pad+0xa6>
	return 0;
     27e:	2000      	movs	r0, #0
     280:	e7be      	b.n	200 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     282:	4828      	ldr	r0, [pc, #160]	; (324 <_sercom_get_default_pad+0x140>)
     284:	e7bc      	b.n	200 <_sercom_get_default_pad+0x1c>
     286:	4828      	ldr	r0, [pc, #160]	; (328 <_sercom_get_default_pad+0x144>)
     288:	e7ba      	b.n	200 <_sercom_get_default_pad+0x1c>
     28a:	4828      	ldr	r0, [pc, #160]	; (32c <_sercom_get_default_pad+0x148>)
     28c:	e7b8      	b.n	200 <_sercom_get_default_pad+0x1c>
     28e:	2901      	cmp	r1, #1
     290:	d007      	beq.n	2a2 <_sercom_get_default_pad+0xbe>
     292:	2900      	cmp	r1, #0
     294:	d023      	beq.n	2de <_sercom_get_default_pad+0xfa>
     296:	2902      	cmp	r1, #2
     298:	d005      	beq.n	2a6 <_sercom_get_default_pad+0xc2>
     29a:	2903      	cmp	r1, #3
     29c:	d005      	beq.n	2aa <_sercom_get_default_pad+0xc6>
	return 0;
     29e:	2000      	movs	r0, #0
     2a0:	e7ae      	b.n	200 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     2a2:	4823      	ldr	r0, [pc, #140]	; (330 <_sercom_get_default_pad+0x14c>)
     2a4:	e7ac      	b.n	200 <_sercom_get_default_pad+0x1c>
     2a6:	4823      	ldr	r0, [pc, #140]	; (334 <_sercom_get_default_pad+0x150>)
     2a8:	e7aa      	b.n	200 <_sercom_get_default_pad+0x1c>
     2aa:	4823      	ldr	r0, [pc, #140]	; (338 <_sercom_get_default_pad+0x154>)
     2ac:	e7a8      	b.n	200 <_sercom_get_default_pad+0x1c>
     2ae:	2901      	cmp	r1, #1
     2b0:	d007      	beq.n	2c2 <_sercom_get_default_pad+0xde>
     2b2:	2900      	cmp	r1, #0
     2b4:	d015      	beq.n	2e2 <_sercom_get_default_pad+0xfe>
     2b6:	2902      	cmp	r1, #2
     2b8:	d005      	beq.n	2c6 <_sercom_get_default_pad+0xe2>
     2ba:	2903      	cmp	r1, #3
     2bc:	d005      	beq.n	2ca <_sercom_get_default_pad+0xe6>
	return 0;
     2be:	2000      	movs	r0, #0
     2c0:	e79e      	b.n	200 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     2c2:	481e      	ldr	r0, [pc, #120]	; (33c <_sercom_get_default_pad+0x158>)
     2c4:	e79c      	b.n	200 <_sercom_get_default_pad+0x1c>
     2c6:	481e      	ldr	r0, [pc, #120]	; (340 <_sercom_get_default_pad+0x15c>)
     2c8:	e79a      	b.n	200 <_sercom_get_default_pad+0x1c>
     2ca:	481e      	ldr	r0, [pc, #120]	; (344 <_sercom_get_default_pad+0x160>)
     2cc:	e798      	b.n	200 <_sercom_get_default_pad+0x1c>
     2ce:	481e      	ldr	r0, [pc, #120]	; (348 <_sercom_get_default_pad+0x164>)
     2d0:	e796      	b.n	200 <_sercom_get_default_pad+0x1c>
     2d2:	2003      	movs	r0, #3
     2d4:	e794      	b.n	200 <_sercom_get_default_pad+0x1c>
     2d6:	481d      	ldr	r0, [pc, #116]	; (34c <_sercom_get_default_pad+0x168>)
     2d8:	e792      	b.n	200 <_sercom_get_default_pad+0x1c>
     2da:	481d      	ldr	r0, [pc, #116]	; (350 <_sercom_get_default_pad+0x16c>)
     2dc:	e790      	b.n	200 <_sercom_get_default_pad+0x1c>
     2de:	481d      	ldr	r0, [pc, #116]	; (354 <_sercom_get_default_pad+0x170>)
     2e0:	e78e      	b.n	200 <_sercom_get_default_pad+0x1c>
     2e2:	481d      	ldr	r0, [pc, #116]	; (358 <_sercom_get_default_pad+0x174>)
     2e4:	e78c      	b.n	200 <_sercom_get_default_pad+0x1c>
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	42001000 	.word	0x42001000
     2ec:	42001800 	.word	0x42001800
     2f0:	42001c00 	.word	0x42001c00
     2f4:	42001400 	.word	0x42001400
     2f8:	42000800 	.word	0x42000800
     2fc:	42000c00 	.word	0x42000c00
     300:	00050003 	.word	0x00050003
     304:	00060003 	.word	0x00060003
     308:	00070003 	.word	0x00070003
     30c:	00010003 	.word	0x00010003
     310:	001e0003 	.word	0x001e0003
     314:	001f0003 	.word	0x001f0003
     318:	00090003 	.word	0x00090003
     31c:	000a0003 	.word	0x000a0003
     320:	000b0003 	.word	0x000b0003
     324:	00110003 	.word	0x00110003
     328:	00120003 	.word	0x00120003
     32c:	00130003 	.word	0x00130003
     330:	000d0003 	.word	0x000d0003
     334:	000e0003 	.word	0x000e0003
     338:	000f0003 	.word	0x000f0003
     33c:	00170003 	.word	0x00170003
     340:	00180003 	.word	0x00180003
     344:	00190003 	.word	0x00190003
     348:	00040003 	.word	0x00040003
     34c:	00080003 	.word	0x00080003
     350:	00100003 	.word	0x00100003
     354:	000c0003 	.word	0x000c0003
     358:	00160003 	.word	0x00160003

0000035c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     35c:	b530      	push	{r4, r5, lr}
     35e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     360:	4b0b      	ldr	r3, [pc, #44]	; (390 <_sercom_get_sercom_inst_index+0x34>)
     362:	466a      	mov	r2, sp
     364:	cb32      	ldmia	r3!, {r1, r4, r5}
     366:	c232      	stmia	r2!, {r1, r4, r5}
     368:	cb32      	ldmia	r3!, {r1, r4, r5}
     36a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     36c:	9b00      	ldr	r3, [sp, #0]
     36e:	4283      	cmp	r3, r0
     370:	d00b      	beq.n	38a <_sercom_get_sercom_inst_index+0x2e>
     372:	2301      	movs	r3, #1
     374:	009a      	lsls	r2, r3, #2
     376:	4669      	mov	r1, sp
     378:	5852      	ldr	r2, [r2, r1]
     37a:	4282      	cmp	r2, r0
     37c:	d006      	beq.n	38c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     37e:	3301      	adds	r3, #1
     380:	2b06      	cmp	r3, #6
     382:	d1f7      	bne.n	374 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     384:	2000      	movs	r0, #0
}
     386:	b007      	add	sp, #28
     388:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     38a:	2300      	movs	r3, #0
			return i;
     38c:	b2d8      	uxtb	r0, r3
     38e:	e7fa      	b.n	386 <_sercom_get_sercom_inst_index+0x2a>
     390:	00001530 	.word	0x00001530

00000394 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     394:	b510      	push	{r4, lr}
     396:	4b02      	ldr	r3, [pc, #8]	; (3a0 <SERCOM0_Handler+0xc>)
     398:	681b      	ldr	r3, [r3, #0]
     39a:	2000      	movs	r0, #0
     39c:	4798      	blx	r3
     39e:	bd10      	pop	{r4, pc}
     3a0:	2000002c 	.word	0x2000002c

000003a4 <SERCOM1_Handler>:
     3a4:	b510      	push	{r4, lr}
     3a6:	4b02      	ldr	r3, [pc, #8]	; (3b0 <SERCOM1_Handler+0xc>)
     3a8:	685b      	ldr	r3, [r3, #4]
     3aa:	2001      	movs	r0, #1
     3ac:	4798      	blx	r3
     3ae:	bd10      	pop	{r4, pc}
     3b0:	2000002c 	.word	0x2000002c

000003b4 <SERCOM2_Handler>:
     3b4:	b510      	push	{r4, lr}
     3b6:	4b02      	ldr	r3, [pc, #8]	; (3c0 <SERCOM2_Handler+0xc>)
     3b8:	689b      	ldr	r3, [r3, #8]
     3ba:	2002      	movs	r0, #2
     3bc:	4798      	blx	r3
     3be:	bd10      	pop	{r4, pc}
     3c0:	2000002c 	.word	0x2000002c

000003c4 <SERCOM3_Handler>:
     3c4:	b510      	push	{r4, lr}
     3c6:	4b02      	ldr	r3, [pc, #8]	; (3d0 <SERCOM3_Handler+0xc>)
     3c8:	68db      	ldr	r3, [r3, #12]
     3ca:	2003      	movs	r0, #3
     3cc:	4798      	blx	r3
     3ce:	bd10      	pop	{r4, pc}
     3d0:	2000002c 	.word	0x2000002c

000003d4 <SERCOM4_Handler>:
     3d4:	b510      	push	{r4, lr}
     3d6:	4b02      	ldr	r3, [pc, #8]	; (3e0 <SERCOM4_Handler+0xc>)
     3d8:	691b      	ldr	r3, [r3, #16]
     3da:	2004      	movs	r0, #4
     3dc:	4798      	blx	r3
     3de:	bd10      	pop	{r4, pc}
     3e0:	2000002c 	.word	0x2000002c

000003e4 <SERCOM5_Handler>:
     3e4:	b510      	push	{r4, lr}
     3e6:	4b02      	ldr	r3, [pc, #8]	; (3f0 <SERCOM5_Handler+0xc>)
     3e8:	695b      	ldr	r3, [r3, #20]
     3ea:	2005      	movs	r0, #5
     3ec:	4798      	blx	r3
     3ee:	bd10      	pop	{r4, pc}
     3f0:	2000002c 	.word	0x2000002c

000003f4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	46d6      	mov	lr, sl
     3f8:	464f      	mov	r7, r9
     3fa:	b580      	push	{r7, lr}
     3fc:	b08b      	sub	sp, #44	; 0x2c
     3fe:	4681      	mov	r9, r0
     400:	000f      	movs	r7, r1
     402:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     404:	0003      	movs	r3, r0
     406:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     408:	680b      	ldr	r3, [r1, #0]
     40a:	079b      	lsls	r3, r3, #30
     40c:	d409      	bmi.n	422 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     40e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     410:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     412:	07db      	lsls	r3, r3, #31
     414:	d400      	bmi.n	418 <spi_init+0x24>
     416:	e0a4      	b.n	562 <spi_init+0x16e>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     418:	b00b      	add	sp, #44	; 0x2c
     41a:	bc0c      	pop	{r2, r3}
     41c:	4691      	mov	r9, r2
     41e:	469a      	mov	sl, r3
     420:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     422:	6a53      	ldr	r3, [r2, #36]	; 0x24
     424:	9305      	str	r3, [sp, #20]
     426:	6a93      	ldr	r3, [r2, #40]	; 0x28
     428:	9306      	str	r3, [sp, #24]
     42a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     42c:	9307      	str	r3, [sp, #28]
     42e:	6b13      	ldr	r3, [r2, #48]	; 0x30
     430:	9308      	str	r3, [sp, #32]
     432:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     434:	ab05      	add	r3, sp, #20
     436:	9301      	str	r3, [sp, #4]
     438:	e00a      	b.n	450 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     43a:	0038      	movs	r0, r7
     43c:	4ba1      	ldr	r3, [pc, #644]	; (6c4 <spi_init+0x2d0>)
     43e:	4798      	blx	r3
     440:	e00c      	b.n	45c <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     442:	230f      	movs	r3, #15
     444:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     446:	4281      	cmp	r1, r0
     448:	d12d      	bne.n	4a6 <spi_init+0xb2>
     44a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     44c:	2e04      	cmp	r6, #4
     44e:	d02f      	beq.n	4b0 <spi_init+0xbc>
     450:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     452:	00b3      	lsls	r3, r6, #2
     454:	9a01      	ldr	r2, [sp, #4]
     456:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     458:	2800      	cmp	r0, #0
     45a:	d0ee      	beq.n	43a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     45c:	1c43      	adds	r3, r0, #1
     45e:	d0f4      	beq.n	44a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     460:	0401      	lsls	r1, r0, #16
     462:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     464:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     466:	b2c3      	uxtb	r3, r0
     468:	469c      	mov	ip, r3
		return NULL;
     46a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     46c:	0602      	lsls	r2, r0, #24
     46e:	d405      	bmi.n	47c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     470:	4663      	mov	r3, ip
     472:	095b      	lsrs	r3, r3, #5
     474:	01db      	lsls	r3, r3, #7
     476:	4a94      	ldr	r2, [pc, #592]	; (6c8 <spi_init+0x2d4>)
     478:	4692      	mov	sl, r2
     47a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     47c:	221f      	movs	r2, #31
     47e:	4660      	mov	r0, ip
     480:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     482:	1898      	adds	r0, r3, r2
     484:	3040      	adds	r0, #64	; 0x40
     486:	7800      	ldrb	r0, [r0, #0]
     488:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     48a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     48c:	4655      	mov	r5, sl
     48e:	07ed      	lsls	r5, r5, #31
     490:	d5d9      	bpl.n	446 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     492:	0852      	lsrs	r2, r2, #1
     494:	189b      	adds	r3, r3, r2
     496:	3330      	adds	r3, #48	; 0x30
     498:	7818      	ldrb	r0, [r3, #0]
     49a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     49c:	4663      	mov	r3, ip
     49e:	07db      	lsls	r3, r3, #31
     4a0:	d5cf      	bpl.n	442 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     4a2:	0900      	lsrs	r0, r0, #4
     4a4:	e7cf      	b.n	446 <spi_init+0x52>
			module->hw = NULL;
     4a6:	2300      	movs	r3, #0
     4a8:	464a      	mov	r2, r9
     4aa:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     4ac:	201c      	movs	r0, #28
     4ae:	e7b3      	b.n	418 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     4b0:	200c      	movs	r0, #12
     4b2:	4b86      	ldr	r3, [pc, #536]	; (6cc <spi_init+0x2d8>)
     4b4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     4b6:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     4b8:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     4ba:	2a01      	cmp	r2, #1
     4bc:	d015      	beq.n	4ea <spi_init+0xf6>
	if (config->mode == SPI_MODE_SLAVE) {
     4be:	7821      	ldrb	r1, [r4, #0]
     4c0:	2900      	cmp	r1, #0
     4c2:	d126      	bne.n	512 <spi_init+0x11e>
		if (spi_module->CTRLA.reg != addr) {
     4c4:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     4c6:	7ee2      	ldrb	r2, [r4, #27]
     4c8:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     4ca:	7ea0      	ldrb	r0, [r4, #26]
     4cc:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
     4ce:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
     4d0:	429a      	cmp	r2, r3
     4d2:	d1a1      	bne.n	418 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
     4d4:	6963      	ldr	r3, [r4, #20]
		ctrlb |= config->mode_specific.slave.address_mode;
     4d6:	8b22      	ldrh	r2, [r4, #24]
		if (config->mode_specific.slave.preload_enable) {
     4d8:	7f20      	ldrb	r0, [r4, #28]
     4da:	2800      	cmp	r0, #0
     4dc:	d001      	beq.n	4e2 <spi_init+0xee>
     4de:	2040      	movs	r0, #64	; 0x40
     4e0:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     4e2:	2008      	movs	r0, #8
     4e4:	4303      	orrs	r3, r0
     4e6:	431d      	orrs	r5, r3
     4e8:	e014      	b.n	514 <spi_init+0x120>
		enum status_code error_code = _sercom_get_sync_baud_val(
     4ea:	aa04      	add	r2, sp, #16
     4ec:	0001      	movs	r1, r0
     4ee:	6960      	ldr	r0, [r4, #20]
     4f0:	4b77      	ldr	r3, [pc, #476]	; (6d0 <spi_init+0x2dc>)
     4f2:	4798      	blx	r3
     4f4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     4f6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     4f8:	2b00      	cmp	r3, #0
     4fa:	d000      	beq.n	4fe <spi_init+0x10a>
     4fc:	e78c      	b.n	418 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     4fe:	7abb      	ldrb	r3, [r7, #10]
     500:	b2db      	uxtb	r3, r3
     502:	aa04      	add	r2, sp, #16
     504:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     506:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     508:	429a      	cmp	r2, r3
     50a:	d000      	beq.n	50e <spi_init+0x11a>
     50c:	e784      	b.n	418 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     50e:	350c      	adds	r5, #12
     510:	e7d5      	b.n	4be <spi_init+0xca>
	uint32_t ctrlb = 0;
     512:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
     514:	6863      	ldr	r3, [r4, #4]
     516:	68a0      	ldr	r0, [r4, #8]
     518:	4303      	orrs	r3, r0
     51a:	68e0      	ldr	r0, [r4, #12]
     51c:	4303      	orrs	r3, r0
     51e:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     520:	7c20      	ldrb	r0, [r4, #16]
     522:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
     524:	7c60      	ldrb	r0, [r4, #17]
     526:	2800      	cmp	r0, #0
     528:	d001      	beq.n	52e <spi_init+0x13a>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     52a:	2080      	movs	r0, #128	; 0x80
     52c:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
     52e:	7ca0      	ldrb	r0, [r4, #18]
     530:	2800      	cmp	r0, #0
     532:	d002      	beq.n	53a <spi_init+0x146>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     534:	2080      	movs	r0, #128	; 0x80
     536:	0280      	lsls	r0, r0, #10
     538:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
     53a:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     53c:	2502      	movs	r5, #2
     53e:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
     540:	4283      	cmp	r3, r0
     542:	d004      	beq.n	54e <spi_init+0x15a>
	module->hw = NULL;
     544:	2300      	movs	r3, #0
     546:	464a      	mov	r2, r9
     548:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     54a:	201c      	movs	r0, #28
     54c:	e764      	b.n	418 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
     54e:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     550:	4293      	cmp	r3, r2
     552:	d1f7      	bne.n	544 <spi_init+0x150>
		module->mode           = config->mode;
     554:	464b      	mov	r3, r9
     556:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
     558:	7c23      	ldrb	r3, [r4, #16]
     55a:	464a      	mov	r2, r9
     55c:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     55e:	2000      	movs	r0, #0
     560:	e75a      	b.n	418 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     562:	0008      	movs	r0, r1
     564:	4b5b      	ldr	r3, [pc, #364]	; (6d4 <spi_init+0x2e0>)
     566:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     568:	4a5b      	ldr	r2, [pc, #364]	; (6d8 <spi_init+0x2e4>)
     56a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     56c:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     56e:	2301      	movs	r3, #1
     570:	40ab      	lsls	r3, r5
     572:	430b      	orrs	r3, r1
     574:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     576:	a909      	add	r1, sp, #36	; 0x24
     578:	2620      	movs	r6, #32
     57a:	5da3      	ldrb	r3, [r4, r6]
     57c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     57e:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     580:	b2c5      	uxtb	r5, r0
     582:	0028      	movs	r0, r5
     584:	4b55      	ldr	r3, [pc, #340]	; (6dc <spi_init+0x2e8>)
     586:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     588:	0028      	movs	r0, r5
     58a:	4b55      	ldr	r3, [pc, #340]	; (6e0 <spi_init+0x2ec>)
     58c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     58e:	5da0      	ldrb	r0, [r4, r6]
     590:	2100      	movs	r1, #0
     592:	4b54      	ldr	r3, [pc, #336]	; (6e4 <spi_init+0x2f0>)
     594:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     596:	7823      	ldrb	r3, [r4, #0]
     598:	2b01      	cmp	r3, #1
     59a:	d020      	beq.n	5de <spi_init+0x1ea>
	if (config->mode == SPI_MODE_SLAVE) {
     59c:	7823      	ldrb	r3, [r4, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d103      	bne.n	5aa <spi_init+0x1b6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     5a2:	683b      	ldr	r3, [r7, #0]
     5a4:	2208      	movs	r2, #8
     5a6:	4313      	orrs	r3, r2
     5a8:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     5aa:	464b      	mov	r3, r9
     5ac:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5ae:	ab04      	add	r3, sp, #16
     5b0:	2280      	movs	r2, #128	; 0x80
     5b2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5b4:	2200      	movs	r2, #0
     5b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5b8:	2101      	movs	r1, #1
     5ba:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     5bc:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     5be:	7823      	ldrb	r3, [r4, #0]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d101      	bne.n	5c8 <spi_init+0x1d4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     5c4:	ab04      	add	r3, sp, #16
     5c6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     5ca:	9305      	str	r3, [sp, #20]
     5cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     5ce:	9306      	str	r3, [sp, #24]
     5d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     5d2:	9307      	str	r3, [sp, #28]
     5d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
     5d6:	9308      	str	r3, [sp, #32]
     5d8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     5da:	ad05      	add	r5, sp, #20
     5dc:	e011      	b.n	602 <spi_init+0x20e>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     5de:	683b      	ldr	r3, [r7, #0]
     5e0:	220c      	movs	r2, #12
     5e2:	4313      	orrs	r3, r2
     5e4:	603b      	str	r3, [r7, #0]
     5e6:	e7d9      	b.n	59c <spi_init+0x1a8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     5e8:	0030      	movs	r0, r6
     5ea:	4b36      	ldr	r3, [pc, #216]	; (6c4 <spi_init+0x2d0>)
     5ec:	4798      	blx	r3
     5ee:	e00d      	b.n	60c <spi_init+0x218>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     5f0:	a904      	add	r1, sp, #16
     5f2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     5f4:	0c00      	lsrs	r0, r0, #16
     5f6:	b2c0      	uxtb	r0, r0
     5f8:	4b3b      	ldr	r3, [pc, #236]	; (6e8 <spi_init+0x2f4>)
     5fa:	4798      	blx	r3
     5fc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     5fe:	2f04      	cmp	r7, #4
     600:	d007      	beq.n	612 <spi_init+0x21e>
     602:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     604:	00bb      	lsls	r3, r7, #2
     606:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     608:	2800      	cmp	r0, #0
     60a:	d0ed      	beq.n	5e8 <spi_init+0x1f4>
		if (current_pinmux != PINMUX_UNUSED) {
     60c:	1c43      	adds	r3, r0, #1
     60e:	d1ef      	bne.n	5f0 <spi_init+0x1fc>
     610:	e7f4      	b.n	5fc <spi_init+0x208>
	module->mode             = config->mode;
     612:	7823      	ldrb	r3, [r4, #0]
     614:	464a      	mov	r2, r9
     616:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     618:	7c23      	ldrb	r3, [r4, #16]
     61a:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     61c:	7ca3      	ldrb	r3, [r4, #18]
     61e:	71d3      	strb	r3, [r2, #7]
	uint16_t baud = 0;
     620:	2200      	movs	r2, #0
     622:	ab02      	add	r3, sp, #8
     624:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     626:	7823      	ldrb	r3, [r4, #0]
     628:	2b01      	cmp	r3, #1
     62a:	d012      	beq.n	652 <spi_init+0x25e>
	if (config->mode == SPI_MODE_SLAVE) {
     62c:	7823      	ldrb	r3, [r4, #0]
     62e:	2b00      	cmp	r3, #0
     630:	d127      	bne.n	682 <spi_init+0x28e>
		ctrla = config->mode_specific.slave.frame_format;
     632:	6960      	ldr	r0, [r4, #20]
		ctrlb = config->mode_specific.slave.address_mode;
     634:	8b22      	ldrh	r2, [r4, #24]
		spi_module->ADDR.reg |=
     636:	6973      	ldr	r3, [r6, #20]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     638:	7ee1      	ldrb	r1, [r4, #27]
     63a:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     63c:	7ea5      	ldrb	r5, [r4, #26]
     63e:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     640:	4319      	orrs	r1, r3
     642:	6171      	str	r1, [r6, #20]
		if (config->mode_specific.slave.preload_enable) {
     644:	7f23      	ldrb	r3, [r4, #28]
		ctrlb = config->mode_specific.slave.address_mode;
     646:	0011      	movs	r1, r2
		if (config->mode_specific.slave.preload_enable) {
     648:	2b00      	cmp	r3, #0
     64a:	d01c      	beq.n	686 <spi_init+0x292>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     64c:	2140      	movs	r1, #64	; 0x40
     64e:	4311      	orrs	r1, r2
     650:	e019      	b.n	686 <spi_init+0x292>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     652:	464b      	mov	r3, r9
     654:	6818      	ldr	r0, [r3, #0]
     656:	4b1f      	ldr	r3, [pc, #124]	; (6d4 <spi_init+0x2e0>)
     658:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     65a:	300d      	adds	r0, #13
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     65c:	b2c0      	uxtb	r0, r0
     65e:	4b1b      	ldr	r3, [pc, #108]	; (6cc <spi_init+0x2d8>)
     660:	4798      	blx	r3
     662:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     664:	ab02      	add	r3, sp, #8
     666:	1d9a      	adds	r2, r3, #6
     668:	6960      	ldr	r0, [r4, #20]
     66a:	4b19      	ldr	r3, [pc, #100]	; (6d0 <spi_init+0x2dc>)
     66c:	4798      	blx	r3
     66e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     670:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     672:	2b00      	cmp	r3, #0
     674:	d000      	beq.n	678 <spi_init+0x284>
     676:	e6cf      	b.n	418 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     678:	ab02      	add	r3, sp, #8
     67a:	3306      	adds	r3, #6
     67c:	781b      	ldrb	r3, [r3, #0]
     67e:	72b3      	strb	r3, [r6, #10]
     680:	e7d4      	b.n	62c <spi_init+0x238>
	uint32_t ctrlb = 0;
     682:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     684:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     686:	6863      	ldr	r3, [r4, #4]
     688:	68a2      	ldr	r2, [r4, #8]
     68a:	4313      	orrs	r3, r2
     68c:	68e2      	ldr	r2, [r4, #12]
     68e:	4313      	orrs	r3, r2
     690:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     692:	7c22      	ldrb	r2, [r4, #16]
     694:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     696:	7c61      	ldrb	r1, [r4, #17]
     698:	2900      	cmp	r1, #0
     69a:	d103      	bne.n	6a4 <spi_init+0x2b0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     69c:	4913      	ldr	r1, [pc, #76]	; (6ec <spi_init+0x2f8>)
     69e:	7889      	ldrb	r1, [r1, #2]
     6a0:	0789      	lsls	r1, r1, #30
     6a2:	d501      	bpl.n	6a8 <spi_init+0x2b4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     6a4:	2180      	movs	r1, #128	; 0x80
     6a6:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     6a8:	7ca1      	ldrb	r1, [r4, #18]
     6aa:	2900      	cmp	r1, #0
     6ac:	d002      	beq.n	6b4 <spi_init+0x2c0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     6ae:	2180      	movs	r1, #128	; 0x80
     6b0:	0289      	lsls	r1, r1, #10
     6b2:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     6b4:	6831      	ldr	r1, [r6, #0]
     6b6:	430b      	orrs	r3, r1
     6b8:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     6ba:	6873      	ldr	r3, [r6, #4]
     6bc:	431a      	orrs	r2, r3
     6be:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
     6c0:	2000      	movs	r0, #0
     6c2:	e6a9      	b.n	418 <spi_init+0x24>
     6c4:	000001e5 	.word	0x000001e5
     6c8:	41004400 	.word	0x41004400
     6cc:	00001069 	.word	0x00001069
     6d0:	00000171 	.word	0x00000171
     6d4:	0000035d 	.word	0x0000035d
     6d8:	40000400 	.word	0x40000400
     6dc:	0000104d 	.word	0x0000104d
     6e0:	00000fc1 	.word	0x00000fc1
     6e4:	00000199 	.word	0x00000199
     6e8:	00001145 	.word	0x00001145
     6ec:	41002000 	.word	0x41002000

000006f0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     6f0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     6f2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     6f4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     6f6:	2c01      	cmp	r4, #1
     6f8:	d001      	beq.n	6fe <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     6fa:	0018      	movs	r0, r3
     6fc:	bd10      	pop	{r4, pc}
		if (select) {
     6fe:	2a00      	cmp	r2, #0
     700:	d058      	beq.n	7b4 <spi_select_slave+0xc4>
			if (slave->address_enabled) {
     702:	784b      	ldrb	r3, [r1, #1]
     704:	2b00      	cmp	r3, #0
     706:	d044      	beq.n	792 <spi_select_slave+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     708:	6803      	ldr	r3, [r0, #0]
     70a:	7b9b      	ldrb	r3, [r3, #14]
				if (!spi_is_ready_to_write(module)) {
     70c:	07db      	lsls	r3, r3, #31
     70e:	d410      	bmi.n	732 <spi_select_slave+0x42>
					port_pin_set_output_level(slave->ss_pin, true);
     710:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     712:	09d1      	lsrs	r1, r2, #7
		return NULL;
     714:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     716:	2900      	cmp	r1, #0
     718:	d104      	bne.n	724 <spi_select_slave+0x34>
		return &(ports[port_index]->Group[group_index]);
     71a:	0953      	lsrs	r3, r2, #5
     71c:	01db      	lsls	r3, r3, #7
     71e:	492e      	ldr	r1, [pc, #184]	; (7d8 <spi_select_slave+0xe8>)
     720:	468c      	mov	ip, r1
     722:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     724:	211f      	movs	r1, #31
     726:	4011      	ands	r1, r2
     728:	2201      	movs	r2, #1
     72a:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     72c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     72e:	2305      	movs	r3, #5
     730:	e7e3      	b.n	6fa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     732:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     734:	09d4      	lsrs	r4, r2, #7
		return NULL;
     736:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     738:	2c00      	cmp	r4, #0
     73a:	d104      	bne.n	746 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     73c:	0953      	lsrs	r3, r2, #5
     73e:	01db      	lsls	r3, r3, #7
     740:	4c25      	ldr	r4, [pc, #148]	; (7d8 <spi_select_slave+0xe8>)
     742:	46a4      	mov	ip, r4
     744:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     746:	241f      	movs	r4, #31
     748:	4014      	ands	r4, r2
     74a:	2201      	movs	r2, #1
     74c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     74e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     750:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     752:	7b9a      	ldrb	r2, [r3, #14]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     754:	07d2      	lsls	r2, r2, #31
     756:	d501      	bpl.n	75c <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     758:	788a      	ldrb	r2, [r1, #2]
     75a:	831a      	strh	r2, [r3, #24]
				if (!(module->receiver_enabled)) {
     75c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     75e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     760:	2a00      	cmp	r2, #0
     762:	d1ca      	bne.n	6fa <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     764:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     766:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     768:	7b93      	ldrb	r3, [r2, #14]
     76a:	420b      	tst	r3, r1
     76c:	d0fc      	beq.n	768 <spi_select_slave+0x78>
     76e:	7b91      	ldrb	r1, [r2, #14]
	return STATUS_OK;
     770:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     772:	0749      	lsls	r1, r1, #29
     774:	d5c1      	bpl.n	6fa <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     776:	8a13      	ldrh	r3, [r2, #16]
     778:	075b      	lsls	r3, r3, #29
     77a:	d501      	bpl.n	780 <spi_select_slave+0x90>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     77c:	2304      	movs	r3, #4
     77e:	8213      	strh	r3, [r2, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     780:	7983      	ldrb	r3, [r0, #6]
     782:	2b01      	cmp	r3, #1
     784:	d002      	beq.n	78c <spi_select_slave+0x9c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     786:	8b13      	ldrh	r3, [r2, #24]
     788:	2300      	movs	r3, #0
     78a:	e7b6      	b.n	6fa <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     78c:	8b13      	ldrh	r3, [r2, #24]
     78e:	2300      	movs	r3, #0
     790:	e7b3      	b.n	6fa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     792:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     794:	09d1      	lsrs	r1, r2, #7
		return NULL;
     796:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     798:	2900      	cmp	r1, #0
     79a:	d104      	bne.n	7a6 <spi_select_slave+0xb6>
		return &(ports[port_index]->Group[group_index]);
     79c:	0953      	lsrs	r3, r2, #5
     79e:	01db      	lsls	r3, r3, #7
     7a0:	490d      	ldr	r1, [pc, #52]	; (7d8 <spi_select_slave+0xe8>)
     7a2:	468c      	mov	ip, r1
     7a4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7a6:	211f      	movs	r1, #31
     7a8:	4011      	ands	r1, r2
     7aa:	2201      	movs	r2, #1
     7ac:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     7ae:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     7b0:	2300      	movs	r3, #0
     7b2:	e7a2      	b.n	6fa <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     7b4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     7b6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7b8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7ba:	2900      	cmp	r1, #0
     7bc:	d104      	bne.n	7c8 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     7be:	0953      	lsrs	r3, r2, #5
     7c0:	01db      	lsls	r3, r3, #7
     7c2:	4905      	ldr	r1, [pc, #20]	; (7d8 <spi_select_slave+0xe8>)
     7c4:	468c      	mov	ip, r1
     7c6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7c8:	211f      	movs	r1, #31
     7ca:	4011      	ands	r1, r2
     7cc:	2201      	movs	r2, #1
     7ce:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     7d0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     7d2:	2300      	movs	r3, #0
     7d4:	e791      	b.n	6fa <spi_select_slave+0xa>
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	41004400 	.word	0x41004400

000007dc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7de:	46de      	mov	lr, fp
     7e0:	4657      	mov	r7, sl
     7e2:	464e      	mov	r6, r9
     7e4:	4645      	mov	r5, r8
     7e6:	b5e0      	push	{r5, r6, r7, lr}
     7e8:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     7ea:	2317      	movs	r3, #23
	if (length == 0) {
     7ec:	2a00      	cmp	r2, #0
     7ee:	d107      	bne.n	800 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     7f0:	0018      	movs	r0, r3
     7f2:	b003      	add	sp, #12
     7f4:	bc3c      	pop	{r2, r3, r4, r5}
     7f6:	4690      	mov	r8, r2
     7f8:	4699      	mov	r9, r3
     7fa:	46a2      	mov	sl, r4
     7fc:	46ab      	mov	fp, r5
     7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     800:	7943      	ldrb	r3, [r0, #5]
     802:	2b00      	cmp	r3, #0
     804:	d103      	bne.n	80e <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
     806:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     808:	7b9c      	ldrb	r4, [r3, #14]
     80a:	07a4      	lsls	r4, r4, #30
     80c:	d40a      	bmi.n	824 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
     80e:	4693      	mov	fp, r2
     810:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
     812:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
     814:	2502      	movs	r5, #2
     816:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
     818:	3502      	adds	r5, #2
     81a:	46a8      	mov	r8, r5
     81c:	3a01      	subs	r2, #1
     81e:	b292      	uxth	r2, r2
     820:	468a      	mov	sl, r1
     822:	e023      	b.n	86c <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     824:	2402      	movs	r4, #2
     826:	739c      	strb	r4, [r3, #14]
     828:	e7f1      	b.n	80e <spi_write_buffer_wait+0x32>
     82a:	7bb5      	ldrb	r5, [r6, #14]
			if (spi_is_write_complete(module)) {
     82c:	4661      	mov	r1, ip
     82e:	420d      	tst	r5, r1
     830:	d12e      	bne.n	890 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     832:	7bb5      	ldrb	r5, [r6, #14]
			if (!spi_is_ready_to_write(module)) {
     834:	421d      	tst	r5, r3
     836:	d100      	bne.n	83a <spi_write_buffer_wait+0x5e>
     838:	e0c2      	b.n	9c0 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     83a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     83c:	7bb5      	ldrb	r5, [r6, #14]
		while (!spi_is_ready_to_write(module)) {
     83e:	421d      	tst	r5, r3
     840:	d0fc      	beq.n	83c <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
     842:	1c67      	adds	r7, r4, #1
     844:	b2bf      	uxth	r7, r7
     846:	4651      	mov	r1, sl
     848:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     84a:	7981      	ldrb	r1, [r0, #6]
     84c:	2901      	cmp	r1, #1
     84e:	d023      	beq.n	898 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
     850:	b2ad      	uxth	r5, r5
     852:	003c      	movs	r4, r7
     854:	7bb7      	ldrb	r7, [r6, #14]
	if (!spi_is_ready_to_write(module)) {
     856:	421f      	tst	r7, r3
     858:	d002      	beq.n	860 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     85a:	05ed      	lsls	r5, r5, #23
     85c:	0ded      	lsrs	r5, r5, #23
     85e:	8335      	strh	r5, [r6, #24]
     860:	1e55      	subs	r5, r2, #1
     862:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
     864:	79c6      	ldrb	r6, [r0, #7]
     866:	2e00      	cmp	r6, #0
     868:	d11d      	bne.n	8a6 <spi_write_buffer_wait+0xca>
     86a:	002a      	movs	r2, r5
	while (length--) {
     86c:	4d59      	ldr	r5, [pc, #356]	; (9d4 <spi_write_buffer_wait+0x1f8>)
     86e:	42aa      	cmp	r2, r5
     870:	d070      	beq.n	954 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
     872:	7945      	ldrb	r5, [r0, #5]
     874:	2d00      	cmp	r5, #0
     876:	d1e0      	bne.n	83a <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     878:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     87a:	7bb5      	ldrb	r5, [r6, #14]
				if (spi_is_ready_to_write(module)) {
     87c:	421d      	tst	r5, r3
     87e:	d1d4      	bne.n	82a <spi_write_buffer_wait+0x4e>
     880:	4d55      	ldr	r5, [pc, #340]	; (9d8 <spi_write_buffer_wait+0x1fc>)
     882:	7bb7      	ldrb	r7, [r6, #14]
     884:	421f      	tst	r7, r3
     886:	d1d0      	bne.n	82a <spi_write_buffer_wait+0x4e>
     888:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     88a:	2d00      	cmp	r5, #0
     88c:	d1f9      	bne.n	882 <spi_write_buffer_wait+0xa6>
     88e:	e7cc      	b.n	82a <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     890:	2302      	movs	r3, #2
     892:	73b3      	strb	r3, [r6, #14]
				return STATUS_ABORTED;
     894:	3302      	adds	r3, #2
     896:	e7ab      	b.n	7f0 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
     898:	3402      	adds	r4, #2
     89a:	b2a4      	uxth	r4, r4
     89c:	4651      	mov	r1, sl
     89e:	5dcf      	ldrb	r7, [r1, r7]
     8a0:	023f      	lsls	r7, r7, #8
     8a2:	433d      	orrs	r5, r7
     8a4:	e7d6      	b.n	854 <spi_write_buffer_wait+0x78>
     8a6:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
     8a8:	7945      	ldrb	r5, [r0, #5]
     8aa:	2d00      	cmp	r5, #0
     8ac:	d137      	bne.n	91e <spi_write_buffer_wait+0x142>
     8ae:	4d4b      	ldr	r5, [pc, #300]	; (9dc <spi_write_buffer_wait+0x200>)
     8b0:	9101      	str	r1, [sp, #4]
     8b2:	e012      	b.n	8da <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
     8b4:	3402      	adds	r4, #2
     8b6:	b2a4      	uxth	r4, r4
     8b8:	4649      	mov	r1, r9
     8ba:	9f01      	ldr	r7, [sp, #4]
     8bc:	5c79      	ldrb	r1, [r7, r1]
     8be:	0209      	lsls	r1, r1, #8
     8c0:	9f00      	ldr	r7, [sp, #0]
     8c2:	430f      	orrs	r7, r1
     8c4:	e01b      	b.n	8fe <spi_write_buffer_wait+0x122>
						length--;
     8c6:	3a01      	subs	r2, #1
     8c8:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
     8ca:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8cc:	7bb7      	ldrb	r7, [r6, #14]
					if (spi_is_ready_to_read(module)) {
     8ce:	4641      	mov	r1, r8
     8d0:	420f      	tst	r7, r1
     8d2:	d11b      	bne.n	90c <spi_write_buffer_wait+0x130>
     8d4:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     8d6:	2d00      	cmp	r5, #0
     8d8:	d018      	beq.n	90c <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
     8da:	2a00      	cmp	r2, #0
     8dc:	d0f5      	beq.n	8ca <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
     8de:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8e0:	7bb7      	ldrb	r7, [r6, #14]
     8e2:	421f      	tst	r7, r3
     8e4:	d0f1      	beq.n	8ca <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
     8e6:	1c67      	adds	r7, r4, #1
     8e8:	b2b9      	uxth	r1, r7
     8ea:	4689      	mov	r9, r1
     8ec:	9901      	ldr	r1, [sp, #4]
     8ee:	5d09      	ldrb	r1, [r1, r4]
     8f0:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8f2:	7981      	ldrb	r1, [r0, #6]
     8f4:	2901      	cmp	r1, #1
     8f6:	d0dd      	beq.n	8b4 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
     8f8:	4669      	mov	r1, sp
     8fa:	880f      	ldrh	r7, [r1, #0]
     8fc:	464c      	mov	r4, r9
     8fe:	7bb1      	ldrb	r1, [r6, #14]
	if (!spi_is_ready_to_write(module)) {
     900:	4219      	tst	r1, r3
     902:	d0e0      	beq.n	8c6 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     904:	05ff      	lsls	r7, r7, #23
     906:	0dff      	lsrs	r7, r7, #23
     908:	8337      	strh	r7, [r6, #24]
     90a:	e7dc      	b.n	8c6 <spi_write_buffer_wait+0xea>
     90c:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     90e:	7bb5      	ldrb	r5, [r6, #14]
				if (spi_is_write_complete(module)) {
     910:	4667      	mov	r7, ip
     912:	423d      	tst	r5, r7
     914:	d118      	bne.n	948 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     916:	7bb5      	ldrb	r5, [r6, #14]
				if (!spi_is_ready_to_read(module)) {
     918:	4646      	mov	r6, r8
     91a:	4235      	tst	r5, r6
     91c:	d052      	beq.n	9c4 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
     91e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     920:	7bb5      	ldrb	r5, [r6, #14]
			while (!spi_is_ready_to_read(module)) {
     922:	4647      	mov	r7, r8
     924:	423d      	tst	r5, r7
     926:	d0fb      	beq.n	920 <spi_write_buffer_wait+0x144>
     928:	7bb5      	ldrb	r5, [r6, #14]
	if (!spi_is_ready_to_read(module)) {
     92a:	423d      	tst	r5, r7
     92c:	d007      	beq.n	93e <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     92e:	8a35      	ldrh	r5, [r6, #16]
     930:	423d      	tst	r5, r7
     932:	d000      	beq.n	936 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     934:	8237      	strh	r7, [r6, #16]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     936:	7985      	ldrb	r5, [r0, #6]
     938:	2d01      	cmp	r5, #1
     93a:	d009      	beq.n	950 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     93c:	8b35      	ldrh	r5, [r6, #24]
			flush_length--;
     93e:	465d      	mov	r5, fp
     940:	3d01      	subs	r5, #1
     942:	b2ad      	uxth	r5, r5
     944:	46ab      	mov	fp, r5
     946:	e769      	b.n	81c <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     948:	2302      	movs	r3, #2
     94a:	73b3      	strb	r3, [r6, #14]
					return STATUS_ABORTED;
     94c:	3302      	adds	r3, #2
     94e:	e74f      	b.n	7f0 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     950:	8b35      	ldrh	r5, [r6, #24]
     952:	e7f4      	b.n	93e <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
     954:	7943      	ldrb	r3, [r0, #5]
     956:	2b01      	cmp	r3, #1
     958:	d00b      	beq.n	972 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
     95a:	2b00      	cmp	r3, #0
     95c:	d134      	bne.n	9c8 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
     95e:	79c2      	ldrb	r2, [r0, #7]
     960:	2a00      	cmp	r2, #0
     962:	d100      	bne.n	966 <spi_write_buffer_wait+0x18a>
     964:	e744      	b.n	7f0 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
     966:	2404      	movs	r4, #4
			while (flush_length) {
     968:	465b      	mov	r3, fp
     96a:	465d      	mov	r5, fp
     96c:	2b00      	cmp	r3, #0
     96e:	d119      	bne.n	9a4 <spi_write_buffer_wait+0x1c8>
     970:	e73e      	b.n	7f0 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
     972:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
     974:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     976:	7b8b      	ldrb	r3, [r1, #14]
     978:	4213      	tst	r3, r2
     97a:	d0fc      	beq.n	976 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
     97c:	2300      	movs	r3, #0
     97e:	e737      	b.n	7f0 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     980:	7b8b      	ldrb	r3, [r1, #14]
				if (!spi_is_ready_to_read(module)) {
     982:	4223      	tst	r3, r4
     984:	d022      	beq.n	9cc <spi_write_buffer_wait+0x1f0>
     986:	7b8b      	ldrb	r3, [r1, #14]
	if (!spi_is_ready_to_read(module)) {
     988:	4223      	tst	r3, r4
     98a:	d007      	beq.n	99c <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     98c:	8a0b      	ldrh	r3, [r1, #16]
     98e:	4223      	tst	r3, r4
     990:	d000      	beq.n	994 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     992:	820c      	strh	r4, [r1, #16]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     994:	7983      	ldrb	r3, [r0, #6]
     996:	2b01      	cmp	r3, #1
     998:	d010      	beq.n	9bc <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     99a:	8b0b      	ldrh	r3, [r1, #24]
				flush_length--;
     99c:	3d01      	subs	r5, #1
     99e:	b2ad      	uxth	r5, r5
			while (flush_length) {
     9a0:	2d00      	cmp	r5, #0
     9a2:	d015      	beq.n	9d0 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     9a4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9a6:	7b8b      	ldrb	r3, [r1, #14]
					if (spi_is_ready_to_read(module)) {
     9a8:	4223      	tst	r3, r4
     9aa:	d1e9      	bne.n	980 <spi_write_buffer_wait+0x1a4>
     9ac:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <spi_write_buffer_wait+0x1fc>)
     9ae:	7b8a      	ldrb	r2, [r1, #14]
     9b0:	4222      	tst	r2, r4
     9b2:	d1e5      	bne.n	980 <spi_write_buffer_wait+0x1a4>
     9b4:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     9b6:	2b00      	cmp	r3, #0
     9b8:	d1f9      	bne.n	9ae <spi_write_buffer_wait+0x1d2>
     9ba:	e7e1      	b.n	980 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     9bc:	8b0b      	ldrh	r3, [r1, #24]
     9be:	e7ed      	b.n	99c <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
     9c0:	2312      	movs	r3, #18
     9c2:	e715      	b.n	7f0 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
     9c4:	2312      	movs	r3, #18
     9c6:	e713      	b.n	7f0 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
     9c8:	2300      	movs	r3, #0
     9ca:	e711      	b.n	7f0 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
     9cc:	2312      	movs	r3, #18
     9ce:	e70f      	b.n	7f0 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
     9d0:	2300      	movs	r3, #0
     9d2:	e70d      	b.n	7f0 <spi_write_buffer_wait+0x14>
     9d4:	0000ffff 	.word	0x0000ffff
     9d8:	00002710 	.word	0x00002710
     9dc:	00002711 	.word	0x00002711

000009e0 <drv_ctrl_write_cmd>:
static uint16_t actual_position_mm;

    /* Pure SPI write function, takes register and data as input and send it to the stepper controller via SPI.
	 * Returns 0 on success and 1 on failure.
	 */
static int drv_ctrl_write_cmd(uint8_t adress, uint16_t data) {
     9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e2:	b083      	sub	sp, #12
	
	uint8_t transfer_data_buffer[] = {((adress << 4)|(data >> 8)), (data & 0xFF)};
     9e4:	ac01      	add	r4, sp, #4
     9e6:	0103      	lsls	r3, r0, #4
     9e8:	0a08      	lsrs	r0, r1, #8
     9ea:	4318      	orrs	r0, r3
     9ec:	7020      	strb	r0, [r4, #0]
     9ee:	7061      	strb	r1, [r4, #1]
		
	spi_select_slave(&spi_master_instance, &spi_motor_controller, true);
     9f0:	4e0a      	ldr	r6, [pc, #40]	; (a1c <drv_ctrl_write_cmd+0x3c>)
     9f2:	4d0b      	ldr	r5, [pc, #44]	; (a20 <drv_ctrl_write_cmd+0x40>)
     9f4:	2201      	movs	r2, #1
     9f6:	0031      	movs	r1, r6
     9f8:	0028      	movs	r0, r5
     9fa:	4f0a      	ldr	r7, [pc, #40]	; (a24 <drv_ctrl_write_cmd+0x44>)
     9fc:	47b8      	blx	r7
	enum status_code response = spi_write_buffer_wait(&spi_master_instance, transfer_data_buffer, 2);
     9fe:	2202      	movs	r2, #2
     a00:	0021      	movs	r1, r4
     a02:	0028      	movs	r0, r5
     a04:	4b08      	ldr	r3, [pc, #32]	; (a28 <drv_ctrl_write_cmd+0x48>)
     a06:	4798      	blx	r3
     a08:	0004      	movs	r4, r0
	spi_select_slave(&spi_master_instance, &spi_motor_controller, false);
     a0a:	2200      	movs	r2, #0
     a0c:	0031      	movs	r1, r6
     a0e:	0028      	movs	r0, r5
     a10:	47b8      	blx	r7
	
	if(response == 0) {
     a12:	0020      	movs	r0, r4
     a14:	1e44      	subs	r4, r0, #1
     a16:	41a0      	sbcs	r0, r4
		return EXIT_SUCCESS;
	} else {
		return EXIT_FAILURE;
	}
}
     a18:	b003      	add	sp, #12
     a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1c:	2000008c 	.word	0x2000008c
     a20:	20000090 	.word	0x20000090
     a24:	000006f1 	.word	0x000006f1
     a28:	000007dd 	.word	0x000007dd

00000a2c <drv_ctrl_write_ctrl>:

    /* Following functions writes to one designated register. The functions are using the local configuration struct
	 * to prevent overwriting of previous values.
	 */

static void drv_ctrl_write_ctrl(void){
     a2c:	b510      	push	{r4, lr}
	
	drv_ctrl_write_cmd(CTRL_REG,
	drv_config.direction_set |
     a2e:	4b08      	ldr	r3, [pc, #32]	; (a50 <drv_ctrl_write_ctrl+0x24>)
	drv_config.enable |
	drv_config.step_mode |
	drv_config.stall_detect |
     a30:	7899      	ldrb	r1, [r3, #2]
     a32:	781a      	ldrb	r2, [r3, #0]
     a34:	4311      	orrs	r1, r2
     a36:	78da      	ldrb	r2, [r3, #3]
     a38:	4311      	orrs	r1, r2
     a3a:	791a      	ldrb	r2, [r3, #4]
     a3c:	4311      	orrs	r1, r2
     a3e:	88da      	ldrh	r2, [r3, #6]
     a40:	4311      	orrs	r1, r2
	drv_config.isense_gain |
     a42:	891b      	ldrh	r3, [r3, #8]
	drv_ctrl_write_cmd(CTRL_REG,
     a44:	4319      	orrs	r1, r3
     a46:	2000      	movs	r0, #0
     a48:	4b02      	ldr	r3, [pc, #8]	; (a54 <drv_ctrl_write_ctrl+0x28>)
     a4a:	4798      	blx	r3
	drv_config.dead_time_insert);
	
}
     a4c:	bd10      	pop	{r4, pc}
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	20000048 	.word	0x20000048
     a54:	000009e1 	.word	0x000009e1

00000a58 <drv_ctrl_init>:
	drv_config.hs_current);
	
}

    /* Initialize the stepper driver, drv_config_struct is defined in this file and exported in header. */
int drv_ctrl_init(struct drv_config_struct * const config) {
     a58:	b570      	push	{r4, r5, r6, lr}
     a5a:	0001      	movs	r1, r0
	
	drv_config = *config;
     a5c:	4c18      	ldr	r4, [pc, #96]	; (ac0 <drv_ctrl_init+0x68>)
     a5e:	2226      	movs	r2, #38	; 0x26
     a60:	0020      	movs	r0, r4
     a62:	4b18      	ldr	r3, [pc, #96]	; (ac4 <drv_ctrl_init+0x6c>)
     a64:	4798      	blx	r3
	
	drv_ctrl_write_ctrl();
     a66:	4b18      	ldr	r3, [pc, #96]	; (ac8 <drv_ctrl_init+0x70>)
     a68:	4798      	blx	r3
	drv_config.drv_torque |
     a6a:	7aa1      	ldrb	r1, [r4, #10]
	drv_ctrl_write_cmd(TORQUE_REG,
     a6c:	89a3      	ldrh	r3, [r4, #12]
     a6e:	4319      	orrs	r1, r3
     a70:	2001      	movs	r0, #1
     a72:	4d16      	ldr	r5, [pc, #88]	; (acc <drv_ctrl_init+0x74>)
     a74:	47a8      	blx	r5
    drv_config.drv_toff |
     a76:	7ba1      	ldrb	r1, [r4, #14]
    drv_ctrl_write_cmd(OFF_REG,
     a78:	8a23      	ldrh	r3, [r4, #16]
     a7a:	4319      	orrs	r1, r3
     a7c:	2002      	movs	r0, #2
     a7e:	47a8      	blx	r5
	drv_config.drv_tblank |
     a80:	7ca1      	ldrb	r1, [r4, #18]
	drv_ctrl_write_cmd(BLANK_REG,
     a82:	8aa3      	ldrh	r3, [r4, #20]
     a84:	4319      	orrs	r1, r3
     a86:	2003      	movs	r0, #3
     a88:	47a8      	blx	r5
	drv_ctrl_write_cmd(DECAY_REG,
     a8a:	7da1      	ldrb	r1, [r4, #22]
     a8c:	7de3      	ldrb	r3, [r4, #23]
     a8e:	4319      	orrs	r1, r3
     a90:	2004      	movs	r0, #4
     a92:	47a8      	blx	r5
	drv_config.drv_sdthr |
     a94:	7e21      	ldrb	r1, [r4, #24]
     a96:	8b63      	ldrh	r3, [r4, #26]
     a98:	4319      	orrs	r1, r3
	drv_config.stall_count |
     a9a:	8ba3      	ldrh	r3, [r4, #28]
	drv_ctrl_write_cmd(STALL_REG,
     a9c:	4319      	orrs	r1, r3
     a9e:	2005      	movs	r0, #5
     aa0:	47a8      	blx	r5
	drv_config.hs_drive_time |
     aa2:	7fa1      	ldrb	r1, [r4, #30]
     aa4:	2320      	movs	r3, #32
     aa6:	5ce3      	ldrb	r3, [r4, r3]
     aa8:	4319      	orrs	r1, r3
     aaa:	2321      	movs	r3, #33	; 0x21
     aac:	5ce3      	ldrb	r3, [r4, r3]
     aae:	4319      	orrs	r1, r3
     ab0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
     ab2:	4319      	orrs	r1, r3
	drv_config.ls_current |
     ab4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	drv_ctrl_write_cmd(DRIVE_REG,
     ab6:	4319      	orrs	r1, r3
     ab8:	2006      	movs	r0, #6
     aba:	47a8      	blx	r5
			
	drv_ctrl_write_drive();
	
			
	return EXIT_SUCCESS;
}
     abc:	2000      	movs	r0, #0
     abe:	bd70      	pop	{r4, r5, r6, pc}
     ac0:	20000048 	.word	0x20000048
     ac4:	0000150d 	.word	0x0000150d
     ac8:	00000a2d 	.word	0x00000a2d
     acc:	000009e1 	.word	0x000009e1

00000ad0 <drv_ctrl_enable>:

int drv_ctrl_enable(){
     ad0:	b510      	push	{r4, lr}
	
	drv_config.enable = DRV_ENABLE;
     ad2:	2201      	movs	r2, #1
     ad4:	4b02      	ldr	r3, [pc, #8]	; (ae0 <drv_ctrl_enable+0x10>)
     ad6:	701a      	strb	r2, [r3, #0]
	drv_ctrl_write_ctrl();
     ad8:	4b02      	ldr	r3, [pc, #8]	; (ae4 <drv_ctrl_enable+0x14>)
     ada:	4798      	blx	r3
	
	return EXIT_SUCCESS;
}
     adc:	2000      	movs	r0, #0
     ade:	bd10      	pop	{r4, pc}
     ae0:	20000048 	.word	0x20000048
     ae4:	00000a2d 	.word	0x00000a2d

00000ae8 <drv_ctrl_moveto>:
}

    /* Move to position, takes target position as input in mm from top. Check also for out of range position.
	 * when move is complete set new position. Returns 1 on success and 0 on failure.
	 */
int drv_ctrl_moveto(uint16_t position_mm) {
     ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aea:	46d6      	mov	lr, sl
     aec:	464f      	mov	r7, r9
     aee:	4646      	mov	r6, r8
     af0:	b5c0      	push	{r6, r7, lr}
     af2:	4680      	mov	r8, r0
	
	if(position_mm > Z_AXIS_MAX_TRAVEL) {
		return EXIT_FAILURE;
     af4:	2001      	movs	r0, #1
	if(position_mm > Z_AXIS_MAX_TRAVEL) {
     af6:	4643      	mov	r3, r8
     af8:	2b64      	cmp	r3, #100	; 0x64
     afa:	d825      	bhi.n	b48 <drv_ctrl_moveto+0x60>
	}
	
	enum direction dir = (actual_position_mm > position_mm) ? up : down;
     afc:	4b17      	ldr	r3, [pc, #92]	; (b5c <drv_ctrl_moveto+0x74>)
     afe:	881b      	ldrh	r3, [r3, #0]
	uint16_t steps = abs(actual_position_mm - position_mm) * Z_AXIS_STEPS_PER_MM;
     b00:	4642      	mov	r2, r8
     b02:	1a9f      	subs	r7, r3, r2
     b04:	17fa      	asrs	r2, r7, #31
     b06:	18bf      	adds	r7, r7, r2
     b08:	4057      	eors	r7, r2
     b0a:	2250      	movs	r2, #80	; 0x50
     b0c:	4357      	muls	r7, r2
     b0e:	b2bf      	uxth	r7, r7
	if (level) {
     b10:	4598      	cmp	r8, r3
     b12:	d21e      	bcs.n	b52 <drv_ctrl_moveto+0x6a>
		port_base->OUTSET.reg = pin_mask;
     b14:	2280      	movs	r2, #128	; 0x80
     b16:	0352      	lsls	r2, r2, #13
     b18:	4b11      	ldr	r3, [pc, #68]	; (b60 <drv_ctrl_moveto+0x78>)
     b1a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(MOTOR_CONTROLLER_DIR_PIN, dir);
	for(int i = 0; i <= steps; i++){
     b1c:	2400      	movs	r4, #0
     b1e:	4e10      	ldr	r6, [pc, #64]	; (b60 <drv_ctrl_moveto+0x78>)
     b20:	2380      	movs	r3, #128	; 0x80
     b22:	039b      	lsls	r3, r3, #14
     b24:	4699      	mov	r9, r3
     b26:	469a      	mov	sl, r3
     b28:	4653      	mov	r3, sl
     b2a:	61b3      	str	r3, [r6, #24]
		port_pin_set_output_level(MOTOR_CONTROLLER_STP_PIN, true);
		delay_ms(10);
     b2c:	200a      	movs	r0, #10
     b2e:	4d0d      	ldr	r5, [pc, #52]	; (b64 <drv_ctrl_moveto+0x7c>)
     b30:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     b32:	464b      	mov	r3, r9
     b34:	6173      	str	r3, [r6, #20]
		port_pin_set_output_level(MOTOR_CONTROLLER_STP_PIN, false);
		delay_ms(20);
     b36:	2014      	movs	r0, #20
     b38:	47a8      	blx	r5
	for(int i = 0; i <= steps; i++){
     b3a:	3401      	adds	r4, #1
     b3c:	42bc      	cmp	r4, r7
     b3e:	ddf3      	ble.n	b28 <drv_ctrl_moveto+0x40>
	}
	
	actual_position_mm = position_mm;
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <drv_ctrl_moveto+0x74>)
     b42:	4642      	mov	r2, r8
     b44:	801a      	strh	r2, [r3, #0]
	
	return EXIT_SUCCESS;
     b46:	2000      	movs	r0, #0
	
}
     b48:	bc1c      	pop	{r2, r3, r4}
     b4a:	4690      	mov	r8, r2
     b4c:	4699      	mov	r9, r3
     b4e:	46a2      	mov	sl, r4
     b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b52:	2280      	movs	r2, #128	; 0x80
     b54:	0352      	lsls	r2, r2, #13
     b56:	4b02      	ldr	r3, [pc, #8]	; (b60 <drv_ctrl_moveto+0x78>)
     b58:	615a      	str	r2, [r3, #20]
     b5a:	e7df      	b.n	b1c <drv_ctrl_moveto+0x34>
     b5c:	20000044 	.word	0x20000044
     b60:	41004400 	.word	0x41004400
     b64:	00000145 	.word	0x00000145

00000b68 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     b68:	4b0c      	ldr	r3, [pc, #48]	; (b9c <cpu_irq_enter_critical+0x34>)
     b6a:	681b      	ldr	r3, [r3, #0]
     b6c:	2b00      	cmp	r3, #0
     b6e:	d106      	bne.n	b7e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b70:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     b74:	2b00      	cmp	r3, #0
     b76:	d007      	beq.n	b88 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     b78:	2200      	movs	r2, #0
     b7a:	4b09      	ldr	r3, [pc, #36]	; (ba0 <cpu_irq_enter_critical+0x38>)
     b7c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     b7e:	4a07      	ldr	r2, [pc, #28]	; (b9c <cpu_irq_enter_critical+0x34>)
     b80:	6813      	ldr	r3, [r2, #0]
     b82:	3301      	adds	r3, #1
     b84:	6013      	str	r3, [r2, #0]
}
     b86:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     b88:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     b8a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     b8e:	2200      	movs	r2, #0
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <cpu_irq_enter_critical+0x3c>)
     b92:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     b94:	3201      	adds	r2, #1
     b96:	4b02      	ldr	r3, [pc, #8]	; (ba0 <cpu_irq_enter_critical+0x38>)
     b98:	701a      	strb	r2, [r3, #0]
     b9a:	e7f0      	b.n	b7e <cpu_irq_enter_critical+0x16>
     b9c:	20000070 	.word	0x20000070
     ba0:	20000074 	.word	0x20000074
     ba4:	20000008 	.word	0x20000008

00000ba8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ba8:	4b08      	ldr	r3, [pc, #32]	; (bcc <cpu_irq_leave_critical+0x24>)
     baa:	681a      	ldr	r2, [r3, #0]
     bac:	3a01      	subs	r2, #1
     bae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     bb0:	681b      	ldr	r3, [r3, #0]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d109      	bne.n	bca <cpu_irq_leave_critical+0x22>
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <cpu_irq_leave_critical+0x28>)
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	2b00      	cmp	r3, #0
     bbc:	d005      	beq.n	bca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     bbe:	2201      	movs	r2, #1
     bc0:	4b04      	ldr	r3, [pc, #16]	; (bd4 <cpu_irq_leave_critical+0x2c>)
     bc2:	701a      	strb	r2, [r3, #0]
     bc4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     bc8:	b662      	cpsie	i
	}
}
     bca:	4770      	bx	lr
     bcc:	20000070 	.word	0x20000070
     bd0:	20000074 	.word	0x20000074
     bd4:	20000008 	.word	0x20000008

00000bd8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bda:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     bdc:	ac01      	add	r4, sp, #4
     bde:	2501      	movs	r5, #1
     be0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     be2:	2700      	movs	r7, #0
     be4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     be6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     be8:	0021      	movs	r1, r4
     bea:	200e      	movs	r0, #14
     bec:	4e06      	ldr	r6, [pc, #24]	; (c08 <system_board_init+0x30>)
     bee:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     bf0:	2280      	movs	r2, #128	; 0x80
     bf2:	01d2      	lsls	r2, r2, #7
     bf4:	4b05      	ldr	r3, [pc, #20]	; (c0c <system_board_init+0x34>)
     bf6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     bf8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     bfa:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     bfc:	0021      	movs	r1, r4
     bfe:	200f      	movs	r0, #15
     c00:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
     c02:	b003      	add	sp, #12
     c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	00000c11 	.word	0x00000c11
     c0c:	41004400 	.word	0x41004400

00000c10 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c10:	b500      	push	{lr}
     c12:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c14:	ab01      	add	r3, sp, #4
     c16:	2280      	movs	r2, #128	; 0x80
     c18:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     c1a:	780a      	ldrb	r2, [r1, #0]
     c1c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     c1e:	784a      	ldrb	r2, [r1, #1]
     c20:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     c22:	788a      	ldrb	r2, [r1, #2]
     c24:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     c26:	0019      	movs	r1, r3
     c28:	4b01      	ldr	r3, [pc, #4]	; (c30 <port_pin_set_config+0x20>)
     c2a:	4798      	blx	r3
}
     c2c:	b003      	add	sp, #12
     c2e:	bd00      	pop	{pc}
     c30:	00001145 	.word	0x00001145

00000c34 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c34:	b510      	push	{r4, lr}
	switch (clock_source) {
     c36:	2807      	cmp	r0, #7
     c38:	d803      	bhi.n	c42 <system_clock_source_get_hz+0xe>
     c3a:	0080      	lsls	r0, r0, #2
     c3c:	4b16      	ldr	r3, [pc, #88]	; (c98 <system_clock_source_get_hz+0x64>)
     c3e:	581b      	ldr	r3, [r3, r0]
     c40:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     c42:	2000      	movs	r0, #0
     c44:	e027      	b.n	c96 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     c46:	4b15      	ldr	r3, [pc, #84]	; (c9c <system_clock_source_get_hz+0x68>)
     c48:	68d8      	ldr	r0, [r3, #12]
     c4a:	e024      	b.n	c96 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c4c:	4b14      	ldr	r3, [pc, #80]	; (ca0 <system_clock_source_get_hz+0x6c>)
     c4e:	6a1b      	ldr	r3, [r3, #32]
     c50:	059b      	lsls	r3, r3, #22
     c52:	0f9b      	lsrs	r3, r3, #30
     c54:	4813      	ldr	r0, [pc, #76]	; (ca4 <system_clock_source_get_hz+0x70>)
     c56:	40d8      	lsrs	r0, r3
     c58:	e01d      	b.n	c96 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     c5a:	4b10      	ldr	r3, [pc, #64]	; (c9c <system_clock_source_get_hz+0x68>)
     c5c:	6918      	ldr	r0, [r3, #16]
     c5e:	e01a      	b.n	c96 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <system_clock_source_get_hz+0x68>)
     c62:	681b      	ldr	r3, [r3, #0]
			return 0;
     c64:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c66:	079b      	lsls	r3, r3, #30
     c68:	d515      	bpl.n	c96 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c6a:	490d      	ldr	r1, [pc, #52]	; (ca0 <system_clock_source_get_hz+0x6c>)
     c6c:	2210      	movs	r2, #16
     c6e:	68cb      	ldr	r3, [r1, #12]
     c70:	421a      	tst	r2, r3
     c72:	d0fc      	beq.n	c6e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     c74:	4b09      	ldr	r3, [pc, #36]	; (c9c <system_clock_source_get_hz+0x68>)
     c76:	681b      	ldr	r3, [r3, #0]
     c78:	075b      	lsls	r3, r3, #29
     c7a:	d401      	bmi.n	c80 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     c7c:	480a      	ldr	r0, [pc, #40]	; (ca8 <system_clock_source_get_hz+0x74>)
     c7e:	e00a      	b.n	c96 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c80:	2000      	movs	r0, #0
     c82:	4b0a      	ldr	r3, [pc, #40]	; (cac <system_clock_source_get_hz+0x78>)
     c84:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     c86:	4b05      	ldr	r3, [pc, #20]	; (c9c <system_clock_source_get_hz+0x68>)
     c88:	689b      	ldr	r3, [r3, #8]
     c8a:	041b      	lsls	r3, r3, #16
     c8c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c8e:	4358      	muls	r0, r3
     c90:	e001      	b.n	c96 <system_clock_source_get_hz+0x62>
		return 32768UL;
     c92:	2080      	movs	r0, #128	; 0x80
     c94:	0200      	lsls	r0, r0, #8
	}
}
     c96:	bd10      	pop	{r4, pc}
     c98:	00001548 	.word	0x00001548
     c9c:	20000078 	.word	0x20000078
     ca0:	40000800 	.word	0x40000800
     ca4:	007a1200 	.word	0x007a1200
     ca8:	02dc6c00 	.word	0x02dc6c00
     cac:	00001069 	.word	0x00001069

00000cb0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     cb0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     cb2:	490c      	ldr	r1, [pc, #48]	; (ce4 <system_clock_source_osc8m_set_config+0x34>)
     cb4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     cb6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     cb8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     cba:	7840      	ldrb	r0, [r0, #1]
     cbc:	2201      	movs	r2, #1
     cbe:	4010      	ands	r0, r2
     cc0:	0180      	lsls	r0, r0, #6
     cc2:	2640      	movs	r6, #64	; 0x40
     cc4:	43b3      	bics	r3, r6
     cc6:	4303      	orrs	r3, r0
     cc8:	402a      	ands	r2, r5
     cca:	01d2      	lsls	r2, r2, #7
     ccc:	2080      	movs	r0, #128	; 0x80
     cce:	4383      	bics	r3, r0
     cd0:	4313      	orrs	r3, r2
     cd2:	2203      	movs	r2, #3
     cd4:	4022      	ands	r2, r4
     cd6:	0212      	lsls	r2, r2, #8
     cd8:	4803      	ldr	r0, [pc, #12]	; (ce8 <system_clock_source_osc8m_set_config+0x38>)
     cda:	4003      	ands	r3, r0
     cdc:	4313      	orrs	r3, r2
     cde:	620b      	str	r3, [r1, #32]
}
     ce0:	bd70      	pop	{r4, r5, r6, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	40000800 	.word	0x40000800
     ce8:	fffffcff 	.word	0xfffffcff

00000cec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     cec:	2807      	cmp	r0, #7
     cee:	d803      	bhi.n	cf8 <system_clock_source_enable+0xc>
     cf0:	0080      	lsls	r0, r0, #2
     cf2:	4b1e      	ldr	r3, [pc, #120]	; (d6c <system_clock_source_enable+0x80>)
     cf4:	581b      	ldr	r3, [r3, r0]
     cf6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     cf8:	2017      	movs	r0, #23
     cfa:	e036      	b.n	d6a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     cfc:	4a1c      	ldr	r2, [pc, #112]	; (d70 <system_clock_source_enable+0x84>)
     cfe:	6a13      	ldr	r3, [r2, #32]
     d00:	2102      	movs	r1, #2
     d02:	430b      	orrs	r3, r1
     d04:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d06:	2000      	movs	r0, #0
     d08:	e02f      	b.n	d6a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d0a:	4a19      	ldr	r2, [pc, #100]	; (d70 <system_clock_source_enable+0x84>)
     d0c:	6993      	ldr	r3, [r2, #24]
     d0e:	2102      	movs	r1, #2
     d10:	430b      	orrs	r3, r1
     d12:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     d14:	2000      	movs	r0, #0
		break;
     d16:	e028      	b.n	d6a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d18:	4a15      	ldr	r2, [pc, #84]	; (d70 <system_clock_source_enable+0x84>)
     d1a:	8a13      	ldrh	r3, [r2, #16]
     d1c:	2102      	movs	r1, #2
     d1e:	430b      	orrs	r3, r1
     d20:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     d22:	2000      	movs	r0, #0
		break;
     d24:	e021      	b.n	d6a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d26:	4a12      	ldr	r2, [pc, #72]	; (d70 <system_clock_source_enable+0x84>)
     d28:	8a93      	ldrh	r3, [r2, #20]
     d2a:	2102      	movs	r1, #2
     d2c:	430b      	orrs	r3, r1
     d2e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     d30:	2000      	movs	r0, #0
		break;
     d32:	e01a      	b.n	d6a <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     d34:	4b0f      	ldr	r3, [pc, #60]	; (d74 <system_clock_source_enable+0x88>)
     d36:	681a      	ldr	r2, [r3, #0]
     d38:	2102      	movs	r1, #2
     d3a:	430a      	orrs	r2, r1
     d3c:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	4a0d      	ldr	r2, [pc, #52]	; (d78 <system_clock_source_enable+0x8c>)
     d42:	4013      	ands	r3, r2
     d44:	4a0a      	ldr	r2, [pc, #40]	; (d70 <system_clock_source_enable+0x84>)
     d46:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d48:	0011      	movs	r1, r2
     d4a:	2210      	movs	r2, #16
     d4c:	68cb      	ldr	r3, [r1, #12]
     d4e:	421a      	tst	r2, r3
     d50:	d0fc      	beq.n	d4c <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     d52:	4a08      	ldr	r2, [pc, #32]	; (d74 <system_clock_source_enable+0x88>)
     d54:	6891      	ldr	r1, [r2, #8]
     d56:	4b06      	ldr	r3, [pc, #24]	; (d70 <system_clock_source_enable+0x84>)
     d58:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     d5a:	6851      	ldr	r1, [r2, #4]
     d5c:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     d5e:	6812      	ldr	r2, [r2, #0]
     d60:	b292      	uxth	r2, r2
     d62:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
     d64:	2000      	movs	r0, #0
     d66:	e000      	b.n	d6a <system_clock_source_enable+0x7e>
		return STATUS_OK;
     d68:	2000      	movs	r0, #0
}
     d6a:	4770      	bx	lr
     d6c:	00001568 	.word	0x00001568
     d70:	40000800 	.word	0x40000800
     d74:	20000078 	.word	0x20000078
     d78:	0000ff7f 	.word	0x0000ff7f

00000d7c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     d7c:	b530      	push	{r4, r5, lr}
     d7e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d80:	22c2      	movs	r2, #194	; 0xc2
     d82:	00d2      	lsls	r2, r2, #3
     d84:	4b1a      	ldr	r3, [pc, #104]	; (df0 <system_clock_init+0x74>)
     d86:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     d88:	4a1a      	ldr	r2, [pc, #104]	; (df4 <system_clock_init+0x78>)
     d8a:	6853      	ldr	r3, [r2, #4]
     d8c:	211e      	movs	r1, #30
     d8e:	438b      	bics	r3, r1
     d90:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     d92:	2301      	movs	r3, #1
     d94:	466a      	mov	r2, sp
     d96:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d98:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     d9a:	4d17      	ldr	r5, [pc, #92]	; (df8 <system_clock_init+0x7c>)
     d9c:	b2e0      	uxtb	r0, r4
     d9e:	4669      	mov	r1, sp
     da0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     da2:	3401      	adds	r4, #1
     da4:	2c1c      	cmp	r4, #28
     da6:	d1f9      	bne.n	d9c <system_clock_init+0x20>
	config->run_in_standby  = false;
     da8:	a803      	add	r0, sp, #12
     daa:	2400      	movs	r4, #0
     dac:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     dae:	2501      	movs	r5, #1
     db0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     db2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     db4:	4b11      	ldr	r3, [pc, #68]	; (dfc <system_clock_init+0x80>)
     db6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     db8:	2006      	movs	r0, #6
     dba:	4b11      	ldr	r3, [pc, #68]	; (e00 <system_clock_init+0x84>)
     dbc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     dbe:	4b11      	ldr	r3, [pc, #68]	; (e04 <system_clock_init+0x88>)
     dc0:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     dc2:	4b11      	ldr	r3, [pc, #68]	; (e08 <system_clock_init+0x8c>)
     dc4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     dc6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     dc8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     dca:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     dcc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     dce:	466b      	mov	r3, sp
     dd0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     dd2:	2306      	movs	r3, #6
     dd4:	466a      	mov	r2, sp
     dd6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     dd8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     dda:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     ddc:	4669      	mov	r1, sp
     dde:	2000      	movs	r0, #0
     de0:	4b0a      	ldr	r3, [pc, #40]	; (e0c <system_clock_init+0x90>)
     de2:	4798      	blx	r3
     de4:	2000      	movs	r0, #0
     de6:	4b0a      	ldr	r3, [pc, #40]	; (e10 <system_clock_init+0x94>)
     de8:	4798      	blx	r3
#endif
}
     dea:	b005      	add	sp, #20
     dec:	bd30      	pop	{r4, r5, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	40000800 	.word	0x40000800
     df4:	41004000 	.word	0x41004000
     df8:	0000104d 	.word	0x0000104d
     dfc:	00000cb1 	.word	0x00000cb1
     e00:	00000ced 	.word	0x00000ced
     e04:	00000e15 	.word	0x00000e15
     e08:	40000400 	.word	0x40000400
     e0c:	00000e39 	.word	0x00000e39
     e10:	00000ef1 	.word	0x00000ef1

00000e14 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     e14:	4a06      	ldr	r2, [pc, #24]	; (e30 <system_gclk_init+0x1c>)
     e16:	6993      	ldr	r3, [r2, #24]
     e18:	2108      	movs	r1, #8
     e1a:	430b      	orrs	r3, r1
     e1c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     e1e:	2201      	movs	r2, #1
     e20:	4b04      	ldr	r3, [pc, #16]	; (e34 <system_gclk_init+0x20>)
     e22:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     e24:	0019      	movs	r1, r3
     e26:	780b      	ldrb	r3, [r1, #0]
     e28:	4213      	tst	r3, r2
     e2a:	d1fc      	bne.n	e26 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     e2c:	4770      	bx	lr
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	40000400 	.word	0x40000400
     e34:	40000c00 	.word	0x40000c00

00000e38 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     e38:	b570      	push	{r4, r5, r6, lr}
     e3a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     e3c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e3e:	780d      	ldrb	r5, [r1, #0]
     e40:	022d      	lsls	r5, r5, #8
     e42:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     e44:	784b      	ldrb	r3, [r1, #1]
     e46:	2b00      	cmp	r3, #0
     e48:	d002      	beq.n	e50 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     e4a:	2380      	movs	r3, #128	; 0x80
     e4c:	02db      	lsls	r3, r3, #11
     e4e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     e50:	7a4b      	ldrb	r3, [r1, #9]
     e52:	2b00      	cmp	r3, #0
     e54:	d002      	beq.n	e5c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     e56:	2380      	movs	r3, #128	; 0x80
     e58:	031b      	lsls	r3, r3, #12
     e5a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     e5c:	6848      	ldr	r0, [r1, #4]
     e5e:	2801      	cmp	r0, #1
     e60:	d910      	bls.n	e84 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     e62:	1e43      	subs	r3, r0, #1
     e64:	4218      	tst	r0, r3
     e66:	d134      	bne.n	ed2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     e68:	2802      	cmp	r0, #2
     e6a:	d930      	bls.n	ece <system_gclk_gen_set_config+0x96>
     e6c:	2302      	movs	r3, #2
     e6e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     e70:	3201      	adds	r2, #1
						mask <<= 1) {
     e72:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     e74:	4298      	cmp	r0, r3
     e76:	d8fb      	bhi.n	e70 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     e78:	0212      	lsls	r2, r2, #8
     e7a:	4332      	orrs	r2, r6
     e7c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e7e:	2380      	movs	r3, #128	; 0x80
     e80:	035b      	lsls	r3, r3, #13
     e82:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     e84:	7a0b      	ldrb	r3, [r1, #8]
     e86:	2b00      	cmp	r3, #0
     e88:	d002      	beq.n	e90 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     e8a:	2380      	movs	r3, #128	; 0x80
     e8c:	039b      	lsls	r3, r3, #14
     e8e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e90:	4a13      	ldr	r2, [pc, #76]	; (ee0 <system_gclk_gen_set_config+0xa8>)
     e92:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     e94:	b25b      	sxtb	r3, r3
     e96:	2b00      	cmp	r3, #0
     e98:	dbfb      	blt.n	e92 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e9a:	4b12      	ldr	r3, [pc, #72]	; (ee4 <system_gclk_gen_set_config+0xac>)
     e9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e9e:	4b12      	ldr	r3, [pc, #72]	; (ee8 <system_gclk_gen_set_config+0xb0>)
     ea0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ea2:	4a0f      	ldr	r2, [pc, #60]	; (ee0 <system_gclk_gen_set_config+0xa8>)
     ea4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     ea6:	b25b      	sxtb	r3, r3
     ea8:	2b00      	cmp	r3, #0
     eaa:	dbfb      	blt.n	ea4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     eac:	4b0c      	ldr	r3, [pc, #48]	; (ee0 <system_gclk_gen_set_config+0xa8>)
     eae:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     eb0:	001a      	movs	r2, r3
     eb2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     eb4:	b25b      	sxtb	r3, r3
     eb6:	2b00      	cmp	r3, #0
     eb8:	dbfb      	blt.n	eb2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     eba:	4a09      	ldr	r2, [pc, #36]	; (ee0 <system_gclk_gen_set_config+0xa8>)
     ebc:	6853      	ldr	r3, [r2, #4]
     ebe:	2180      	movs	r1, #128	; 0x80
     ec0:	0249      	lsls	r1, r1, #9
     ec2:	400b      	ands	r3, r1
     ec4:	431d      	orrs	r5, r3
     ec6:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ec8:	4b08      	ldr	r3, [pc, #32]	; (eec <system_gclk_gen_set_config+0xb4>)
     eca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ecc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     ece:	2200      	movs	r2, #0
     ed0:	e7d2      	b.n	e78 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     ed2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     ed4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     ed6:	2380      	movs	r3, #128	; 0x80
     ed8:	029b      	lsls	r3, r3, #10
     eda:	431d      	orrs	r5, r3
     edc:	e7d2      	b.n	e84 <system_gclk_gen_set_config+0x4c>
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	40000c00 	.word	0x40000c00
     ee4:	00000b69 	.word	0x00000b69
     ee8:	40000c08 	.word	0x40000c08
     eec:	00000ba9 	.word	0x00000ba9

00000ef0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     ef0:	b510      	push	{r4, lr}
     ef2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ef4:	4a0b      	ldr	r2, [pc, #44]	; (f24 <system_gclk_gen_enable+0x34>)
     ef6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ef8:	b25b      	sxtb	r3, r3
     efa:	2b00      	cmp	r3, #0
     efc:	dbfb      	blt.n	ef6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     efe:	4b0a      	ldr	r3, [pc, #40]	; (f28 <system_gclk_gen_enable+0x38>)
     f00:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f02:	4b0a      	ldr	r3, [pc, #40]	; (f2c <system_gclk_gen_enable+0x3c>)
     f04:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f06:	4a07      	ldr	r2, [pc, #28]	; (f24 <system_gclk_gen_enable+0x34>)
     f08:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f0a:	b25b      	sxtb	r3, r3
     f0c:	2b00      	cmp	r3, #0
     f0e:	dbfb      	blt.n	f08 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f10:	4a04      	ldr	r2, [pc, #16]	; (f24 <system_gclk_gen_enable+0x34>)
     f12:	6851      	ldr	r1, [r2, #4]
     f14:	2380      	movs	r3, #128	; 0x80
     f16:	025b      	lsls	r3, r3, #9
     f18:	430b      	orrs	r3, r1
     f1a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     f1c:	4b04      	ldr	r3, [pc, #16]	; (f30 <system_gclk_gen_enable+0x40>)
     f1e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f20:	bd10      	pop	{r4, pc}
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	40000c00 	.word	0x40000c00
     f28:	00000b69 	.word	0x00000b69
     f2c:	40000c04 	.word	0x40000c04
     f30:	00000ba9 	.word	0x00000ba9

00000f34 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f38:	4a1a      	ldr	r2, [pc, #104]	; (fa4 <system_gclk_gen_get_hz+0x70>)
     f3a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f3c:	b25b      	sxtb	r3, r3
     f3e:	2b00      	cmp	r3, #0
     f40:	dbfb      	blt.n	f3a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     f42:	4b19      	ldr	r3, [pc, #100]	; (fa8 <system_gclk_gen_get_hz+0x74>)
     f44:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f46:	4b19      	ldr	r3, [pc, #100]	; (fac <system_gclk_gen_get_hz+0x78>)
     f48:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f4a:	4a16      	ldr	r2, [pc, #88]	; (fa4 <system_gclk_gen_get_hz+0x70>)
     f4c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f4e:	b25b      	sxtb	r3, r3
     f50:	2b00      	cmp	r3, #0
     f52:	dbfb      	blt.n	f4c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     f54:	4e13      	ldr	r6, [pc, #76]	; (fa4 <system_gclk_gen_get_hz+0x70>)
     f56:	6870      	ldr	r0, [r6, #4]
     f58:	04c0      	lsls	r0, r0, #19
     f5a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     f5c:	4b14      	ldr	r3, [pc, #80]	; (fb0 <system_gclk_gen_get_hz+0x7c>)
     f5e:	4798      	blx	r3
     f60:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f62:	4b12      	ldr	r3, [pc, #72]	; (fac <system_gclk_gen_get_hz+0x78>)
     f64:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     f66:	6876      	ldr	r6, [r6, #4]
     f68:	02f6      	lsls	r6, r6, #11
     f6a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f6c:	4b11      	ldr	r3, [pc, #68]	; (fb4 <system_gclk_gen_get_hz+0x80>)
     f6e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f70:	4a0c      	ldr	r2, [pc, #48]	; (fa4 <system_gclk_gen_get_hz+0x70>)
     f72:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f74:	b25b      	sxtb	r3, r3
     f76:	2b00      	cmp	r3, #0
     f78:	dbfb      	blt.n	f72 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f7a:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <system_gclk_gen_get_hz+0x70>)
     f7c:	689c      	ldr	r4, [r3, #8]
     f7e:	0224      	lsls	r4, r4, #8
     f80:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     f82:	4b0d      	ldr	r3, [pc, #52]	; (fb8 <system_gclk_gen_get_hz+0x84>)
     f84:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     f86:	2e00      	cmp	r6, #0
     f88:	d107      	bne.n	f9a <system_gclk_gen_get_hz+0x66>
     f8a:	2c01      	cmp	r4, #1
     f8c:	d907      	bls.n	f9e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     f8e:	0021      	movs	r1, r4
     f90:	0028      	movs	r0, r5
     f92:	4b0a      	ldr	r3, [pc, #40]	; (fbc <system_gclk_gen_get_hz+0x88>)
     f94:	4798      	blx	r3
     f96:	0005      	movs	r5, r0
     f98:	e001      	b.n	f9e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     f9a:	3401      	adds	r4, #1
     f9c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     f9e:	0028      	movs	r0, r5
     fa0:	bd70      	pop	{r4, r5, r6, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	40000c00 	.word	0x40000c00
     fa8:	00000b69 	.word	0x00000b69
     fac:	40000c04 	.word	0x40000c04
     fb0:	00000c35 	.word	0x00000c35
     fb4:	40000c08 	.word	0x40000c08
     fb8:	00000ba9 	.word	0x00000ba9
     fbc:	000013ad 	.word	0x000013ad

00000fc0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     fc0:	b510      	push	{r4, lr}
     fc2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     fc4:	4b06      	ldr	r3, [pc, #24]	; (fe0 <system_gclk_chan_enable+0x20>)
     fc6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fc8:	4b06      	ldr	r3, [pc, #24]	; (fe4 <system_gclk_chan_enable+0x24>)
     fca:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     fcc:	4a06      	ldr	r2, [pc, #24]	; (fe8 <system_gclk_chan_enable+0x28>)
     fce:	8853      	ldrh	r3, [r2, #2]
     fd0:	2180      	movs	r1, #128	; 0x80
     fd2:	01c9      	lsls	r1, r1, #7
     fd4:	430b      	orrs	r3, r1
     fd6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     fd8:	4b04      	ldr	r3, [pc, #16]	; (fec <system_gclk_chan_enable+0x2c>)
     fda:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fdc:	bd10      	pop	{r4, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	00000b69 	.word	0x00000b69
     fe4:	40000c02 	.word	0x40000c02
     fe8:	40000c00 	.word	0x40000c00
     fec:	00000ba9 	.word	0x00000ba9

00000ff0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     ff0:	b510      	push	{r4, lr}
     ff2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ff4:	4b0f      	ldr	r3, [pc, #60]	; (1034 <system_gclk_chan_disable+0x44>)
     ff6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     ff8:	4b0f      	ldr	r3, [pc, #60]	; (1038 <system_gclk_chan_disable+0x48>)
     ffa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     ffc:	4a0f      	ldr	r2, [pc, #60]	; (103c <system_gclk_chan_disable+0x4c>)
     ffe:	8853      	ldrh	r3, [r2, #2]
    1000:	051b      	lsls	r3, r3, #20
    1002:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1004:	8853      	ldrh	r3, [r2, #2]
    1006:	490e      	ldr	r1, [pc, #56]	; (1040 <system_gclk_chan_disable+0x50>)
    1008:	400b      	ands	r3, r1
    100a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    100c:	8853      	ldrh	r3, [r2, #2]
    100e:	490d      	ldr	r1, [pc, #52]	; (1044 <system_gclk_chan_disable+0x54>)
    1010:	400b      	ands	r3, r1
    1012:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1014:	0011      	movs	r1, r2
    1016:	2280      	movs	r2, #128	; 0x80
    1018:	01d2      	lsls	r2, r2, #7
    101a:	884b      	ldrh	r3, [r1, #2]
    101c:	4213      	tst	r3, r2
    101e:	d1fc      	bne.n	101a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1020:	4906      	ldr	r1, [pc, #24]	; (103c <system_gclk_chan_disable+0x4c>)
    1022:	884a      	ldrh	r2, [r1, #2]
    1024:	0203      	lsls	r3, r0, #8
    1026:	4806      	ldr	r0, [pc, #24]	; (1040 <system_gclk_chan_disable+0x50>)
    1028:	4002      	ands	r2, r0
    102a:	4313      	orrs	r3, r2
    102c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    102e:	4b06      	ldr	r3, [pc, #24]	; (1048 <system_gclk_chan_disable+0x58>)
    1030:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1032:	bd10      	pop	{r4, pc}
    1034:	00000b69 	.word	0x00000b69
    1038:	40000c02 	.word	0x40000c02
    103c:	40000c00 	.word	0x40000c00
    1040:	fffff0ff 	.word	0xfffff0ff
    1044:	ffffbfff 	.word	0xffffbfff
    1048:	00000ba9 	.word	0x00000ba9

0000104c <system_gclk_chan_set_config>:
{
    104c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    104e:	780c      	ldrb	r4, [r1, #0]
    1050:	0224      	lsls	r4, r4, #8
    1052:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1054:	4b02      	ldr	r3, [pc, #8]	; (1060 <system_gclk_chan_set_config+0x14>)
    1056:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1058:	b2a4      	uxth	r4, r4
    105a:	4b02      	ldr	r3, [pc, #8]	; (1064 <system_gclk_chan_set_config+0x18>)
    105c:	805c      	strh	r4, [r3, #2]
}
    105e:	bd10      	pop	{r4, pc}
    1060:	00000ff1 	.word	0x00000ff1
    1064:	40000c00 	.word	0x40000c00

00001068 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1068:	b510      	push	{r4, lr}
    106a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    106c:	4b06      	ldr	r3, [pc, #24]	; (1088 <system_gclk_chan_get_hz+0x20>)
    106e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1070:	4b06      	ldr	r3, [pc, #24]	; (108c <system_gclk_chan_get_hz+0x24>)
    1072:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1074:	4b06      	ldr	r3, [pc, #24]	; (1090 <system_gclk_chan_get_hz+0x28>)
    1076:	885c      	ldrh	r4, [r3, #2]
    1078:	0524      	lsls	r4, r4, #20
    107a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    107c:	4b05      	ldr	r3, [pc, #20]	; (1094 <system_gclk_chan_get_hz+0x2c>)
    107e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1080:	0020      	movs	r0, r4
    1082:	4b05      	ldr	r3, [pc, #20]	; (1098 <system_gclk_chan_get_hz+0x30>)
    1084:	4798      	blx	r3
}
    1086:	bd10      	pop	{r4, pc}
    1088:	00000b69 	.word	0x00000b69
    108c:	40000c02 	.word	0x40000c02
    1090:	40000c00 	.word	0x40000c00
    1094:	00000ba9 	.word	0x00000ba9
    1098:	00000f35 	.word	0x00000f35

0000109c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    109c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    109e:	78d3      	ldrb	r3, [r2, #3]
    10a0:	2b00      	cmp	r3, #0
    10a2:	d135      	bne.n	1110 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    10a4:	7813      	ldrb	r3, [r2, #0]
    10a6:	2b80      	cmp	r3, #128	; 0x80
    10a8:	d029      	beq.n	10fe <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    10aa:	061b      	lsls	r3, r3, #24
    10ac:	2480      	movs	r4, #128	; 0x80
    10ae:	0264      	lsls	r4, r4, #9
    10b0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    10b2:	7854      	ldrb	r4, [r2, #1]
    10b4:	2502      	movs	r5, #2
    10b6:	43ac      	bics	r4, r5
    10b8:	d106      	bne.n	10c8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    10ba:	7894      	ldrb	r4, [r2, #2]
    10bc:	2c00      	cmp	r4, #0
    10be:	d120      	bne.n	1102 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    10c0:	2480      	movs	r4, #128	; 0x80
    10c2:	02a4      	lsls	r4, r4, #10
    10c4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    10c6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10c8:	7854      	ldrb	r4, [r2, #1]
    10ca:	3c01      	subs	r4, #1
    10cc:	2c01      	cmp	r4, #1
    10ce:	d91c      	bls.n	110a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    10d0:	040d      	lsls	r5, r1, #16
    10d2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10d4:	24a0      	movs	r4, #160	; 0xa0
    10d6:	05e4      	lsls	r4, r4, #23
    10d8:	432c      	orrs	r4, r5
    10da:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10dc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    10de:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    10e0:	24d0      	movs	r4, #208	; 0xd0
    10e2:	0624      	lsls	r4, r4, #24
    10e4:	432c      	orrs	r4, r5
    10e6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10e8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    10ea:	78d4      	ldrb	r4, [r2, #3]
    10ec:	2c00      	cmp	r4, #0
    10ee:	d122      	bne.n	1136 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    10f0:	035b      	lsls	r3, r3, #13
    10f2:	d51c      	bpl.n	112e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    10f4:	7893      	ldrb	r3, [r2, #2]
    10f6:	2b01      	cmp	r3, #1
    10f8:	d01e      	beq.n	1138 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    10fa:	6141      	str	r1, [r0, #20]
    10fc:	e017      	b.n	112e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    10fe:	2300      	movs	r3, #0
    1100:	e7d7      	b.n	10b2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1102:	24c0      	movs	r4, #192	; 0xc0
    1104:	02e4      	lsls	r4, r4, #11
    1106:	4323      	orrs	r3, r4
    1108:	e7dd      	b.n	10c6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    110a:	4c0d      	ldr	r4, [pc, #52]	; (1140 <_system_pinmux_config+0xa4>)
    110c:	4023      	ands	r3, r4
    110e:	e7df      	b.n	10d0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1110:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1112:	040c      	lsls	r4, r1, #16
    1114:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1116:	23a0      	movs	r3, #160	; 0xa0
    1118:	05db      	lsls	r3, r3, #23
    111a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    111c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    111e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1120:	23d0      	movs	r3, #208	; 0xd0
    1122:	061b      	lsls	r3, r3, #24
    1124:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1126:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1128:	78d3      	ldrb	r3, [r2, #3]
    112a:	2b00      	cmp	r3, #0
    112c:	d103      	bne.n	1136 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    112e:	7853      	ldrb	r3, [r2, #1]
    1130:	3b01      	subs	r3, #1
    1132:	2b01      	cmp	r3, #1
    1134:	d902      	bls.n	113c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1136:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1138:	6181      	str	r1, [r0, #24]
    113a:	e7f8      	b.n	112e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    113c:	6081      	str	r1, [r0, #8]
}
    113e:	e7fa      	b.n	1136 <_system_pinmux_config+0x9a>
    1140:	fffbffff 	.word	0xfffbffff

00001144 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1144:	b510      	push	{r4, lr}
    1146:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1148:	09c1      	lsrs	r1, r0, #7
		return NULL;
    114a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    114c:	2900      	cmp	r1, #0
    114e:	d104      	bne.n	115a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1150:	0943      	lsrs	r3, r0, #5
    1152:	01db      	lsls	r3, r3, #7
    1154:	4905      	ldr	r1, [pc, #20]	; (116c <system_pinmux_pin_set_config+0x28>)
    1156:	468c      	mov	ip, r1
    1158:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    115a:	241f      	movs	r4, #31
    115c:	4020      	ands	r0, r4
    115e:	2101      	movs	r1, #1
    1160:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1162:	0018      	movs	r0, r3
    1164:	4b02      	ldr	r3, [pc, #8]	; (1170 <system_pinmux_pin_set_config+0x2c>)
    1166:	4798      	blx	r3
}
    1168:	bd10      	pop	{r4, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	41004400 	.word	0x41004400
    1170:	0000109d 	.word	0x0000109d

00001174 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1174:	4770      	bx	lr
	...

00001178 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1178:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <system_init+0x18>)
    117c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    117e:	4b05      	ldr	r3, [pc, #20]	; (1194 <system_init+0x1c>)
    1180:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1182:	4b05      	ldr	r3, [pc, #20]	; (1198 <system_init+0x20>)
    1184:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1186:	4b05      	ldr	r3, [pc, #20]	; (119c <system_init+0x24>)
    1188:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    118a:	4b05      	ldr	r3, [pc, #20]	; (11a0 <system_init+0x28>)
    118c:	4798      	blx	r3
}
    118e:	bd10      	pop	{r4, pc}
    1190:	00000d7d 	.word	0x00000d7d
    1194:	00000bd9 	.word	0x00000bd9
    1198:	00001175 	.word	0x00001175
    119c:	00001175 	.word	0x00001175
    11a0:	00001175 	.word	0x00001175

000011a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    11a4:	e7fe      	b.n	11a4 <Dummy_Handler>
	...

000011a8 <Reset_Handler>:
{
    11a8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    11aa:	4a1a      	ldr	r2, [pc, #104]	; (1214 <Reset_Handler+0x6c>)
    11ac:	4b1a      	ldr	r3, [pc, #104]	; (1218 <Reset_Handler+0x70>)
    11ae:	429a      	cmp	r2, r3
    11b0:	d011      	beq.n	11d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    11b2:	001a      	movs	r2, r3
    11b4:	4b19      	ldr	r3, [pc, #100]	; (121c <Reset_Handler+0x74>)
    11b6:	429a      	cmp	r2, r3
    11b8:	d20d      	bcs.n	11d6 <Reset_Handler+0x2e>
    11ba:	4a19      	ldr	r2, [pc, #100]	; (1220 <Reset_Handler+0x78>)
    11bc:	3303      	adds	r3, #3
    11be:	1a9b      	subs	r3, r3, r2
    11c0:	089b      	lsrs	r3, r3, #2
    11c2:	3301      	adds	r3, #1
    11c4:	009b      	lsls	r3, r3, #2
    11c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    11c8:	4813      	ldr	r0, [pc, #76]	; (1218 <Reset_Handler+0x70>)
    11ca:	4912      	ldr	r1, [pc, #72]	; (1214 <Reset_Handler+0x6c>)
    11cc:	588c      	ldr	r4, [r1, r2]
    11ce:	5084      	str	r4, [r0, r2]
    11d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    11d2:	429a      	cmp	r2, r3
    11d4:	d1fa      	bne.n	11cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    11d6:	4a13      	ldr	r2, [pc, #76]	; (1224 <Reset_Handler+0x7c>)
    11d8:	4b13      	ldr	r3, [pc, #76]	; (1228 <Reset_Handler+0x80>)
    11da:	429a      	cmp	r2, r3
    11dc:	d20a      	bcs.n	11f4 <Reset_Handler+0x4c>
    11de:	43d3      	mvns	r3, r2
    11e0:	4911      	ldr	r1, [pc, #68]	; (1228 <Reset_Handler+0x80>)
    11e2:	185b      	adds	r3, r3, r1
    11e4:	2103      	movs	r1, #3
    11e6:	438b      	bics	r3, r1
    11e8:	3304      	adds	r3, #4
    11ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    11ec:	2100      	movs	r1, #0
    11ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    11f0:	4293      	cmp	r3, r2
    11f2:	d1fc      	bne.n	11ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    11f4:	4a0d      	ldr	r2, [pc, #52]	; (122c <Reset_Handler+0x84>)
    11f6:	21ff      	movs	r1, #255	; 0xff
    11f8:	4b0d      	ldr	r3, [pc, #52]	; (1230 <Reset_Handler+0x88>)
    11fa:	438b      	bics	r3, r1
    11fc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    11fe:	4a0d      	ldr	r2, [pc, #52]	; (1234 <Reset_Handler+0x8c>)
    1200:	6853      	ldr	r3, [r2, #4]
    1202:	397f      	subs	r1, #127	; 0x7f
    1204:	430b      	orrs	r3, r1
    1206:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1208:	4b0b      	ldr	r3, [pc, #44]	; (1238 <Reset_Handler+0x90>)
    120a:	4798      	blx	r3
        main();
    120c:	4b0b      	ldr	r3, [pc, #44]	; (123c <Reset_Handler+0x94>)
    120e:	4798      	blx	r3
    1210:	e7fe      	b.n	1210 <Reset_Handler+0x68>
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	000015a8 	.word	0x000015a8
    1218:	20000000 	.word	0x20000000
    121c:	2000000c 	.word	0x2000000c
    1220:	20000004 	.word	0x20000004
    1224:	2000000c 	.word	0x2000000c
    1228:	20000098 	.word	0x20000098
    122c:	e000ed00 	.word	0xe000ed00
    1230:	00000000 	.word	0x00000000
    1234:	41004000 	.word	0x41004000
    1238:	000014c5 	.word	0x000014c5
    123c:	00001241 	.word	0x00001241

00001240 <main>:
	port_pin_set_config(MOTOR_CONTROLLER_STP_PIN, &config_port_pin);
}


int main (void)
{
    1240:	b5f0      	push	{r4, r5, r6, r7, lr}
    1242:	b08f      	sub	sp, #60	; 0x3c
	system_init();
    1244:	4b48      	ldr	r3, [pc, #288]	; (1368 <main+0x128>)
    1246:	4798      	blx	r3
	delay_init();
    1248:	4b48      	ldr	r3, [pc, #288]	; (136c <main+0x12c>)
    124a:	4798      	blx	r3
	slave->ss_pin          = config->ss_pin;
    124c:	4c48      	ldr	r4, [pc, #288]	; (1370 <main+0x130>)
    124e:	2326      	movs	r3, #38	; 0x26
    1250:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1252:	2300      	movs	r3, #0
    1254:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1256:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1258:	a901      	add	r1, sp, #4
    125a:	2201      	movs	r2, #1
    125c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    125e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1260:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1262:	2026      	movs	r0, #38	; 0x26
    1264:	4b43      	ldr	r3, [pc, #268]	; (1374 <main+0x134>)
    1266:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1268:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);
    126a:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    126c:	09d0      	lsrs	r0, r2, #7
		return NULL;
    126e:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
    1270:	2800      	cmp	r0, #0
    1272:	d102      	bne.n	127a <main+0x3a>
		return &(ports[port_index]->Group[group_index]);
    1274:	01db      	lsls	r3, r3, #7
    1276:	4940      	ldr	r1, [pc, #256]	; (1378 <main+0x138>)
    1278:	1859      	adds	r1, r3, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    127a:	231f      	movs	r3, #31
    127c:	4013      	ands	r3, r2
    127e:	2201      	movs	r2, #1
    1280:	0010      	movs	r0, r2
    1282:	4098      	lsls	r0, r3
		port_base->OUTSET.reg = pin_mask;
    1284:	6188      	str	r0, [r1, #24]
	config->mode             = SPI_MODE_MASTER;
    1286:	ac01      	add	r4, sp, #4
    1288:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    128a:	2300      	movs	r3, #0
    128c:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    128e:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1290:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1292:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1294:	74a2      	strb	r2, [r4, #18]
	config->generator_source = GCLK_GENERATOR_0;
    1296:	321f      	adds	r2, #31
    1298:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    129a:	3a14      	subs	r2, #20
    129c:	2100      	movs	r1, #0
    129e:	a806      	add	r0, sp, #24
    12a0:	4b36      	ldr	r3, [pc, #216]	; (137c <main+0x13c>)
    12a2:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    12a4:	4b36      	ldr	r3, [pc, #216]	; (1380 <main+0x140>)
    12a6:	6163      	str	r3, [r4, #20]
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    12a8:	2380      	movs	r3, #128	; 0x80
    12aa:	025b      	lsls	r3, r3, #9
    12ac:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
    12ae:	4b35      	ldr	r3, [pc, #212]	; (1384 <main+0x144>)
    12b0:	6263      	str	r3, [r4, #36]	; 0x24
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    12b2:	2301      	movs	r3, #1
    12b4:	425b      	negs	r3, r3
    12b6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
    12b8:	4b33      	ldr	r3, [pc, #204]	; (1388 <main+0x148>)
    12ba:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
    12bc:	4b33      	ldr	r3, [pc, #204]	; (138c <main+0x14c>)
    12be:	6323      	str	r3, [r4, #48]	; 0x30
	spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
    12c0:	4d33      	ldr	r5, [pc, #204]	; (1390 <main+0x150>)
    12c2:	0022      	movs	r2, r4
    12c4:	4933      	ldr	r1, [pc, #204]	; (1394 <main+0x154>)
    12c6:	0028      	movs	r0, r5
    12c8:	4b33      	ldr	r3, [pc, #204]	; (1398 <main+0x158>)
    12ca:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    12cc:	682b      	ldr	r3, [r5, #0]
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    12ce:	8a1a      	ldrh	r2, [r3, #16]
	while (spi_is_syncing(module)) {
    12d0:	b212      	sxth	r2, r2
    12d2:	2a00      	cmp	r2, #0
    12d4:	dbfb      	blt.n	12ce <main+0x8e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    12d6:	681a      	ldr	r2, [r3, #0]
    12d8:	2502      	movs	r5, #2
    12da:	432a      	orrs	r2, r5
    12dc:	601a      	str	r2, [r3, #0]
	stepper_motor_config.direction_set = DRV_DIRPIN;
    12de:	ac01      	add	r4, sp, #4
    12e0:	2300      	movs	r3, #0
    12e2:	70a3      	strb	r3, [r4, #2]
	stepper_motor_config.step_mode = DRV_MODE_1_4;
    12e4:	2010      	movs	r0, #16
    12e6:	70e0      	strb	r0, [r4, #3]
	stepper_motor_config.stall_detect = DRV_EXSTALL_INTERNAL;
    12e8:	7123      	strb	r3, [r4, #4]
	stepper_motor_config.isense_gain = DRV_ISGAIN_40;
    12ea:	22c0      	movs	r2, #192	; 0xc0
    12ec:	0092      	lsls	r2, r2, #2
    12ee:	80e2      	strh	r2, [r4, #6]
	stepper_motor_config.dead_time_insert = DRV_DTIME_850ns; //Check if change is needed
    12f0:	22c0      	movs	r2, #192	; 0xc0
    12f2:	0112      	lsls	r2, r2, #4
    12f4:	8122      	strh	r2, [r4, #8]
	stepper_motor_config.drv_torque = 0x96;
    12f6:	2296      	movs	r2, #150	; 0x96
    12f8:	72a2      	strb	r2, [r4, #10]
	stepper_motor_config.backemf_sample_th = DRV_SMPLTH_200us; //Check if change is needed
    12fa:	326b      	adds	r2, #107	; 0x6b
    12fc:	32ff      	adds	r2, #255	; 0xff
    12fe:	81a2      	strh	r2, [r4, #12]
	stepper_motor_config.drv_toff = 0x30; // Check if change is needed
    1300:	2130      	movs	r1, #48	; 0x30
    1302:	73a1      	strb	r1, [r4, #14]
	stepper_motor_config.pwm_mode = DRV_PWMMODE_INTERNAL;
    1304:	2700      	movs	r7, #0
    1306:	8223      	strh	r3, [r4, #16]
	stepper_motor_config.drv_tblank = 0x80; //Check if change is needed
    1308:	3150      	adds	r1, #80	; 0x50
    130a:	74a1      	strb	r1, [r4, #18]
	stepper_motor_config.adaptive_blanking_time= DRV_ABT_DISABLE;
    130c:	82a3      	strh	r3, [r4, #20]
	stepper_motor_config.drv_tdecay = 0x10; //Check if check is needed
    130e:	75a0      	strb	r0, [r4, #22]
	stepper_motor_config.decay_mode = DRV_DECMOD_FORCE_SLOWINC_FASTDEC; //Check if change is needed
    1310:	2601      	movs	r6, #1
    1312:	75e6      	strb	r6, [r4, #23]
	stepper_motor_config.ocp_threshold = DRV_OCPTH_250mV;
    1314:	77a7      	strb	r7, [r4, #30]
	stepper_motor_config.ocp_deglitch_time = DRV_OCPDEG_4us;
    1316:	3808      	subs	r0, #8
    1318:	77e0      	strb	r0, [r4, #31]
	stepper_motor_config.ls_drive_time = DRV_TDRIVEN_1us;
    131a:	3018      	adds	r0, #24
    131c:	5420      	strb	r0, [r4, r0]
	stepper_motor_config.hs_drive_time = DRV_TDRIVEP_1us;
    131e:	3001      	adds	r0, #1
    1320:	5421      	strb	r1, [r4, r0]
	stepper_motor_config.ls_current = DRV_IDRIVEN_100mA;
    1322:	8463      	strh	r3, [r4, #34]	; 0x22
	stepper_motor_config.hs_current = DRV_IDRIVEP_100mA;
    1324:	84a3      	strh	r3, [r4, #36]	; 0x24
	stepper_motor_config.drv_sdthr = 0x40; //Check if change is needed
    1326:	3940      	subs	r1, #64	; 0x40
    1328:	7621      	strb	r1, [r4, #24]
	stepper_motor_config.stall_count = DRV_SDCNT_4; //Check if change is needed
    132a:	8362      	strh	r2, [r4, #26]
	stepper_motor_config.back_emf_div = DRV_VDIV_32;
    132c:	83a3      	strh	r3, [r4, #28]
	drv_ctrl_init(&stepper_motor_config);
    132e:	0020      	movs	r0, r4
    1330:	4b1a      	ldr	r3, [pc, #104]	; (139c <main+0x15c>)
    1332:	4798      	blx	r3
	drv_ctrl_enable();
    1334:	4b1a      	ldr	r3, [pc, #104]	; (13a0 <main+0x160>)
    1336:	4798      	blx	r3
	config->powersave  = false;
    1338:	70a7      	strb	r7, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    133a:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    133c:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(MOTOR_CONTROLLER_DIR_PIN, &config_port_pin);
    133e:	0021      	movs	r1, r4
    1340:	2014      	movs	r0, #20
    1342:	4d0c      	ldr	r5, [pc, #48]	; (1374 <main+0x134>)
    1344:	47a8      	blx	r5
	port_pin_set_config(MOTOR_CONTROLLER_STP_PIN, &config_port_pin);
    1346:	0021      	movs	r1, r4
    1348:	2015      	movs	r0, #21
    134a:	47a8      	blx	r5
	configure_stepper_motor();
	configure_port_pins();
	
	while (1) {
		
		drv_ctrl_moveto(10);
    134c:	4e15      	ldr	r6, [pc, #84]	; (13a4 <main+0x164>)
		delay_ms(2000);
    134e:	25fa      	movs	r5, #250	; 0xfa
    1350:	00ed      	lsls	r5, r5, #3
    1352:	4c15      	ldr	r4, [pc, #84]	; (13a8 <main+0x168>)
		drv_ctrl_moveto(10);
    1354:	200a      	movs	r0, #10
    1356:	47b0      	blx	r6
		delay_ms(2000);
    1358:	0028      	movs	r0, r5
    135a:	47a0      	blx	r4
		drv_ctrl_moveto(0);
    135c:	2000      	movs	r0, #0
    135e:	47b0      	blx	r6
		delay_ms(2000);
    1360:	0028      	movs	r0, r5
    1362:	47a0      	blx	r4
    1364:	e7f6      	b.n	1354 <main+0x114>
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	00001179 	.word	0x00001179
    136c:	00000105 	.word	0x00000105
    1370:	2000008c 	.word	0x2000008c
    1374:	00000c11 	.word	0x00000c11
    1378:	41004400 	.word	0x41004400
    137c:	0000151f 	.word	0x0000151f
    1380:	000186a0 	.word	0x000186a0
    1384:	00040003 	.word	0x00040003
    1388:	00060003 	.word	0x00060003
    138c:	00070003 	.word	0x00070003
    1390:	20000090 	.word	0x20000090
    1394:	42000800 	.word	0x42000800
    1398:	000003f5 	.word	0x000003f5
    139c:	00000a59 	.word	0x00000a59
    13a0:	00000ad1 	.word	0x00000ad1
    13a4:	00000ae9 	.word	0x00000ae9
    13a8:	00000145 	.word	0x00000145

000013ac <__udivsi3>:
    13ac:	2200      	movs	r2, #0
    13ae:	0843      	lsrs	r3, r0, #1
    13b0:	428b      	cmp	r3, r1
    13b2:	d374      	bcc.n	149e <__udivsi3+0xf2>
    13b4:	0903      	lsrs	r3, r0, #4
    13b6:	428b      	cmp	r3, r1
    13b8:	d35f      	bcc.n	147a <__udivsi3+0xce>
    13ba:	0a03      	lsrs	r3, r0, #8
    13bc:	428b      	cmp	r3, r1
    13be:	d344      	bcc.n	144a <__udivsi3+0x9e>
    13c0:	0b03      	lsrs	r3, r0, #12
    13c2:	428b      	cmp	r3, r1
    13c4:	d328      	bcc.n	1418 <__udivsi3+0x6c>
    13c6:	0c03      	lsrs	r3, r0, #16
    13c8:	428b      	cmp	r3, r1
    13ca:	d30d      	bcc.n	13e8 <__udivsi3+0x3c>
    13cc:	22ff      	movs	r2, #255	; 0xff
    13ce:	0209      	lsls	r1, r1, #8
    13d0:	ba12      	rev	r2, r2
    13d2:	0c03      	lsrs	r3, r0, #16
    13d4:	428b      	cmp	r3, r1
    13d6:	d302      	bcc.n	13de <__udivsi3+0x32>
    13d8:	1212      	asrs	r2, r2, #8
    13da:	0209      	lsls	r1, r1, #8
    13dc:	d065      	beq.n	14aa <__udivsi3+0xfe>
    13de:	0b03      	lsrs	r3, r0, #12
    13e0:	428b      	cmp	r3, r1
    13e2:	d319      	bcc.n	1418 <__udivsi3+0x6c>
    13e4:	e000      	b.n	13e8 <__udivsi3+0x3c>
    13e6:	0a09      	lsrs	r1, r1, #8
    13e8:	0bc3      	lsrs	r3, r0, #15
    13ea:	428b      	cmp	r3, r1
    13ec:	d301      	bcc.n	13f2 <__udivsi3+0x46>
    13ee:	03cb      	lsls	r3, r1, #15
    13f0:	1ac0      	subs	r0, r0, r3
    13f2:	4152      	adcs	r2, r2
    13f4:	0b83      	lsrs	r3, r0, #14
    13f6:	428b      	cmp	r3, r1
    13f8:	d301      	bcc.n	13fe <__udivsi3+0x52>
    13fa:	038b      	lsls	r3, r1, #14
    13fc:	1ac0      	subs	r0, r0, r3
    13fe:	4152      	adcs	r2, r2
    1400:	0b43      	lsrs	r3, r0, #13
    1402:	428b      	cmp	r3, r1
    1404:	d301      	bcc.n	140a <__udivsi3+0x5e>
    1406:	034b      	lsls	r3, r1, #13
    1408:	1ac0      	subs	r0, r0, r3
    140a:	4152      	adcs	r2, r2
    140c:	0b03      	lsrs	r3, r0, #12
    140e:	428b      	cmp	r3, r1
    1410:	d301      	bcc.n	1416 <__udivsi3+0x6a>
    1412:	030b      	lsls	r3, r1, #12
    1414:	1ac0      	subs	r0, r0, r3
    1416:	4152      	adcs	r2, r2
    1418:	0ac3      	lsrs	r3, r0, #11
    141a:	428b      	cmp	r3, r1
    141c:	d301      	bcc.n	1422 <__udivsi3+0x76>
    141e:	02cb      	lsls	r3, r1, #11
    1420:	1ac0      	subs	r0, r0, r3
    1422:	4152      	adcs	r2, r2
    1424:	0a83      	lsrs	r3, r0, #10
    1426:	428b      	cmp	r3, r1
    1428:	d301      	bcc.n	142e <__udivsi3+0x82>
    142a:	028b      	lsls	r3, r1, #10
    142c:	1ac0      	subs	r0, r0, r3
    142e:	4152      	adcs	r2, r2
    1430:	0a43      	lsrs	r3, r0, #9
    1432:	428b      	cmp	r3, r1
    1434:	d301      	bcc.n	143a <__udivsi3+0x8e>
    1436:	024b      	lsls	r3, r1, #9
    1438:	1ac0      	subs	r0, r0, r3
    143a:	4152      	adcs	r2, r2
    143c:	0a03      	lsrs	r3, r0, #8
    143e:	428b      	cmp	r3, r1
    1440:	d301      	bcc.n	1446 <__udivsi3+0x9a>
    1442:	020b      	lsls	r3, r1, #8
    1444:	1ac0      	subs	r0, r0, r3
    1446:	4152      	adcs	r2, r2
    1448:	d2cd      	bcs.n	13e6 <__udivsi3+0x3a>
    144a:	09c3      	lsrs	r3, r0, #7
    144c:	428b      	cmp	r3, r1
    144e:	d301      	bcc.n	1454 <__udivsi3+0xa8>
    1450:	01cb      	lsls	r3, r1, #7
    1452:	1ac0      	subs	r0, r0, r3
    1454:	4152      	adcs	r2, r2
    1456:	0983      	lsrs	r3, r0, #6
    1458:	428b      	cmp	r3, r1
    145a:	d301      	bcc.n	1460 <__udivsi3+0xb4>
    145c:	018b      	lsls	r3, r1, #6
    145e:	1ac0      	subs	r0, r0, r3
    1460:	4152      	adcs	r2, r2
    1462:	0943      	lsrs	r3, r0, #5
    1464:	428b      	cmp	r3, r1
    1466:	d301      	bcc.n	146c <__udivsi3+0xc0>
    1468:	014b      	lsls	r3, r1, #5
    146a:	1ac0      	subs	r0, r0, r3
    146c:	4152      	adcs	r2, r2
    146e:	0903      	lsrs	r3, r0, #4
    1470:	428b      	cmp	r3, r1
    1472:	d301      	bcc.n	1478 <__udivsi3+0xcc>
    1474:	010b      	lsls	r3, r1, #4
    1476:	1ac0      	subs	r0, r0, r3
    1478:	4152      	adcs	r2, r2
    147a:	08c3      	lsrs	r3, r0, #3
    147c:	428b      	cmp	r3, r1
    147e:	d301      	bcc.n	1484 <__udivsi3+0xd8>
    1480:	00cb      	lsls	r3, r1, #3
    1482:	1ac0      	subs	r0, r0, r3
    1484:	4152      	adcs	r2, r2
    1486:	0883      	lsrs	r3, r0, #2
    1488:	428b      	cmp	r3, r1
    148a:	d301      	bcc.n	1490 <__udivsi3+0xe4>
    148c:	008b      	lsls	r3, r1, #2
    148e:	1ac0      	subs	r0, r0, r3
    1490:	4152      	adcs	r2, r2
    1492:	0843      	lsrs	r3, r0, #1
    1494:	428b      	cmp	r3, r1
    1496:	d301      	bcc.n	149c <__udivsi3+0xf0>
    1498:	004b      	lsls	r3, r1, #1
    149a:	1ac0      	subs	r0, r0, r3
    149c:	4152      	adcs	r2, r2
    149e:	1a41      	subs	r1, r0, r1
    14a0:	d200      	bcs.n	14a4 <__udivsi3+0xf8>
    14a2:	4601      	mov	r1, r0
    14a4:	4152      	adcs	r2, r2
    14a6:	4610      	mov	r0, r2
    14a8:	4770      	bx	lr
    14aa:	e7ff      	b.n	14ac <__udivsi3+0x100>
    14ac:	b501      	push	{r0, lr}
    14ae:	2000      	movs	r0, #0
    14b0:	f000 f806 	bl	14c0 <__aeabi_idiv0>
    14b4:	bd02      	pop	{r1, pc}
    14b6:	46c0      	nop			; (mov r8, r8)

000014b8 <__aeabi_uidivmod>:
    14b8:	2900      	cmp	r1, #0
    14ba:	d0f7      	beq.n	14ac <__udivsi3+0x100>
    14bc:	e776      	b.n	13ac <__udivsi3>
    14be:	4770      	bx	lr

000014c0 <__aeabi_idiv0>:
    14c0:	4770      	bx	lr
    14c2:	46c0      	nop			; (mov r8, r8)

000014c4 <__libc_init_array>:
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	2600      	movs	r6, #0
    14c8:	4d0c      	ldr	r5, [pc, #48]	; (14fc <__libc_init_array+0x38>)
    14ca:	4c0d      	ldr	r4, [pc, #52]	; (1500 <__libc_init_array+0x3c>)
    14cc:	1b64      	subs	r4, r4, r5
    14ce:	10a4      	asrs	r4, r4, #2
    14d0:	42a6      	cmp	r6, r4
    14d2:	d109      	bne.n	14e8 <__libc_init_array+0x24>
    14d4:	2600      	movs	r6, #0
    14d6:	f000 f857 	bl	1588 <_init>
    14da:	4d0a      	ldr	r5, [pc, #40]	; (1504 <__libc_init_array+0x40>)
    14dc:	4c0a      	ldr	r4, [pc, #40]	; (1508 <__libc_init_array+0x44>)
    14de:	1b64      	subs	r4, r4, r5
    14e0:	10a4      	asrs	r4, r4, #2
    14e2:	42a6      	cmp	r6, r4
    14e4:	d105      	bne.n	14f2 <__libc_init_array+0x2e>
    14e6:	bd70      	pop	{r4, r5, r6, pc}
    14e8:	00b3      	lsls	r3, r6, #2
    14ea:	58eb      	ldr	r3, [r5, r3]
    14ec:	4798      	blx	r3
    14ee:	3601      	adds	r6, #1
    14f0:	e7ee      	b.n	14d0 <__libc_init_array+0xc>
    14f2:	00b3      	lsls	r3, r6, #2
    14f4:	58eb      	ldr	r3, [r5, r3]
    14f6:	4798      	blx	r3
    14f8:	3601      	adds	r6, #1
    14fa:	e7f2      	b.n	14e2 <__libc_init_array+0x1e>
    14fc:	00001594 	.word	0x00001594
    1500:	00001594 	.word	0x00001594
    1504:	00001594 	.word	0x00001594
    1508:	00001598 	.word	0x00001598

0000150c <memcpy>:
    150c:	2300      	movs	r3, #0
    150e:	b510      	push	{r4, lr}
    1510:	429a      	cmp	r2, r3
    1512:	d100      	bne.n	1516 <memcpy+0xa>
    1514:	bd10      	pop	{r4, pc}
    1516:	5ccc      	ldrb	r4, [r1, r3]
    1518:	54c4      	strb	r4, [r0, r3]
    151a:	3301      	adds	r3, #1
    151c:	e7f8      	b.n	1510 <memcpy+0x4>

0000151e <memset>:
    151e:	0003      	movs	r3, r0
    1520:	1882      	adds	r2, r0, r2
    1522:	4293      	cmp	r3, r2
    1524:	d100      	bne.n	1528 <memset+0xa>
    1526:	4770      	bx	lr
    1528:	7019      	strb	r1, [r3, #0]
    152a:	3301      	adds	r3, #1
    152c:	e7f9      	b.n	1522 <memset+0x4>
    152e:	0000      	movs	r0, r0
    1530:	42000800 	.word	0x42000800
    1534:	42000c00 	.word	0x42000c00
    1538:	42001000 	.word	0x42001000
    153c:	42001400 	.word	0x42001400
    1540:	42001800 	.word	0x42001800
    1544:	42001c00 	.word	0x42001c00
    1548:	00000c46 	.word	0x00000c46
    154c:	00000c42 	.word	0x00000c42
    1550:	00000c42 	.word	0x00000c42
    1554:	00000c92 	.word	0x00000c92
    1558:	00000c92 	.word	0x00000c92
    155c:	00000c5a 	.word	0x00000c5a
    1560:	00000c4c 	.word	0x00000c4c
    1564:	00000c60 	.word	0x00000c60
    1568:	00000d18 	.word	0x00000d18
    156c:	00000cf8 	.word	0x00000cf8
    1570:	00000cf8 	.word	0x00000cf8
    1574:	00000d68 	.word	0x00000d68
    1578:	00000d0a 	.word	0x00000d0a
    157c:	00000d26 	.word	0x00000d26
    1580:	00000cfc 	.word	0x00000cfc
    1584:	00000d34 	.word	0x00000d34

00001588 <_init>:
    1588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    158e:	bc08      	pop	{r3}
    1590:	469e      	mov	lr, r3
    1592:	4770      	bx	lr

00001594 <__init_array_start>:
    1594:	000000cd 	.word	0x000000cd

00001598 <_fini>:
    1598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    159e:	bc08      	pop	{r3}
    15a0:	469e      	mov	lr, r3
    15a2:	4770      	bx	lr

000015a4 <__fini_array_start>:
    15a4:	000000a5 	.word	0x000000a5
