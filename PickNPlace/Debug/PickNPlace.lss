
PickNPlace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000258c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  0000258c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f4  2000000c  00002598  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000100  0000268c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f872  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000407e  00000000  00000000  0004f8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007992  00000000  00000000  0005397d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004f0  00000000  00000000  0005b30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009e0  00000000  00000000  0005b7ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014e6b  00000000  00000000  0005c1df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000da99  00000000  00000000  0007104a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000646a2  00000000  00000000  0007eae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c4c  00000000  00000000  000e3188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 21 00 20 51 1e 00 00 4d 1e 00 00 4d 1e 00 00     .!. Q...M...M...
	...
      2c:	4d 1e 00 00 00 00 00 00 00 00 00 00 4d 1e 00 00     M...........M...
      3c:	4d 1e 00 00 4d 1e 00 00 4d 1e 00 00 4d 1e 00 00     M...M...M...M...
      4c:	4d 1e 00 00 4d 1e 00 00 4d 1e 00 00 4d 1e 00 00     M...M...M...M...
      5c:	01 0a 00 00 11 0a 00 00 21 0a 00 00 31 0a 00 00     ........!...1...
      6c:	41 0a 00 00 51 0a 00 00 4d 1e 00 00 4d 1e 00 00     A...Q...M...M...
      7c:	4d 1e 00 00 4d 1e 00 00 4d 1e 00 00 4d 1e 00 00     M...M...M...M...
      8c:	4d 1e 00 00 4d 1e 00 00 4d 1e 00 00 4d 1e 00 00     M...M...M...M...
      9c:	4d 1e 00 00 4d 1e 00 00                             M...M...

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	0000258c 	.word	0x0000258c

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000010 	.word	0x20000010
      f8:	0000258c 	.word	0x0000258c
      fc:	0000258c 	.word	0x0000258c
     100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     106:	2000      	movs	r0, #0
     108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
     10a:	4798      	blx	r3
     10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
     110:	21fa      	movs	r1, #250	; 0xfa
     112:	0089      	lsls	r1, r1, #2
     114:	47a0      	blx	r4
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
     118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
     11c:	0028      	movs	r0, r5
     11e:	47a0      	blx	r4
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
     122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     124:	2205      	movs	r2, #5
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
     128:	601a      	str	r2, [r3, #0]
}
     12a:	bd70      	pop	{r4, r5, r6, pc}
     12c:	00001bdd 	.word	0x00001bdd
     130:	000021ed 	.word	0x000021ed
     134:	20000000 	.word	0x20000000
     138:	000f4240 	.word	0x000f4240
     13c:	20000004 	.word	0x20000004
     140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_us+0x24>)
     148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     14e:	2180      	movs	r1, #128	; 0x80
     150:	0249      	lsls	r1, r1, #9
	while (n--) {
     152:	3801      	subs	r0, #1
     154:	d307      	bcc.n	166 <delay_cycles_us+0x22>
	if (n > 0) {
     156:	2c00      	cmp	r4, #0
     158:	d0fb      	beq.n	152 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     15a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     15c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	6813      	ldr	r3, [r2, #0]
     160:	420b      	tst	r3, r1
     162:	d0fc      	beq.n	15e <delay_cycles_us+0x1a>
     164:	e7f5      	b.n	152 <delay_cycles_us+0xe>
	}
}
     166:	bd30      	pop	{r4, r5, pc}
     168:	20000004 	.word	0x20000004
     16c:	e000e010 	.word	0xe000e010

00000170 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     170:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_cycles_ms+0x24>)
     174:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     176:	4a08      	ldr	r2, [pc, #32]	; (198 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     178:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     17a:	2180      	movs	r1, #128	; 0x80
     17c:	0249      	lsls	r1, r1, #9
	while (n--) {
     17e:	3801      	subs	r0, #1
     180:	d307      	bcc.n	192 <delay_cycles_ms+0x22>
	if (n > 0) {
     182:	2c00      	cmp	r4, #0
     184:	d0fb      	beq.n	17e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     186:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     188:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	6813      	ldr	r3, [r2, #0]
     18c:	420b      	tst	r3, r1
     18e:	d0fc      	beq.n	18a <delay_cycles_ms+0x1a>
     190:	e7f5      	b.n	17e <delay_cycles_ms+0xe>
	}
}
     192:	bd30      	pop	{r4, r5, pc}
     194:	20000000 	.word	0x20000000
     198:	e000e010 	.word	0xe000e010

0000019c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     19c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     19e:	2200      	movs	r2, #0
     1a0:	2300      	movs	r3, #0
     1a2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1a4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1a6:	2100      	movs	r1, #0
     1a8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1aa:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1ac:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1ae:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1b0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1b2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1b4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1b6:	24c0      	movs	r4, #192	; 0xc0
     1b8:	0164      	lsls	r4, r4, #5
     1ba:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1bc:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1be:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1c0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1c2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1c4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1c6:	242a      	movs	r4, #42	; 0x2a
     1c8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1ca:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1cc:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1ce:	3c06      	subs	r4, #6
     1d0:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1d2:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1d4:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1d6:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1d8:	232b      	movs	r3, #43	; 0x2b
     1da:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1dc:	3301      	adds	r3, #1
     1de:	54c1      	strb	r1, [r0, r3]
}
     1e0:	bd10      	pop	{r4, pc}
	...

000001e4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46de      	mov	lr, fp
     1e8:	4657      	mov	r7, sl
     1ea:	464e      	mov	r6, r9
     1ec:	4645      	mov	r5, r8
     1ee:	b5e0      	push	{r5, r6, r7, lr}
     1f0:	b097      	sub	sp, #92	; 0x5c
     1f2:	0007      	movs	r7, r0
     1f4:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1f6:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1f8:	4ac9      	ldr	r2, [pc, #804]	; (520 <adc_init+0x33c>)
     1fa:	6a10      	ldr	r0, [r2, #32]
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	025b      	lsls	r3, r3, #9
     200:	4303      	orrs	r3, r0
     202:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     204:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     206:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     208:	07db      	lsls	r3, r3, #31
     20a:	d506      	bpl.n	21a <adc_init+0x36>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     20c:	b017      	add	sp, #92	; 0x5c
     20e:	bc3c      	pop	{r2, r3, r4, r5}
     210:	4690      	mov	r8, r2
     212:	4699      	mov	r9, r3
     214:	46a2      	mov	sl, r4
     216:	46ab      	mov	fp, r5
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     21a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     21c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     21e:	079b      	lsls	r3, r3, #30
     220:	d4f4      	bmi.n	20c <adc_init+0x28>
	module_inst->reference = config->reference;
     222:	7873      	ldrb	r3, [r6, #1]
     224:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     226:	2b00      	cmp	r3, #0
     228:	d104      	bne.n	234 <adc_init+0x50>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     22a:	4abe      	ldr	r2, [pc, #760]	; (524 <adc_init+0x340>)
     22c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     22e:	2104      	movs	r1, #4
     230:	430b      	orrs	r3, r1
     232:	6413      	str	r3, [r2, #64]	; 0x40
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
     234:	4bbc      	ldr	r3, [pc, #752]	; (528 <adc_init+0x344>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	051b      	lsls	r3, r3, #20
     23a:	0f1b      	lsrs	r3, r3, #28
     23c:	4698      	mov	r8, r3
	Adc *const adc_module = module_inst->hw;
     23e:	683b      	ldr	r3, [r7, #0]
     240:	469b      	mov	fp, r3
	gclk_chan_conf.source_generator = config->clock_source;
     242:	7833      	ldrb	r3, [r6, #0]
     244:	466a      	mov	r2, sp
     246:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     248:	4669      	mov	r1, sp
     24a:	2017      	movs	r0, #23
     24c:	4bb7      	ldr	r3, [pc, #732]	; (52c <adc_init+0x348>)
     24e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     250:	2017      	movs	r0, #23
     252:	4bb7      	ldr	r3, [pc, #732]	; (530 <adc_init+0x34c>)
     254:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     256:	232c      	movs	r3, #44	; 0x2c
     258:	5cf2      	ldrb	r2, [r6, r3]
     25a:	2a00      	cmp	r2, #0
     25c:	d05a      	beq.n	314 <adc_init+0x130>
		uint8_t offset = config->pin_scan.offset_start_scan;
     25e:	3b01      	subs	r3, #1
     260:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     262:	7b33      	ldrb	r3, [r6, #12]
     264:	18eb      	adds	r3, r5, r3
     266:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     268:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     26a:	b2c9      	uxtb	r1, r1
     26c:	428b      	cmp	r3, r1
     26e:	d227      	bcs.n	2c0 <adc_init+0xdc>
     270:	1952      	adds	r2, r2, r5
     272:	b2d3      	uxtb	r3, r2
     274:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     276:	4baf      	ldr	r3, [pc, #700]	; (534 <adc_init+0x350>)
     278:	469a      	mov	sl, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     27a:	0033      	movs	r3, r6
     27c:	464e      	mov	r6, r9
     27e:	46b9      	mov	r9, r7
     280:	001f      	movs	r7, r3
     282:	e003      	b.n	28c <adc_init+0xa8>
			offset++;
     284:	3501      	adds	r5, #1
     286:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     288:	42ae      	cmp	r6, r5
     28a:	d017      	beq.n	2bc <adc_init+0xd8>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     28c:	240f      	movs	r4, #15
     28e:	402c      	ands	r4, r5
     290:	7b3b      	ldrb	r3, [r7, #12]
     292:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     294:	2250      	movs	r2, #80	; 0x50
     296:	49a8      	ldr	r1, [pc, #672]	; (538 <adc_init+0x354>)
     298:	a802      	add	r0, sp, #8
     29a:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     29c:	2c13      	cmp	r4, #19
     29e:	d8f1      	bhi.n	284 <adc_init+0xa0>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2a0:	00a4      	lsls	r4, r4, #2
     2a2:	ab02      	add	r3, sp, #8
     2a4:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2a6:	a901      	add	r1, sp, #4
     2a8:	2300      	movs	r3, #0
     2aa:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2ac:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2ae:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2b0:	3301      	adds	r3, #1
     2b2:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2b4:	b2c0      	uxtb	r0, r0
     2b6:	4ba1      	ldr	r3, [pc, #644]	; (53c <adc_init+0x358>)
     2b8:	4798      	blx	r3
     2ba:	e7e3      	b.n	284 <adc_init+0xa0>
     2bc:	003e      	movs	r6, r7
     2be:	464f      	mov	r7, r9
		_adc_configure_ain_pin(config->negative_input);
     2c0:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2c2:	2250      	movs	r2, #80	; 0x50
     2c4:	499c      	ldr	r1, [pc, #624]	; (538 <adc_init+0x354>)
     2c6:	a802      	add	r0, sp, #8
     2c8:	4b9a      	ldr	r3, [pc, #616]	; (534 <adc_init+0x350>)
     2ca:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2cc:	2c13      	cmp	r4, #19
     2ce:	d913      	bls.n	2f8 <adc_init+0x114>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2d0:	7d73      	ldrb	r3, [r6, #21]
     2d2:	009b      	lsls	r3, r3, #2
     2d4:	b2db      	uxtb	r3, r3
     2d6:	465a      	mov	r2, fp
     2d8:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2da:	7db3      	ldrb	r3, [r6, #22]
     2dc:	01db      	lsls	r3, r3, #7
     2de:	7872      	ldrb	r2, [r6, #1]
     2e0:	4313      	orrs	r3, r2
     2e2:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2e4:	465a      	mov	r2, fp
     2e6:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2e8:	7933      	ldrb	r3, [r6, #4]
     2ea:	2b34      	cmp	r3, #52	; 0x34
     2ec:	d900      	bls.n	2f0 <adc_init+0x10c>
     2ee:	e18c      	b.n	60a <adc_init+0x426>
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	4a93      	ldr	r2, [pc, #588]	; (540 <adc_init+0x35c>)
     2f4:	58d3      	ldr	r3, [r2, r3]
     2f6:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2f8:	00a4      	lsls	r4, r4, #2
     2fa:	ab02      	add	r3, sp, #8
     2fc:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2fe:	a901      	add	r1, sp, #4
     300:	2300      	movs	r3, #0
     302:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     304:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     306:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     308:	3301      	adds	r3, #1
     30a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     30c:	b2c0      	uxtb	r0, r0
     30e:	4b8b      	ldr	r3, [pc, #556]	; (53c <adc_init+0x358>)
     310:	4798      	blx	r3
     312:	e7dd      	b.n	2d0 <adc_init+0xec>
		_adc_configure_ain_pin(config->positive_input);
     314:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     316:	2250      	movs	r2, #80	; 0x50
     318:	4987      	ldr	r1, [pc, #540]	; (538 <adc_init+0x354>)
     31a:	a802      	add	r0, sp, #8
     31c:	4b85      	ldr	r3, [pc, #532]	; (534 <adc_init+0x350>)
     31e:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     320:	2c13      	cmp	r4, #19
     322:	d915      	bls.n	350 <adc_init+0x16c>
		_adc_configure_ain_pin(config->negative_input);
     324:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     326:	2250      	movs	r2, #80	; 0x50
     328:	4983      	ldr	r1, [pc, #524]	; (538 <adc_init+0x354>)
     32a:	a802      	add	r0, sp, #8
     32c:	4b81      	ldr	r3, [pc, #516]	; (534 <adc_init+0x350>)
     32e:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     330:	2c13      	cmp	r4, #19
     332:	d8cd      	bhi.n	2d0 <adc_init+0xec>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     334:	00a4      	lsls	r4, r4, #2
     336:	ab02      	add	r3, sp, #8
     338:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     340:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     342:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     344:	3301      	adds	r3, #1
     346:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     348:	b2c0      	uxtb	r0, r0
     34a:	4b7c      	ldr	r3, [pc, #496]	; (53c <adc_init+0x358>)
     34c:	4798      	blx	r3
     34e:	e7bf      	b.n	2d0 <adc_init+0xec>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     350:	00a4      	lsls	r4, r4, #2
     352:	ab02      	add	r3, sp, #8
     354:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     356:	a901      	add	r1, sp, #4
     358:	2300      	movs	r3, #0
     35a:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     35c:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     35e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     360:	3301      	adds	r3, #1
     362:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     364:	b2c0      	uxtb	r0, r0
     366:	4b75      	ldr	r3, [pc, #468]	; (53c <adc_init+0x358>)
     368:	4798      	blx	r3
     36a:	e7db      	b.n	324 <adc_init+0x140>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     36c:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     36e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     370:	2102      	movs	r1, #2
     372:	e022      	b.n	3ba <adc_init+0x1d6>
		adjres = config->divide_result;
     374:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     376:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     378:	2410      	movs	r4, #16
     37a:	e01e      	b.n	3ba <adc_init+0x1d6>
		if(revision_num < REVISON_D_NUM) {
     37c:	4643      	mov	r3, r8
     37e:	2b02      	cmp	r3, #2
     380:	d800      	bhi.n	384 <adc_init+0x1a0>
     382:	e0c4      	b.n	50e <adc_init+0x32a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     384:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     386:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_2;
     388:	2101      	movs	r1, #1
     38a:	e016      	b.n	3ba <adc_init+0x1d6>
		if(revision_num < REVISON_D_NUM) {
     38c:	4643      	mov	r3, r8
     38e:	2b02      	cmp	r3, #2
     390:	d800      	bhi.n	394 <adc_init+0x1b0>
     392:	e0c0      	b.n	516 <adc_init+0x332>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     394:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     396:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_DISABLE;
     398:	2100      	movs	r1, #0
     39a:	e00e      	b.n	3ba <adc_init+0x1d6>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     39c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     39e:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     3a0:	2100      	movs	r1, #0
     3a2:	e00a      	b.n	3ba <adc_init+0x1d6>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3a4:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     3a6:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     3a8:	2100      	movs	r1, #0
     3aa:	e006      	b.n	3ba <adc_init+0x1d6>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ac:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3ae:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3b0:	2100      	movs	r1, #0
     3b2:	e002      	b.n	3ba <adc_init+0x1d6>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3b4:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3b6:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3b8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3ba:	0109      	lsls	r1, r1, #4
     3bc:	2270      	movs	r2, #112	; 0x70
     3be:	400a      	ands	r2, r1
     3c0:	4313      	orrs	r3, r2
     3c2:	465a      	mov	r2, fp
     3c4:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3c6:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3c8:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3ca:	2b3f      	cmp	r3, #63	; 0x3f
     3cc:	d900      	bls.n	3d0 <adc_init+0x1ec>
     3ce:	e71d      	b.n	20c <adc_init+0x28>
		adc_module->SAMPCTRL.reg =
     3d0:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3d2:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3d4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d6:	b25b      	sxtb	r3, r3
     3d8:	2b00      	cmp	r3, #0
     3da:	dbfb      	blt.n	3d4 <adc_init+0x1f0>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3dc:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3de:	8872      	ldrh	r2, [r6, #2]
     3e0:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3e2:	2224      	movs	r2, #36	; 0x24
     3e4:	5cb2      	ldrb	r2, [r6, r2]
     3e6:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3e8:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3ea:	7d32      	ldrb	r2, [r6, #20]
     3ec:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ee:	4313      	orrs	r3, r2
     3f0:	7cb2      	ldrb	r2, [r6, #18]
     3f2:	0052      	lsls	r2, r2, #1
     3f4:	4313      	orrs	r3, r2
     3f6:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3f8:	465a      	mov	r2, fp
     3fa:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3fc:	7e33      	ldrb	r3, [r6, #24]
     3fe:	2b00      	cmp	r3, #0
     400:	d020      	beq.n	444 <adc_init+0x260>
		switch (resolution) {
     402:	2c10      	cmp	r4, #16
     404:	d100      	bne.n	408 <adc_init+0x224>
     406:	e0e2      	b.n	5ce <adc_init+0x3ea>
     408:	d800      	bhi.n	40c <adc_init+0x228>
     40a:	e0a1      	b.n	550 <adc_init+0x36c>
     40c:	2c20      	cmp	r4, #32
     40e:	d100      	bne.n	412 <adc_init+0x22e>
     410:	e0bf      	b.n	592 <adc_init+0x3ae>
     412:	2c30      	cmp	r4, #48	; 0x30
     414:	d116      	bne.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     416:	7cf2      	ldrb	r2, [r6, #19]
     418:	2a00      	cmp	r2, #0
     41a:	d00a      	beq.n	432 <adc_init+0x24e>
					(config->window.window_lower_value > 127 ||
     41c:	69f2      	ldr	r2, [r6, #28]
     41e:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     420:	2017      	movs	r0, #23
			if (config->differential_mode &&
     422:	2aff      	cmp	r2, #255	; 0xff
     424:	d900      	bls.n	428 <adc_init+0x244>
     426:	e6f1      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     428:	6a32      	ldr	r2, [r6, #32]
     42a:	3280      	adds	r2, #128	; 0x80
     42c:	2aff      	cmp	r2, #255	; 0xff
     42e:	d900      	bls.n	432 <adc_init+0x24e>
     430:	e6ec      	b.n	20c <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     432:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     434:	69f2      	ldr	r2, [r6, #28]
     436:	2aff      	cmp	r2, #255	; 0xff
     438:	dd00      	ble.n	43c <adc_init+0x258>
     43a:	e6e7      	b.n	20c <adc_init+0x28>
     43c:	6a32      	ldr	r2, [r6, #32]
     43e:	2aff      	cmp	r2, #255	; 0xff
     440:	dd00      	ble.n	444 <adc_init+0x260>
     442:	e6e3      	b.n	20c <adc_init+0x28>
	Adc *const adc_module = module_inst->hw;
     444:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     446:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     448:	b252      	sxtb	r2, r2
     44a:	2a00      	cmp	r2, #0
     44c:	dbfb      	blt.n	446 <adc_init+0x262>
	adc_module->WINCTRL.reg = config->window.window_mode;
     44e:	465a      	mov	r2, fp
     450:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     452:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     454:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     456:	b25b      	sxtb	r3, r3
     458:	2b00      	cmp	r3, #0
     45a:	dbfb      	blt.n	454 <adc_init+0x270>
	adc_module->WINLT.reg =
     45c:	8bb3      	ldrh	r3, [r6, #28]
     45e:	465a      	mov	r2, fp
     460:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     462:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     464:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     466:	b25b      	sxtb	r3, r3
     468:	2b00      	cmp	r3, #0
     46a:	dbfb      	blt.n	464 <adc_init+0x280>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     46c:	8c33      	ldrh	r3, [r6, #32]
     46e:	465a      	mov	r2, fp
     470:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     472:	232c      	movs	r3, #44	; 0x2c
     474:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     476:	2b00      	cmp	r3, #0
     478:	d005      	beq.n	486 <adc_init+0x2a2>
		inputs_to_scan--;
     47a:	3b01      	subs	r3, #1
     47c:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     47e:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     480:	2b0f      	cmp	r3, #15
     482:	d900      	bls.n	486 <adc_init+0x2a2>
     484:	e6c2      	b.n	20c <adc_init+0x28>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     486:	222b      	movs	r2, #43	; 0x2b
     488:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     48a:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     48c:	290f      	cmp	r1, #15
     48e:	d900      	bls.n	492 <adc_init+0x2ae>
     490:	e6bc      	b.n	20c <adc_init+0x28>
	Adc *const adc_module = module_inst->hw;
     492:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     494:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     496:	b252      	sxtb	r2, r2
     498:	2a00      	cmp	r2, #0
     49a:	dbfb      	blt.n	494 <adc_init+0x2b0>
			config->negative_input |
     49c:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     49e:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     4a0:	4302      	orrs	r2, r0
     4a2:	68b0      	ldr	r0, [r6, #8]
     4a4:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     4a6:	0509      	lsls	r1, r1, #20
			config->negative_input |
     4a8:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4aa:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4ac:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     4ae:	465a      	mov	r2, fp
     4b0:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4b2:	232a      	movs	r3, #42	; 0x2a
     4b4:	5cf3      	ldrb	r3, [r6, r3]
     4b6:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4b8:	230f      	movs	r3, #15
     4ba:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4bc:	3315      	adds	r3, #21
     4be:	5cf3      	ldrb	r3, [r6, r3]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d012      	beq.n	4ea <adc_init+0x306>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4c4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4c6:	4a1f      	ldr	r2, [pc, #124]	; (544 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     4c8:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4ca:	4293      	cmp	r3, r2
     4cc:	d900      	bls.n	4d0 <adc_init+0x2ec>
     4ce:	e69d      	b.n	20c <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4d0:	465a      	mov	r2, fp
     4d2:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4d4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4d6:	2380      	movs	r3, #128	; 0x80
     4d8:	011b      	lsls	r3, r3, #4
     4da:	18d3      	adds	r3, r2, r3
     4dc:	4919      	ldr	r1, [pc, #100]	; (544 <adc_init+0x360>)
     4de:	b29b      	uxth	r3, r3
     4e0:	428b      	cmp	r3, r1
     4e2:	d900      	bls.n	4e6 <adc_init+0x302>
     4e4:	e692      	b.n	20c <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4e6:	465b      	mov	r3, fp
     4e8:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4ea:	4b17      	ldr	r3, [pc, #92]	; (548 <adc_init+0x364>)
     4ec:	681b      	ldr	r3, [r3, #0]
     4ee:	015b      	lsls	r3, r3, #5
     4f0:	22e0      	movs	r2, #224	; 0xe0
     4f2:	00d2      	lsls	r2, r2, #3
     4f4:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4f6:	4a15      	ldr	r2, [pc, #84]	; (54c <adc_init+0x368>)
     4f8:	6851      	ldr	r1, [r2, #4]
     4fa:	0149      	lsls	r1, r1, #5
     4fc:	6812      	ldr	r2, [r2, #0]
     4fe:	0ed2      	lsrs	r2, r2, #27
     500:	430a      	orrs	r2, r1
     502:	b2d2      	uxtb	r2, r2
			) |
     504:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     506:	465a      	mov	r2, fp
     508:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     50a:	2000      	movs	r0, #0
     50c:	e67e      	b.n	20c <adc_init+0x28>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     50e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     510:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_8;
     512:	2103      	movs	r1, #3
     514:	e751      	b.n	3ba <adc_init+0x1d6>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     516:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     518:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_16;
     51a:	2104      	movs	r1, #4
     51c:	e74d      	b.n	3ba <adc_init+0x1d6>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	40000400 	.word	0x40000400
     524:	40000800 	.word	0x40000800
     528:	41002018 	.word	0x41002018
     52c:	00001cf5 	.word	0x00001cf5
     530:	00001c69 	.word	0x00001c69
     534:	000023a1 	.word	0x000023a1
     538:	00002498 	.word	0x00002498
     53c:	00001ded 	.word	0x00001ded
     540:	000023c4 	.word	0x000023c4
     544:	00000fff 	.word	0x00000fff
     548:	00806024 	.word	0x00806024
     54c:	00806020 	.word	0x00806020
		switch (resolution) {
     550:	2c00      	cmp	r4, #0
     552:	d000      	beq.n	556 <adc_init+0x372>
     554:	e776      	b.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     556:	7cf2      	ldrb	r2, [r6, #19]
     558:	2a00      	cmp	r2, #0
     55a:	d00f      	beq.n	57c <adc_init+0x398>
					(config->window.window_lower_value > 2047 ||
     55c:	69f2      	ldr	r2, [r6, #28]
     55e:	2180      	movs	r1, #128	; 0x80
     560:	0109      	lsls	r1, r1, #4
     562:	468c      	mov	ip, r1
     564:	4462      	add	r2, ip
			if (config->differential_mode &&
     566:	492a      	ldr	r1, [pc, #168]	; (610 <adc_init+0x42c>)
				return STATUS_ERR_INVALID_ARG;
     568:	2017      	movs	r0, #23
			if (config->differential_mode &&
     56a:	428a      	cmp	r2, r1
     56c:	d900      	bls.n	570 <adc_init+0x38c>
     56e:	e64d      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     570:	6a32      	ldr	r2, [r6, #32]
     572:	4462      	add	r2, ip
     574:	4926      	ldr	r1, [pc, #152]	; (610 <adc_init+0x42c>)
     576:	428a      	cmp	r2, r1
     578:	d900      	bls.n	57c <adc_init+0x398>
     57a:	e647      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     57c:	4a24      	ldr	r2, [pc, #144]	; (610 <adc_init+0x42c>)
				return STATUS_ERR_INVALID_ARG;
     57e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     580:	69f1      	ldr	r1, [r6, #28]
     582:	4291      	cmp	r1, r2
     584:	dd00      	ble.n	588 <adc_init+0x3a4>
     586:	e641      	b.n	20c <adc_init+0x28>
     588:	6a31      	ldr	r1, [r6, #32]
     58a:	4291      	cmp	r1, r2
     58c:	dd00      	ble.n	590 <adc_init+0x3ac>
     58e:	e63d      	b.n	20c <adc_init+0x28>
     590:	e758      	b.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     592:	7cf2      	ldrb	r2, [r6, #19]
     594:	2a00      	cmp	r2, #0
     596:	d00f      	beq.n	5b8 <adc_init+0x3d4>
					(config->window.window_lower_value > 511 ||
     598:	69f2      	ldr	r2, [r6, #28]
     59a:	2180      	movs	r1, #128	; 0x80
     59c:	0089      	lsls	r1, r1, #2
     59e:	468c      	mov	ip, r1
     5a0:	4462      	add	r2, ip
			if (config->differential_mode &&
     5a2:	491c      	ldr	r1, [pc, #112]	; (614 <adc_init+0x430>)
				return STATUS_ERR_INVALID_ARG;
     5a4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5a6:	428a      	cmp	r2, r1
     5a8:	d900      	bls.n	5ac <adc_init+0x3c8>
     5aa:	e62f      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     5ac:	6a32      	ldr	r2, [r6, #32]
     5ae:	4462      	add	r2, ip
     5b0:	4918      	ldr	r1, [pc, #96]	; (614 <adc_init+0x430>)
     5b2:	428a      	cmp	r2, r1
     5b4:	d900      	bls.n	5b8 <adc_init+0x3d4>
     5b6:	e629      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     5b8:	4a16      	ldr	r2, [pc, #88]	; (614 <adc_init+0x430>)
				return STATUS_ERR_INVALID_ARG;
     5ba:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     5bc:	69f1      	ldr	r1, [r6, #28]
     5be:	4291      	cmp	r1, r2
     5c0:	dd00      	ble.n	5c4 <adc_init+0x3e0>
     5c2:	e623      	b.n	20c <adc_init+0x28>
     5c4:	6a31      	ldr	r1, [r6, #32]
     5c6:	4291      	cmp	r1, r2
     5c8:	dd00      	ble.n	5cc <adc_init+0x3e8>
     5ca:	e61f      	b.n	20c <adc_init+0x28>
     5cc:	e73a      	b.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     5ce:	7cf2      	ldrb	r2, [r6, #19]
     5d0:	2a00      	cmp	r2, #0
     5d2:	d00f      	beq.n	5f4 <adc_init+0x410>
					(config->window.window_lower_value > 32767 ||
     5d4:	69f2      	ldr	r2, [r6, #28]
     5d6:	2180      	movs	r1, #128	; 0x80
     5d8:	0209      	lsls	r1, r1, #8
     5da:	468c      	mov	ip, r1
     5dc:	4462      	add	r2, ip
			if (config->differential_mode &&
     5de:	490e      	ldr	r1, [pc, #56]	; (618 <adc_init+0x434>)
				return STATUS_ERR_INVALID_ARG;
     5e0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5e2:	428a      	cmp	r2, r1
     5e4:	d900      	bls.n	5e8 <adc_init+0x404>
     5e6:	e611      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     5e8:	6a32      	ldr	r2, [r6, #32]
     5ea:	4462      	add	r2, ip
     5ec:	490a      	ldr	r1, [pc, #40]	; (618 <adc_init+0x434>)
     5ee:	428a      	cmp	r2, r1
     5f0:	d900      	bls.n	5f4 <adc_init+0x410>
     5f2:	e60b      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     5f4:	4a08      	ldr	r2, [pc, #32]	; (618 <adc_init+0x434>)
				return STATUS_ERR_INVALID_ARG;
     5f6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5f8:	69f1      	ldr	r1, [r6, #28]
     5fa:	4291      	cmp	r1, r2
     5fc:	dd00      	ble.n	600 <adc_init+0x41c>
     5fe:	e605      	b.n	20c <adc_init+0x28>
     600:	6a31      	ldr	r1, [r6, #32]
     602:	4291      	cmp	r1, r2
     604:	dd00      	ble.n	608 <adc_init+0x424>
     606:	e601      	b.n	20c <adc_init+0x28>
     608:	e71c      	b.n	444 <adc_init+0x260>
		return STATUS_ERR_INVALID_ARG;
     60a:	2017      	movs	r0, #23
     60c:	e5fe      	b.n	20c <adc_init+0x28>
     60e:	46c0      	nop			; (mov r8, r8)
     610:	00000fff 	.word	0x00000fff
     614:	000003ff 	.word	0x000003ff
     618:	0000ffff 	.word	0x0000ffff

0000061c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     61c:	b5f0      	push	{r4, r5, r6, r7, lr}
     61e:	46de      	mov	lr, fp
     620:	4657      	mov	r7, sl
     622:	464e      	mov	r6, r9
     624:	4645      	mov	r5, r8
     626:	b5e0      	push	{r5, r6, r7, lr}
     628:	b087      	sub	sp, #28
     62a:	4680      	mov	r8, r0
     62c:	9104      	str	r1, [sp, #16]
     62e:	0016      	movs	r6, r2
     630:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     632:	2200      	movs	r2, #0
     634:	2300      	movs	r3, #0
     636:	2100      	movs	r1, #0
     638:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     63a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     63c:	2001      	movs	r0, #1
     63e:	0021      	movs	r1, r4
     640:	9600      	str	r6, [sp, #0]
     642:	9701      	str	r7, [sp, #4]
     644:	465c      	mov	r4, fp
     646:	9403      	str	r4, [sp, #12]
     648:	4644      	mov	r4, r8
     64a:	9405      	str	r4, [sp, #20]
     64c:	e013      	b.n	676 <long_division+0x5a>
     64e:	2420      	movs	r4, #32
     650:	1a64      	subs	r4, r4, r1
     652:	0005      	movs	r5, r0
     654:	40e5      	lsrs	r5, r4
     656:	46a8      	mov	r8, r5
     658:	e014      	b.n	684 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     65a:	9c00      	ldr	r4, [sp, #0]
     65c:	9d01      	ldr	r5, [sp, #4]
     65e:	1b12      	subs	r2, r2, r4
     660:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     662:	465c      	mov	r4, fp
     664:	464d      	mov	r5, r9
     666:	432c      	orrs	r4, r5
     668:	46a3      	mov	fp, r4
     66a:	9c03      	ldr	r4, [sp, #12]
     66c:	4645      	mov	r5, r8
     66e:	432c      	orrs	r4, r5
     670:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     672:	3901      	subs	r1, #1
     674:	d325      	bcc.n	6c2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     676:	2420      	movs	r4, #32
     678:	4264      	negs	r4, r4
     67a:	190c      	adds	r4, r1, r4
     67c:	d4e7      	bmi.n	64e <long_division+0x32>
     67e:	0005      	movs	r5, r0
     680:	40a5      	lsls	r5, r4
     682:	46a8      	mov	r8, r5
     684:	0004      	movs	r4, r0
     686:	408c      	lsls	r4, r1
     688:	46a1      	mov	r9, r4
		r = r << 1;
     68a:	1892      	adds	r2, r2, r2
     68c:	415b      	adcs	r3, r3
     68e:	0014      	movs	r4, r2
     690:	001d      	movs	r5, r3
		if (n & bit_shift) {
     692:	9e05      	ldr	r6, [sp, #20]
     694:	464f      	mov	r7, r9
     696:	403e      	ands	r6, r7
     698:	46b4      	mov	ip, r6
     69a:	9e04      	ldr	r6, [sp, #16]
     69c:	4647      	mov	r7, r8
     69e:	403e      	ands	r6, r7
     6a0:	46b2      	mov	sl, r6
     6a2:	4666      	mov	r6, ip
     6a4:	4657      	mov	r7, sl
     6a6:	433e      	orrs	r6, r7
     6a8:	d003      	beq.n	6b2 <long_division+0x96>
			r |= 0x01;
     6aa:	0006      	movs	r6, r0
     6ac:	4326      	orrs	r6, r4
     6ae:	0032      	movs	r2, r6
     6b0:	002b      	movs	r3, r5
		if (r >= d) {
     6b2:	9c00      	ldr	r4, [sp, #0]
     6b4:	9d01      	ldr	r5, [sp, #4]
     6b6:	429d      	cmp	r5, r3
     6b8:	d8db      	bhi.n	672 <long_division+0x56>
     6ba:	d1ce      	bne.n	65a <long_division+0x3e>
     6bc:	4294      	cmp	r4, r2
     6be:	d8d8      	bhi.n	672 <long_division+0x56>
     6c0:	e7cb      	b.n	65a <long_division+0x3e>
     6c2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     6c4:	4658      	mov	r0, fp
     6c6:	0019      	movs	r1, r3
     6c8:	b007      	add	sp, #28
     6ca:	bc3c      	pop	{r2, r3, r4, r5}
     6cc:	4690      	mov	r8, r2
     6ce:	4699      	mov	r9, r3
     6d0:	46a2      	mov	sl, r4
     6d2:	46ab      	mov	fp, r5
     6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006d6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     6d6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6d8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6da:	2340      	movs	r3, #64	; 0x40
     6dc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     6de:	4281      	cmp	r1, r0
     6e0:	d202      	bcs.n	6e8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     6e2:	0018      	movs	r0, r3
     6e4:	bd10      	pop	{r4, pc}
		baud_calculated++;
     6e6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     6e8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     6ea:	1c63      	adds	r3, r4, #1
     6ec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     6ee:	4288      	cmp	r0, r1
     6f0:	d9f9      	bls.n	6e6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6f2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     6f4:	2cff      	cmp	r4, #255	; 0xff
     6f6:	d8f4      	bhi.n	6e2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     6f8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     6fa:	2300      	movs	r3, #0
     6fc:	e7f1      	b.n	6e2 <_sercom_get_sync_baud_val+0xc>
	...

00000700 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     700:	b5f0      	push	{r4, r5, r6, r7, lr}
     702:	b083      	sub	sp, #12
     704:	000f      	movs	r7, r1
     706:	0016      	movs	r6, r2
     708:	aa08      	add	r2, sp, #32
     70a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     70c:	0004      	movs	r4, r0
     70e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     710:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     712:	42bc      	cmp	r4, r7
     714:	d902      	bls.n	71c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     716:	0010      	movs	r0, r2
     718:	b003      	add	sp, #12
     71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     71c:	2b00      	cmp	r3, #0
     71e:	d114      	bne.n	74a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     720:	0002      	movs	r2, r0
     722:	0008      	movs	r0, r1
     724:	2100      	movs	r1, #0
     726:	4c19      	ldr	r4, [pc, #100]	; (78c <_sercom_get_async_baud_val+0x8c>)
     728:	47a0      	blx	r4
     72a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     72c:	003a      	movs	r2, r7
     72e:	2300      	movs	r3, #0
     730:	2000      	movs	r0, #0
     732:	4c17      	ldr	r4, [pc, #92]	; (790 <_sercom_get_async_baud_val+0x90>)
     734:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     736:	2200      	movs	r2, #0
     738:	2301      	movs	r3, #1
     73a:	1a12      	subs	r2, r2, r0
     73c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     73e:	0c12      	lsrs	r2, r2, #16
     740:	041b      	lsls	r3, r3, #16
     742:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     744:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     746:	2200      	movs	r2, #0
     748:	e7e5      	b.n	716 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     74a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     74c:	2b01      	cmp	r3, #1
     74e:	d1f9      	bne.n	744 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     750:	000a      	movs	r2, r1
     752:	2300      	movs	r3, #0
     754:	2100      	movs	r1, #0
     756:	4c0d      	ldr	r4, [pc, #52]	; (78c <_sercom_get_async_baud_val+0x8c>)
     758:	47a0      	blx	r4
     75a:	0002      	movs	r2, r0
     75c:	000b      	movs	r3, r1
     75e:	9200      	str	r2, [sp, #0]
     760:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     762:	0038      	movs	r0, r7
     764:	2100      	movs	r1, #0
     766:	4c0a      	ldr	r4, [pc, #40]	; (790 <_sercom_get_async_baud_val+0x90>)
     768:	47a0      	blx	r4
     76a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     76c:	2380      	movs	r3, #128	; 0x80
     76e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     770:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     772:	4298      	cmp	r0, r3
     774:	d8cf      	bhi.n	716 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     776:	0f79      	lsrs	r1, r7, #29
     778:	00f8      	lsls	r0, r7, #3
     77a:	9a00      	ldr	r2, [sp, #0]
     77c:	9b01      	ldr	r3, [sp, #4]
     77e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     780:	00ea      	lsls	r2, r5, #3
     782:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     784:	b2d2      	uxtb	r2, r2
     786:	0352      	lsls	r2, r2, #13
     788:	432a      	orrs	r2, r5
     78a:	e7db      	b.n	744 <_sercom_get_async_baud_val+0x44>
     78c:	00002305 	.word	0x00002305
     790:	0000061d 	.word	0x0000061d

00000794 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     794:	b510      	push	{r4, lr}
     796:	b082      	sub	sp, #8
     798:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     79a:	4b0e      	ldr	r3, [pc, #56]	; (7d4 <sercom_set_gclk_generator+0x40>)
     79c:	781b      	ldrb	r3, [r3, #0]
     79e:	2b00      	cmp	r3, #0
     7a0:	d007      	beq.n	7b2 <sercom_set_gclk_generator+0x1e>
     7a2:	2900      	cmp	r1, #0
     7a4:	d105      	bne.n	7b2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <sercom_set_gclk_generator+0x40>)
     7a8:	785b      	ldrb	r3, [r3, #1]
     7aa:	4283      	cmp	r3, r0
     7ac:	d010      	beq.n	7d0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7ae:	201d      	movs	r0, #29
     7b0:	e00c      	b.n	7cc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     7b2:	a901      	add	r1, sp, #4
     7b4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7b6:	200c      	movs	r0, #12
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <sercom_set_gclk_generator+0x44>)
     7ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7bc:	200c      	movs	r0, #12
     7be:	4b07      	ldr	r3, [pc, #28]	; (7dc <sercom_set_gclk_generator+0x48>)
     7c0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     7c2:	4b04      	ldr	r3, [pc, #16]	; (7d4 <sercom_set_gclk_generator+0x40>)
     7c4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7c6:	2201      	movs	r2, #1
     7c8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7ca:	2000      	movs	r0, #0
}
     7cc:	b002      	add	sp, #8
     7ce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7d0:	2000      	movs	r0, #0
     7d2:	e7fb      	b.n	7cc <sercom_set_gclk_generator+0x38>
     7d4:	20000028 	.word	0x20000028
     7d8:	00001cf5 	.word	0x00001cf5
     7dc:	00001c69 	.word	0x00001c69

000007e0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7e0:	4b40      	ldr	r3, [pc, #256]	; (8e4 <_sercom_get_default_pad+0x104>)
     7e2:	4298      	cmp	r0, r3
     7e4:	d031      	beq.n	84a <_sercom_get_default_pad+0x6a>
     7e6:	d90a      	bls.n	7fe <_sercom_get_default_pad+0x1e>
     7e8:	4b3f      	ldr	r3, [pc, #252]	; (8e8 <_sercom_get_default_pad+0x108>)
     7ea:	4298      	cmp	r0, r3
     7ec:	d04d      	beq.n	88a <_sercom_get_default_pad+0xaa>
     7ee:	4b3f      	ldr	r3, [pc, #252]	; (8ec <_sercom_get_default_pad+0x10c>)
     7f0:	4298      	cmp	r0, r3
     7f2:	d05a      	beq.n	8aa <_sercom_get_default_pad+0xca>
     7f4:	4b3e      	ldr	r3, [pc, #248]	; (8f0 <_sercom_get_default_pad+0x110>)
     7f6:	4298      	cmp	r0, r3
     7f8:	d037      	beq.n	86a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     7fa:	2000      	movs	r0, #0
}
     7fc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     7fe:	4b3d      	ldr	r3, [pc, #244]	; (8f4 <_sercom_get_default_pad+0x114>)
     800:	4298      	cmp	r0, r3
     802:	d00c      	beq.n	81e <_sercom_get_default_pad+0x3e>
     804:	4b3c      	ldr	r3, [pc, #240]	; (8f8 <_sercom_get_default_pad+0x118>)
     806:	4298      	cmp	r0, r3
     808:	d1f7      	bne.n	7fa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     80a:	2901      	cmp	r1, #1
     80c:	d017      	beq.n	83e <_sercom_get_default_pad+0x5e>
     80e:	2900      	cmp	r1, #0
     810:	d05d      	beq.n	8ce <_sercom_get_default_pad+0xee>
     812:	2902      	cmp	r1, #2
     814:	d015      	beq.n	842 <_sercom_get_default_pad+0x62>
     816:	2903      	cmp	r1, #3
     818:	d015      	beq.n	846 <_sercom_get_default_pad+0x66>
	return 0;
     81a:	2000      	movs	r0, #0
     81c:	e7ee      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     81e:	2901      	cmp	r1, #1
     820:	d007      	beq.n	832 <_sercom_get_default_pad+0x52>
     822:	2900      	cmp	r1, #0
     824:	d051      	beq.n	8ca <_sercom_get_default_pad+0xea>
     826:	2902      	cmp	r1, #2
     828:	d005      	beq.n	836 <_sercom_get_default_pad+0x56>
     82a:	2903      	cmp	r1, #3
     82c:	d005      	beq.n	83a <_sercom_get_default_pad+0x5a>
	return 0;
     82e:	2000      	movs	r0, #0
     830:	e7e4      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     832:	4832      	ldr	r0, [pc, #200]	; (8fc <_sercom_get_default_pad+0x11c>)
     834:	e7e2      	b.n	7fc <_sercom_get_default_pad+0x1c>
     836:	4832      	ldr	r0, [pc, #200]	; (900 <_sercom_get_default_pad+0x120>)
     838:	e7e0      	b.n	7fc <_sercom_get_default_pad+0x1c>
     83a:	4832      	ldr	r0, [pc, #200]	; (904 <_sercom_get_default_pad+0x124>)
     83c:	e7de      	b.n	7fc <_sercom_get_default_pad+0x1c>
     83e:	4832      	ldr	r0, [pc, #200]	; (908 <_sercom_get_default_pad+0x128>)
     840:	e7dc      	b.n	7fc <_sercom_get_default_pad+0x1c>
     842:	4832      	ldr	r0, [pc, #200]	; (90c <_sercom_get_default_pad+0x12c>)
     844:	e7da      	b.n	7fc <_sercom_get_default_pad+0x1c>
     846:	4832      	ldr	r0, [pc, #200]	; (910 <_sercom_get_default_pad+0x130>)
     848:	e7d8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     84a:	2901      	cmp	r1, #1
     84c:	d007      	beq.n	85e <_sercom_get_default_pad+0x7e>
     84e:	2900      	cmp	r1, #0
     850:	d03f      	beq.n	8d2 <_sercom_get_default_pad+0xf2>
     852:	2902      	cmp	r1, #2
     854:	d005      	beq.n	862 <_sercom_get_default_pad+0x82>
     856:	2903      	cmp	r1, #3
     858:	d005      	beq.n	866 <_sercom_get_default_pad+0x86>
	return 0;
     85a:	2000      	movs	r0, #0
     85c:	e7ce      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     85e:	482d      	ldr	r0, [pc, #180]	; (914 <_sercom_get_default_pad+0x134>)
     860:	e7cc      	b.n	7fc <_sercom_get_default_pad+0x1c>
     862:	482d      	ldr	r0, [pc, #180]	; (918 <_sercom_get_default_pad+0x138>)
     864:	e7ca      	b.n	7fc <_sercom_get_default_pad+0x1c>
     866:	482d      	ldr	r0, [pc, #180]	; (91c <_sercom_get_default_pad+0x13c>)
     868:	e7c8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     86a:	2901      	cmp	r1, #1
     86c:	d007      	beq.n	87e <_sercom_get_default_pad+0x9e>
     86e:	2900      	cmp	r1, #0
     870:	d031      	beq.n	8d6 <_sercom_get_default_pad+0xf6>
     872:	2902      	cmp	r1, #2
     874:	d005      	beq.n	882 <_sercom_get_default_pad+0xa2>
     876:	2903      	cmp	r1, #3
     878:	d005      	beq.n	886 <_sercom_get_default_pad+0xa6>
	return 0;
     87a:	2000      	movs	r0, #0
     87c:	e7be      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     87e:	4828      	ldr	r0, [pc, #160]	; (920 <_sercom_get_default_pad+0x140>)
     880:	e7bc      	b.n	7fc <_sercom_get_default_pad+0x1c>
     882:	4828      	ldr	r0, [pc, #160]	; (924 <_sercom_get_default_pad+0x144>)
     884:	e7ba      	b.n	7fc <_sercom_get_default_pad+0x1c>
     886:	4828      	ldr	r0, [pc, #160]	; (928 <_sercom_get_default_pad+0x148>)
     888:	e7b8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     88a:	2901      	cmp	r1, #1
     88c:	d007      	beq.n	89e <_sercom_get_default_pad+0xbe>
     88e:	2900      	cmp	r1, #0
     890:	d023      	beq.n	8da <_sercom_get_default_pad+0xfa>
     892:	2902      	cmp	r1, #2
     894:	d005      	beq.n	8a2 <_sercom_get_default_pad+0xc2>
     896:	2903      	cmp	r1, #3
     898:	d005      	beq.n	8a6 <_sercom_get_default_pad+0xc6>
	return 0;
     89a:	2000      	movs	r0, #0
     89c:	e7ae      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     89e:	4823      	ldr	r0, [pc, #140]	; (92c <_sercom_get_default_pad+0x14c>)
     8a0:	e7ac      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8a2:	4823      	ldr	r0, [pc, #140]	; (930 <_sercom_get_default_pad+0x150>)
     8a4:	e7aa      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8a6:	4823      	ldr	r0, [pc, #140]	; (934 <_sercom_get_default_pad+0x154>)
     8a8:	e7a8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8aa:	2901      	cmp	r1, #1
     8ac:	d007      	beq.n	8be <_sercom_get_default_pad+0xde>
     8ae:	2900      	cmp	r1, #0
     8b0:	d015      	beq.n	8de <_sercom_get_default_pad+0xfe>
     8b2:	2902      	cmp	r1, #2
     8b4:	d005      	beq.n	8c2 <_sercom_get_default_pad+0xe2>
     8b6:	2903      	cmp	r1, #3
     8b8:	d005      	beq.n	8c6 <_sercom_get_default_pad+0xe6>
	return 0;
     8ba:	2000      	movs	r0, #0
     8bc:	e79e      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8be:	481e      	ldr	r0, [pc, #120]	; (938 <_sercom_get_default_pad+0x158>)
     8c0:	e79c      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8c2:	481e      	ldr	r0, [pc, #120]	; (93c <_sercom_get_default_pad+0x15c>)
     8c4:	e79a      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8c6:	481e      	ldr	r0, [pc, #120]	; (940 <_sercom_get_default_pad+0x160>)
     8c8:	e798      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8ca:	481e      	ldr	r0, [pc, #120]	; (944 <_sercom_get_default_pad+0x164>)
     8cc:	e796      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8ce:	2003      	movs	r0, #3
     8d0:	e794      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8d2:	481d      	ldr	r0, [pc, #116]	; (948 <_sercom_get_default_pad+0x168>)
     8d4:	e792      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8d6:	481d      	ldr	r0, [pc, #116]	; (94c <_sercom_get_default_pad+0x16c>)
     8d8:	e790      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8da:	481d      	ldr	r0, [pc, #116]	; (950 <_sercom_get_default_pad+0x170>)
     8dc:	e78e      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8de:	481d      	ldr	r0, [pc, #116]	; (954 <_sercom_get_default_pad+0x174>)
     8e0:	e78c      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	42001000 	.word	0x42001000
     8e8:	42001800 	.word	0x42001800
     8ec:	42001c00 	.word	0x42001c00
     8f0:	42001400 	.word	0x42001400
     8f4:	42000800 	.word	0x42000800
     8f8:	42000c00 	.word	0x42000c00
     8fc:	00050003 	.word	0x00050003
     900:	00060003 	.word	0x00060003
     904:	00070003 	.word	0x00070003
     908:	00010003 	.word	0x00010003
     90c:	001e0003 	.word	0x001e0003
     910:	001f0003 	.word	0x001f0003
     914:	00090003 	.word	0x00090003
     918:	000a0003 	.word	0x000a0003
     91c:	000b0003 	.word	0x000b0003
     920:	00110003 	.word	0x00110003
     924:	00120003 	.word	0x00120003
     928:	00130003 	.word	0x00130003
     92c:	000d0003 	.word	0x000d0003
     930:	000e0003 	.word	0x000e0003
     934:	000f0003 	.word	0x000f0003
     938:	00170003 	.word	0x00170003
     93c:	00180003 	.word	0x00180003
     940:	00190003 	.word	0x00190003
     944:	00040003 	.word	0x00040003
     948:	00080003 	.word	0x00080003
     94c:	00100003 	.word	0x00100003
     950:	000c0003 	.word	0x000c0003
     954:	00160003 	.word	0x00160003

00000958 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     958:	b530      	push	{r4, r5, lr}
     95a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     95c:	4b0b      	ldr	r3, [pc, #44]	; (98c <_sercom_get_sercom_inst_index+0x34>)
     95e:	466a      	mov	r2, sp
     960:	cb32      	ldmia	r3!, {r1, r4, r5}
     962:	c232      	stmia	r2!, {r1, r4, r5}
     964:	cb32      	ldmia	r3!, {r1, r4, r5}
     966:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     968:	9b00      	ldr	r3, [sp, #0]
     96a:	4283      	cmp	r3, r0
     96c:	d00b      	beq.n	986 <_sercom_get_sercom_inst_index+0x2e>
     96e:	2301      	movs	r3, #1
     970:	009a      	lsls	r2, r3, #2
     972:	4669      	mov	r1, sp
     974:	5852      	ldr	r2, [r2, r1]
     976:	4282      	cmp	r2, r0
     978:	d006      	beq.n	988 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     97a:	3301      	adds	r3, #1
     97c:	2b06      	cmp	r3, #6
     97e:	d1f7      	bne.n	970 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     980:	2000      	movs	r0, #0
}
     982:	b007      	add	sp, #28
     984:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     986:	2300      	movs	r3, #0
			return i;
     988:	b2d8      	uxtb	r0, r3
     98a:	e7fa      	b.n	982 <_sercom_get_sercom_inst_index+0x2a>
     98c:	000024e8 	.word	0x000024e8

00000990 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     990:	4770      	bx	lr
	...

00000994 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     994:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     996:	4b0a      	ldr	r3, [pc, #40]	; (9c0 <_sercom_set_handler+0x2c>)
     998:	781b      	ldrb	r3, [r3, #0]
     99a:	2b00      	cmp	r3, #0
     99c:	d10c      	bne.n	9b8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     99e:	4f09      	ldr	r7, [pc, #36]	; (9c4 <_sercom_set_handler+0x30>)
     9a0:	4e09      	ldr	r6, [pc, #36]	; (9c8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     9a2:	4d0a      	ldr	r5, [pc, #40]	; (9cc <_sercom_set_handler+0x38>)
     9a4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     9a6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     9a8:	195a      	adds	r2, r3, r5
     9aa:	6014      	str	r4, [r2, #0]
     9ac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9ae:	2b18      	cmp	r3, #24
     9b0:	d1f9      	bne.n	9a6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     9b2:	2201      	movs	r2, #1
     9b4:	4b02      	ldr	r3, [pc, #8]	; (9c0 <_sercom_set_handler+0x2c>)
     9b6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     9b8:	0080      	lsls	r0, r0, #2
     9ba:	4b02      	ldr	r3, [pc, #8]	; (9c4 <_sercom_set_handler+0x30>)
     9bc:	50c1      	str	r1, [r0, r3]
}
     9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c0:	2000002a 	.word	0x2000002a
     9c4:	2000002c 	.word	0x2000002c
     9c8:	00000991 	.word	0x00000991
     9cc:	2000008c 	.word	0x2000008c

000009d0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     9d0:	b500      	push	{lr}
     9d2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9d4:	2307      	movs	r3, #7
     9d6:	466a      	mov	r2, sp
     9d8:	7013      	strb	r3, [r2, #0]
     9da:	3301      	adds	r3, #1
     9dc:	7053      	strb	r3, [r2, #1]
     9de:	3301      	adds	r3, #1
     9e0:	7093      	strb	r3, [r2, #2]
     9e2:	3301      	adds	r3, #1
     9e4:	70d3      	strb	r3, [r2, #3]
     9e6:	3301      	adds	r3, #1
     9e8:	7113      	strb	r3, [r2, #4]
     9ea:	3301      	adds	r3, #1
     9ec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9ee:	4b03      	ldr	r3, [pc, #12]	; (9fc <_sercom_get_interrupt_vector+0x2c>)
     9f0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9f2:	466b      	mov	r3, sp
     9f4:	5618      	ldrsb	r0, [r3, r0]
}
     9f6:	b003      	add	sp, #12
     9f8:	bd00      	pop	{pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	00000959 	.word	0x00000959

00000a00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a00:	b510      	push	{r4, lr}
     a02:	4b02      	ldr	r3, [pc, #8]	; (a0c <SERCOM0_Handler+0xc>)
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	2000      	movs	r0, #0
     a08:	4798      	blx	r3
     a0a:	bd10      	pop	{r4, pc}
     a0c:	2000002c 	.word	0x2000002c

00000a10 <SERCOM1_Handler>:
     a10:	b510      	push	{r4, lr}
     a12:	4b02      	ldr	r3, [pc, #8]	; (a1c <SERCOM1_Handler+0xc>)
     a14:	685b      	ldr	r3, [r3, #4]
     a16:	2001      	movs	r0, #1
     a18:	4798      	blx	r3
     a1a:	bd10      	pop	{r4, pc}
     a1c:	2000002c 	.word	0x2000002c

00000a20 <SERCOM2_Handler>:
     a20:	b510      	push	{r4, lr}
     a22:	4b02      	ldr	r3, [pc, #8]	; (a2c <SERCOM2_Handler+0xc>)
     a24:	689b      	ldr	r3, [r3, #8]
     a26:	2002      	movs	r0, #2
     a28:	4798      	blx	r3
     a2a:	bd10      	pop	{r4, pc}
     a2c:	2000002c 	.word	0x2000002c

00000a30 <SERCOM3_Handler>:
     a30:	b510      	push	{r4, lr}
     a32:	4b02      	ldr	r3, [pc, #8]	; (a3c <SERCOM3_Handler+0xc>)
     a34:	68db      	ldr	r3, [r3, #12]
     a36:	2003      	movs	r0, #3
     a38:	4798      	blx	r3
     a3a:	bd10      	pop	{r4, pc}
     a3c:	2000002c 	.word	0x2000002c

00000a40 <SERCOM4_Handler>:
     a40:	b510      	push	{r4, lr}
     a42:	4b02      	ldr	r3, [pc, #8]	; (a4c <SERCOM4_Handler+0xc>)
     a44:	691b      	ldr	r3, [r3, #16]
     a46:	2004      	movs	r0, #4
     a48:	4798      	blx	r3
     a4a:	bd10      	pop	{r4, pc}
     a4c:	2000002c 	.word	0x2000002c

00000a50 <SERCOM5_Handler>:
     a50:	b510      	push	{r4, lr}
     a52:	4b02      	ldr	r3, [pc, #8]	; (a5c <SERCOM5_Handler+0xc>)
     a54:	695b      	ldr	r3, [r3, #20]
     a56:	2005      	movs	r0, #5
     a58:	4798      	blx	r3
     a5a:	bd10      	pop	{r4, pc}
     a5c:	2000002c 	.word	0x2000002c

00000a60 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     a60:	b5f0      	push	{r4, r5, r6, r7, lr}
     a62:	46d6      	mov	lr, sl
     a64:	464f      	mov	r7, r9
     a66:	b580      	push	{r7, lr}
     a68:	b08b      	sub	sp, #44	; 0x2c
     a6a:	4681      	mov	r9, r0
     a6c:	000f      	movs	r7, r1
     a6e:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     a70:	0003      	movs	r3, r0
     a72:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     a74:	680b      	ldr	r3, [r1, #0]
     a76:	079b      	lsls	r3, r3, #30
     a78:	d409      	bmi.n	a8e <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     a7a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     a7c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     a7e:	07db      	lsls	r3, r3, #31
     a80:	d400      	bmi.n	a84 <spi_init+0x24>
     a82:	e0a4      	b.n	bce <spi_init+0x16e>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     a84:	b00b      	add	sp, #44	; 0x2c
     a86:	bc0c      	pop	{r2, r3}
     a88:	4691      	mov	r9, r2
     a8a:	469a      	mov	sl, r3
     a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     a8e:	6a53      	ldr	r3, [r2, #36]	; 0x24
     a90:	9305      	str	r3, [sp, #20]
     a92:	6a93      	ldr	r3, [r2, #40]	; 0x28
     a94:	9306      	str	r3, [sp, #24]
     a96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     a98:	9307      	str	r3, [sp, #28]
     a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     a9c:	9308      	str	r3, [sp, #32]
     a9e:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa0:	ab05      	add	r3, sp, #20
     aa2:	9301      	str	r3, [sp, #4]
     aa4:	e00a      	b.n	abc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     aa6:	0038      	movs	r0, r7
     aa8:	4ba1      	ldr	r3, [pc, #644]	; (d30 <spi_init+0x2d0>)
     aaa:	4798      	blx	r3
     aac:	e00c      	b.n	ac8 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     aae:	230f      	movs	r3, #15
     ab0:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     ab2:	4281      	cmp	r1, r0
     ab4:	d12d      	bne.n	b12 <spi_init+0xb2>
     ab6:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ab8:	2e04      	cmp	r6, #4
     aba:	d02f      	beq.n	b1c <spi_init+0xbc>
     abc:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     abe:	00b3      	lsls	r3, r6, #2
     ac0:	9a01      	ldr	r2, [sp, #4]
     ac2:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     ac4:	2800      	cmp	r0, #0
     ac6:	d0ee      	beq.n	aa6 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     ac8:	1c43      	adds	r3, r0, #1
     aca:	d0f4      	beq.n	ab6 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     acc:	0401      	lsls	r1, r0, #16
     ace:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     ad0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     ad2:	b2c3      	uxtb	r3, r0
     ad4:	469c      	mov	ip, r3
		return NULL;
     ad6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ad8:	0602      	lsls	r2, r0, #24
     ada:	d405      	bmi.n	ae8 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     adc:	4663      	mov	r3, ip
     ade:	095b      	lsrs	r3, r3, #5
     ae0:	01db      	lsls	r3, r3, #7
     ae2:	4a94      	ldr	r2, [pc, #592]	; (d34 <spi_init+0x2d4>)
     ae4:	4692      	mov	sl, r2
     ae6:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     ae8:	221f      	movs	r2, #31
     aea:	4660      	mov	r0, ip
     aec:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     aee:	1898      	adds	r0, r3, r2
     af0:	3040      	adds	r0, #64	; 0x40
     af2:	7800      	ldrb	r0, [r0, #0]
     af4:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     af6:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     af8:	4655      	mov	r5, sl
     afa:	07ed      	lsls	r5, r5, #31
     afc:	d5d9      	bpl.n	ab2 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     afe:	0852      	lsrs	r2, r2, #1
     b00:	189b      	adds	r3, r3, r2
     b02:	3330      	adds	r3, #48	; 0x30
     b04:	7818      	ldrb	r0, [r3, #0]
     b06:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     b08:	4663      	mov	r3, ip
     b0a:	07db      	lsls	r3, r3, #31
     b0c:	d5cf      	bpl.n	aae <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     b0e:	0900      	lsrs	r0, r0, #4
     b10:	e7cf      	b.n	ab2 <spi_init+0x52>
			module->hw = NULL;
     b12:	2300      	movs	r3, #0
     b14:	464a      	mov	r2, r9
     b16:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     b18:	201c      	movs	r0, #28
     b1a:	e7b3      	b.n	a84 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     b1c:	200c      	movs	r0, #12
     b1e:	4b86      	ldr	r3, [pc, #536]	; (d38 <spi_init+0x2d8>)
     b20:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     b22:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     b24:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     b26:	2a01      	cmp	r2, #1
     b28:	d015      	beq.n	b56 <spi_init+0xf6>
	if (config->mode == SPI_MODE_SLAVE) {
     b2a:	7821      	ldrb	r1, [r4, #0]
     b2c:	2900      	cmp	r1, #0
     b2e:	d126      	bne.n	b7e <spi_init+0x11e>
		if (spi_module->CTRLA.reg != addr) {
     b30:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     b32:	7ee2      	ldrb	r2, [r4, #27]
     b34:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     b36:	7ea0      	ldrb	r0, [r4, #26]
     b38:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
     b3a:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
     b3c:	429a      	cmp	r2, r3
     b3e:	d1a1      	bne.n	a84 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
     b40:	6963      	ldr	r3, [r4, #20]
		ctrlb |= config->mode_specific.slave.address_mode;
     b42:	8b22      	ldrh	r2, [r4, #24]
		if (config->mode_specific.slave.preload_enable) {
     b44:	7f20      	ldrb	r0, [r4, #28]
     b46:	2800      	cmp	r0, #0
     b48:	d001      	beq.n	b4e <spi_init+0xee>
     b4a:	2040      	movs	r0, #64	; 0x40
     b4c:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     b4e:	2008      	movs	r0, #8
     b50:	4303      	orrs	r3, r0
     b52:	431d      	orrs	r5, r3
     b54:	e014      	b.n	b80 <spi_init+0x120>
		enum status_code error_code = _sercom_get_sync_baud_val(
     b56:	aa04      	add	r2, sp, #16
     b58:	0001      	movs	r1, r0
     b5a:	6960      	ldr	r0, [r4, #20]
     b5c:	4b77      	ldr	r3, [pc, #476]	; (d3c <spi_init+0x2dc>)
     b5e:	4798      	blx	r3
     b60:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     b62:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     b64:	2b00      	cmp	r3, #0
     b66:	d000      	beq.n	b6a <spi_init+0x10a>
     b68:	e78c      	b.n	a84 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     b6a:	7abb      	ldrb	r3, [r7, #10]
     b6c:	b2db      	uxtb	r3, r3
     b6e:	aa04      	add	r2, sp, #16
     b70:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     b72:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     b74:	429a      	cmp	r2, r3
     b76:	d000      	beq.n	b7a <spi_init+0x11a>
     b78:	e784      	b.n	a84 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     b7a:	350c      	adds	r5, #12
     b7c:	e7d5      	b.n	b2a <spi_init+0xca>
	uint32_t ctrlb = 0;
     b7e:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
     b80:	6863      	ldr	r3, [r4, #4]
     b82:	68a0      	ldr	r0, [r4, #8]
     b84:	4303      	orrs	r3, r0
     b86:	68e0      	ldr	r0, [r4, #12]
     b88:	4303      	orrs	r3, r0
     b8a:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     b8c:	7c20      	ldrb	r0, [r4, #16]
     b8e:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
     b90:	7c60      	ldrb	r0, [r4, #17]
     b92:	2800      	cmp	r0, #0
     b94:	d001      	beq.n	b9a <spi_init+0x13a>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b96:	2080      	movs	r0, #128	; 0x80
     b98:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
     b9a:	7ca0      	ldrb	r0, [r4, #18]
     b9c:	2800      	cmp	r0, #0
     b9e:	d002      	beq.n	ba6 <spi_init+0x146>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ba0:	2080      	movs	r0, #128	; 0x80
     ba2:	0280      	lsls	r0, r0, #10
     ba4:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
     ba6:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     ba8:	2502      	movs	r5, #2
     baa:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
     bac:	4283      	cmp	r3, r0
     bae:	d004      	beq.n	bba <spi_init+0x15a>
	module->hw = NULL;
     bb0:	2300      	movs	r3, #0
     bb2:	464a      	mov	r2, r9
     bb4:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     bb6:	201c      	movs	r0, #28
     bb8:	e764      	b.n	a84 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
     bba:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     bbc:	4293      	cmp	r3, r2
     bbe:	d1f7      	bne.n	bb0 <spi_init+0x150>
		module->mode           = config->mode;
     bc0:	464b      	mov	r3, r9
     bc2:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
     bc4:	7c23      	ldrb	r3, [r4, #16]
     bc6:	464a      	mov	r2, r9
     bc8:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     bca:	2000      	movs	r0, #0
     bcc:	e75a      	b.n	a84 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bce:	0008      	movs	r0, r1
     bd0:	4b5b      	ldr	r3, [pc, #364]	; (d40 <spi_init+0x2e0>)
     bd2:	4798      	blx	r3
     bd4:	4a5b      	ldr	r2, [pc, #364]	; (d44 <spi_init+0x2e4>)
     bd6:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     bd8:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bda:	2301      	movs	r3, #1
     bdc:	40ab      	lsls	r3, r5
     bde:	430b      	orrs	r3, r1
     be0:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     be2:	a909      	add	r1, sp, #36	; 0x24
     be4:	2620      	movs	r6, #32
     be6:	5da3      	ldrb	r3, [r4, r6]
     be8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bea:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     bec:	b2c5      	uxtb	r5, r0
     bee:	0028      	movs	r0, r5
     bf0:	4b55      	ldr	r3, [pc, #340]	; (d48 <spi_init+0x2e8>)
     bf2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bf4:	0028      	movs	r0, r5
     bf6:	4b55      	ldr	r3, [pc, #340]	; (d4c <spi_init+0x2ec>)
     bf8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bfa:	5da0      	ldrb	r0, [r4, r6]
     bfc:	2100      	movs	r1, #0
     bfe:	4b54      	ldr	r3, [pc, #336]	; (d50 <spi_init+0x2f0>)
     c00:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     c02:	7823      	ldrb	r3, [r4, #0]
     c04:	2b01      	cmp	r3, #1
     c06:	d020      	beq.n	c4a <spi_init+0x1ea>
	if (config->mode == SPI_MODE_SLAVE) {
     c08:	7823      	ldrb	r3, [r4, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d103      	bne.n	c16 <spi_init+0x1b6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     c0e:	683b      	ldr	r3, [r7, #0]
     c10:	2208      	movs	r2, #8
     c12:	4313      	orrs	r3, r2
     c14:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     c16:	464b      	mov	r3, r9
     c18:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c1a:	ab04      	add	r3, sp, #16
     c1c:	2280      	movs	r2, #128	; 0x80
     c1e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c20:	2200      	movs	r2, #0
     c22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c24:	2101      	movs	r1, #1
     c26:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     c28:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     c2a:	7823      	ldrb	r3, [r4, #0]
     c2c:	2b00      	cmp	r3, #0
     c2e:	d101      	bne.n	c34 <spi_init+0x1d4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c30:	ab04      	add	r3, sp, #16
     c32:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c36:	9305      	str	r3, [sp, #20]
     c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c3a:	9306      	str	r3, [sp, #24]
     c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     c3e:	9307      	str	r3, [sp, #28]
     c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
     c42:	9308      	str	r3, [sp, #32]
     c44:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c46:	ad05      	add	r5, sp, #20
     c48:	e011      	b.n	c6e <spi_init+0x20e>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c4a:	683b      	ldr	r3, [r7, #0]
     c4c:	220c      	movs	r2, #12
     c4e:	4313      	orrs	r3, r2
     c50:	603b      	str	r3, [r7, #0]
     c52:	e7d9      	b.n	c08 <spi_init+0x1a8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c54:	0030      	movs	r0, r6
     c56:	4b36      	ldr	r3, [pc, #216]	; (d30 <spi_init+0x2d0>)
     c58:	4798      	blx	r3
     c5a:	e00d      	b.n	c78 <spi_init+0x218>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c5c:	a904      	add	r1, sp, #16
     c5e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c60:	0c00      	lsrs	r0, r0, #16
     c62:	b2c0      	uxtb	r0, r0
     c64:	4b3b      	ldr	r3, [pc, #236]	; (d54 <spi_init+0x2f4>)
     c66:	4798      	blx	r3
     c68:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     c6a:	2f04      	cmp	r7, #4
     c6c:	d007      	beq.n	c7e <spi_init+0x21e>
     c6e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c70:	00bb      	lsls	r3, r7, #2
     c72:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     c74:	2800      	cmp	r0, #0
     c76:	d0ed      	beq.n	c54 <spi_init+0x1f4>
		if (current_pinmux != PINMUX_UNUSED) {
     c78:	1c43      	adds	r3, r0, #1
     c7a:	d1ef      	bne.n	c5c <spi_init+0x1fc>
     c7c:	e7f4      	b.n	c68 <spi_init+0x208>
	module->mode             = config->mode;
     c7e:	7823      	ldrb	r3, [r4, #0]
     c80:	464a      	mov	r2, r9
     c82:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     c84:	7c23      	ldrb	r3, [r4, #16]
     c86:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     c88:	7ca3      	ldrb	r3, [r4, #18]
     c8a:	71d3      	strb	r3, [r2, #7]
	uint16_t baud = 0;
     c8c:	2200      	movs	r2, #0
     c8e:	ab02      	add	r3, sp, #8
     c90:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     c92:	7823      	ldrb	r3, [r4, #0]
     c94:	2b01      	cmp	r3, #1
     c96:	d012      	beq.n	cbe <spi_init+0x25e>
	if (config->mode == SPI_MODE_SLAVE) {
     c98:	7823      	ldrb	r3, [r4, #0]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d127      	bne.n	cee <spi_init+0x28e>
		ctrla = config->mode_specific.slave.frame_format;
     c9e:	6960      	ldr	r0, [r4, #20]
		ctrlb = config->mode_specific.slave.address_mode;
     ca0:	8b22      	ldrh	r2, [r4, #24]
		spi_module->ADDR.reg |=
     ca2:	6973      	ldr	r3, [r6, #20]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     ca4:	7ee1      	ldrb	r1, [r4, #27]
     ca6:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     ca8:	7ea5      	ldrb	r5, [r4, #26]
     caa:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     cac:	4319      	orrs	r1, r3
     cae:	6171      	str	r1, [r6, #20]
		if (config->mode_specific.slave.preload_enable) {
     cb0:	7f23      	ldrb	r3, [r4, #28]
		ctrlb = config->mode_specific.slave.address_mode;
     cb2:	0011      	movs	r1, r2
		if (config->mode_specific.slave.preload_enable) {
     cb4:	2b00      	cmp	r3, #0
     cb6:	d01c      	beq.n	cf2 <spi_init+0x292>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     cb8:	2140      	movs	r1, #64	; 0x40
     cba:	4311      	orrs	r1, r2
     cbc:	e019      	b.n	cf2 <spi_init+0x292>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cbe:	464b      	mov	r3, r9
     cc0:	6818      	ldr	r0, [r3, #0]
     cc2:	4b1f      	ldr	r3, [pc, #124]	; (d40 <spi_init+0x2e0>)
     cc4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cc6:	300d      	adds	r0, #13
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     cc8:	b2c0      	uxtb	r0, r0
     cca:	4b1b      	ldr	r3, [pc, #108]	; (d38 <spi_init+0x2d8>)
     ccc:	4798      	blx	r3
     cce:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     cd0:	ab02      	add	r3, sp, #8
     cd2:	1d9a      	adds	r2, r3, #6
     cd4:	6960      	ldr	r0, [r4, #20]
     cd6:	4b19      	ldr	r3, [pc, #100]	; (d3c <spi_init+0x2dc>)
     cd8:	4798      	blx	r3
     cda:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     cdc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     cde:	2b00      	cmp	r3, #0
     ce0:	d000      	beq.n	ce4 <spi_init+0x284>
     ce2:	e6cf      	b.n	a84 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     ce4:	ab02      	add	r3, sp, #8
     ce6:	3306      	adds	r3, #6
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	72b3      	strb	r3, [r6, #10]
     cec:	e7d4      	b.n	c98 <spi_init+0x238>
	uint32_t ctrlb = 0;
     cee:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     cf0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     cf2:	6863      	ldr	r3, [r4, #4]
     cf4:	68a2      	ldr	r2, [r4, #8]
     cf6:	4313      	orrs	r3, r2
     cf8:	68e2      	ldr	r2, [r4, #12]
     cfa:	4313      	orrs	r3, r2
     cfc:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     cfe:	7c22      	ldrb	r2, [r4, #16]
     d00:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     d02:	7c61      	ldrb	r1, [r4, #17]
     d04:	2900      	cmp	r1, #0
     d06:	d103      	bne.n	d10 <spi_init+0x2b0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d08:	4913      	ldr	r1, [pc, #76]	; (d58 <spi_init+0x2f8>)
     d0a:	7889      	ldrb	r1, [r1, #2]
     d0c:	0789      	lsls	r1, r1, #30
     d0e:	d501      	bpl.n	d14 <spi_init+0x2b4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     d10:	2180      	movs	r1, #128	; 0x80
     d12:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     d14:	7ca1      	ldrb	r1, [r4, #18]
     d16:	2900      	cmp	r1, #0
     d18:	d002      	beq.n	d20 <spi_init+0x2c0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     d1a:	2180      	movs	r1, #128	; 0x80
     d1c:	0289      	lsls	r1, r1, #10
     d1e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     d20:	6831      	ldr	r1, [r6, #0]
     d22:	430b      	orrs	r3, r1
     d24:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     d26:	6873      	ldr	r3, [r6, #4]
     d28:	431a      	orrs	r2, r3
     d2a:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
     d2c:	2000      	movs	r0, #0
     d2e:	e6a9      	b.n	a84 <spi_init+0x24>
     d30:	000007e1 	.word	0x000007e1
     d34:	41004400 	.word	0x41004400
     d38:	00001d11 	.word	0x00001d11
     d3c:	000006d7 	.word	0x000006d7
     d40:	00000959 	.word	0x00000959
     d44:	40000400 	.word	0x40000400
     d48:	00001cf5 	.word	0x00001cf5
     d4c:	00001c69 	.word	0x00001c69
     d50:	00000795 	.word	0x00000795
     d54:	00001ded 	.word	0x00001ded
     d58:	41002000 	.word	0x41002000

00000d5c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5e:	46d6      	mov	lr, sl
     d60:	464f      	mov	r7, r9
     d62:	4646      	mov	r6, r8
     d64:	b5c0      	push	{r6, r7, lr}
     d66:	b082      	sub	sp, #8
     d68:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     d6a:	2717      	movs	r7, #23
	if (length == 0) {
     d6c:	2a00      	cmp	r2, #0
     d6e:	d074      	beq.n	e5a <spi_read_buffer_wait+0xfe>
	}

	if (!(module->receiver_enabled)) {
     d70:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
     d72:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
     d74:	2900      	cmp	r1, #0
     d76:	d070      	beq.n	e5a <spi_read_buffer_wait+0xfe>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     d78:	7941      	ldrb	r1, [r0, #5]
     d7a:	2900      	cmp	r1, #0
     d7c:	d103      	bne.n	d86 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d7e:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     d80:	7b8c      	ldrb	r4, [r1, #14]
     d82:	07a4      	lsls	r4, r4, #30
     d84:	d40b      	bmi.n	d9e <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
     d86:	3a01      	subs	r2, #1
     d88:	b294      	uxth	r4, r2
     d8a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     d8c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     d8e:	2102      	movs	r1, #2
     d90:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
     d92:	3901      	subs	r1, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d94:	05db      	lsls	r3, r3, #23
     d96:	0ddb      	lsrs	r3, r3, #23
     d98:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     d9a:	46c4      	mov	ip, r8
     d9c:	e038      	b.n	e10 <spi_read_buffer_wait+0xb4>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     d9e:	2402      	movs	r4, #2
     da0:	738c      	strb	r4, [r1, #14]
     da2:	e7f0      	b.n	d86 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
     da4:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     da6:	7bab      	ldrb	r3, [r5, #14]
			while (!spi_is_ready_to_write(module)) {
     da8:	420b      	tst	r3, r1
     daa:	d0fc      	beq.n	da6 <spi_read_buffer_wait+0x4a>
     dac:	7bab      	ldrb	r3, [r5, #14]
	if (!spi_is_ready_to_write(module)) {
     dae:	420b      	tst	r3, r1
     db0:	d009      	beq.n	dc6 <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     db2:	4653      	mov	r3, sl
     db4:	832b      	strh	r3, [r5, #24]
     db6:	e02e      	b.n	e16 <spi_read_buffer_wait+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     db8:	7bbb      	ldrb	r3, [r7, #14]
			if (spi_is_write_complete(module)) {
     dba:	464d      	mov	r5, r9
     dbc:	422b      	tst	r3, r5
     dbe:	d139      	bne.n	e34 <spi_read_buffer_wait+0xd8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     dc0:	7bbb      	ldrb	r3, [r7, #14]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
     dc2:	4213      	tst	r3, r2
     dc4:	d046      	beq.n	e54 <spi_read_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
     dc6:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     dc8:	7bab      	ldrb	r3, [r5, #14]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     dca:	4213      	tst	r3, r2
     dcc:	d0fc      	beq.n	dc8 <spi_read_buffer_wait+0x6c>
     dce:	7bab      	ldrb	r3, [r5, #14]
	if (!spi_is_ready_to_read(module)) {
     dd0:	4213      	tst	r3, r2
     dd2:	d041      	beq.n	e58 <spi_read_buffer_wait+0xfc>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     dd4:	8a2b      	ldrh	r3, [r5, #16]
	enum status_code retval = STATUS_OK;
     dd6:	2700      	movs	r7, #0
     dd8:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     dda:	4213      	tst	r3, r2
     ddc:	d002      	beq.n	de4 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     dde:	822a      	strh	r2, [r5, #16]
		retval = STATUS_ERR_OVERFLOW;
     de0:	231e      	movs	r3, #30
     de2:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     de4:	7983      	ldrb	r3, [r0, #6]
     de6:	2b01      	cmp	r3, #1
     de8:	d028      	beq.n	e3c <spi_read_buffer_wait+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     dea:	8b2d      	ldrh	r5, [r5, #24]
     dec:	23ff      	movs	r3, #255	; 0xff
     dee:	402b      	ands	r3, r5
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     df0:	9d01      	ldr	r5, [sp, #4]
     df2:	2d00      	cmp	r5, #0
     df4:	d138      	bne.n	e68 <spi_read_buffer_wait+0x10c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     df6:	1c77      	adds	r7, r6, #1
     df8:	b2bf      	uxth	r7, r7
     dfa:	4665      	mov	r5, ip
     dfc:	55ab      	strb	r3, [r5, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dfe:	7985      	ldrb	r5, [r0, #6]
     e00:	2d01      	cmp	r5, #1
     e02:	d01f      	beq.n	e44 <spi_read_buffer_wait+0xe8>
		rx_data[rx_pos++] = received_data;
     e04:	003e      	movs	r6, r7
	while (length--) {
     e06:	3c01      	subs	r4, #1
     e08:	b2a4      	uxth	r4, r4
     e0a:	4d18      	ldr	r5, [pc, #96]	; (e6c <spi_read_buffer_wait+0x110>)
     e0c:	42ac      	cmp	r4, r5
     e0e:	d01f      	beq.n	e50 <spi_read_buffer_wait+0xf4>
		if (module->mode == SPI_MODE_MASTER) {
     e10:	7943      	ldrb	r3, [r0, #5]
     e12:	2b01      	cmp	r3, #1
     e14:	d0c6      	beq.n	da4 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
     e16:	7943      	ldrb	r3, [r0, #5]
     e18:	2b00      	cmp	r3, #0
     e1a:	d1d4      	bne.n	dc6 <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e1c:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e1e:	7bbb      	ldrb	r3, [r7, #14]
				if (spi_is_ready_to_read(module)) {
     e20:	4213      	tst	r3, r2
     e22:	d1c9      	bne.n	db8 <spi_read_buffer_wait+0x5c>
     e24:	4b12      	ldr	r3, [pc, #72]	; (e70 <spi_read_buffer_wait+0x114>)
     e26:	7bbd      	ldrb	r5, [r7, #14]
     e28:	4215      	tst	r5, r2
     e2a:	d1c5      	bne.n	db8 <spi_read_buffer_wait+0x5c>
     e2c:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e2e:	2b00      	cmp	r3, #0
     e30:	d1f9      	bne.n	e26 <spi_read_buffer_wait+0xca>
     e32:	e7c1      	b.n	db8 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e34:	2302      	movs	r3, #2
     e36:	73bb      	strb	r3, [r7, #14]
				return STATUS_ABORTED;
     e38:	2704      	movs	r7, #4
     e3a:	e00e      	b.n	e5a <spi_read_buffer_wait+0xfe>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e3c:	8b2d      	ldrh	r5, [r5, #24]
     e3e:	05ed      	lsls	r5, r5, #23
     e40:	0deb      	lsrs	r3, r5, #23
     e42:	e7d5      	b.n	df0 <spi_read_buffer_wait+0x94>
			rx_data[rx_pos++] = (received_data >> 8);
     e44:	3602      	adds	r6, #2
     e46:	b2b6      	uxth	r6, r6
     e48:	0a1d      	lsrs	r5, r3, #8
     e4a:	4663      	mov	r3, ip
     e4c:	55dd      	strb	r5, [r3, r7]
     e4e:	e7da      	b.n	e06 <spi_read_buffer_wait+0xaa>
     e50:	9f01      	ldr	r7, [sp, #4]
     e52:	e002      	b.n	e5a <spi_read_buffer_wait+0xfe>
				return STATUS_ERR_TIMEOUT;
     e54:	2712      	movs	r7, #18
     e56:	e000      	b.n	e5a <spi_read_buffer_wait+0xfe>
		return STATUS_ERR_IO;
     e58:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
     e5a:	0038      	movs	r0, r7
     e5c:	b002      	add	sp, #8
     e5e:	bc1c      	pop	{r2, r3, r4}
     e60:	4690      	mov	r8, r2
     e62:	4699      	mov	r9, r3
     e64:	46a2      	mov	sl, r4
     e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e68:	9f01      	ldr	r7, [sp, #4]
     e6a:	e7f6      	b.n	e5a <spi_read_buffer_wait+0xfe>
     e6c:	0000ffff 	.word	0x0000ffff
     e70:	00002710 	.word	0x00002710

00000e74 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e74:	b5f0      	push	{r4, r5, r6, r7, lr}
     e76:	46de      	mov	lr, fp
     e78:	4657      	mov	r7, sl
     e7a:	464e      	mov	r6, r9
     e7c:	4645      	mov	r5, r8
     e7e:	b5e0      	push	{r5, r6, r7, lr}
     e80:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e82:	2317      	movs	r3, #23
	if (length == 0) {
     e84:	2a00      	cmp	r2, #0
     e86:	d107      	bne.n	e98 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     e88:	0018      	movs	r0, r3
     e8a:	b003      	add	sp, #12
     e8c:	bc3c      	pop	{r2, r3, r4, r5}
     e8e:	4690      	mov	r8, r2
     e90:	4699      	mov	r9, r3
     e92:	46a2      	mov	sl, r4
     e94:	46ab      	mov	fp, r5
     e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e98:	7943      	ldrb	r3, [r0, #5]
     e9a:	2b00      	cmp	r3, #0
     e9c:	d103      	bne.n	ea6 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e9e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ea0:	7b9c      	ldrb	r4, [r3, #14]
     ea2:	07a4      	lsls	r4, r4, #30
     ea4:	d40a      	bmi.n	ebc <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
     ea6:	4693      	mov	fp, r2
     ea8:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
     eaa:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
     eac:	2502      	movs	r5, #2
     eae:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
     eb0:	3502      	adds	r5, #2
     eb2:	46a8      	mov	r8, r5
     eb4:	3a01      	subs	r2, #1
     eb6:	b292      	uxth	r2, r2
     eb8:	468a      	mov	sl, r1
     eba:	e023      	b.n	f04 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ebc:	2402      	movs	r4, #2
     ebe:	739c      	strb	r4, [r3, #14]
     ec0:	e7f1      	b.n	ea6 <spi_write_buffer_wait+0x32>
     ec2:	7bb5      	ldrb	r5, [r6, #14]
			if (spi_is_write_complete(module)) {
     ec4:	4661      	mov	r1, ip
     ec6:	420d      	tst	r5, r1
     ec8:	d12e      	bne.n	f28 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     eca:	7bb5      	ldrb	r5, [r6, #14]
			if (!spi_is_ready_to_write(module)) {
     ecc:	421d      	tst	r5, r3
     ece:	d100      	bne.n	ed2 <spi_write_buffer_wait+0x5e>
     ed0:	e0c2      	b.n	1058 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ed2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed4:	7bb5      	ldrb	r5, [r6, #14]
		while (!spi_is_ready_to_write(module)) {
     ed6:	421d      	tst	r5, r3
     ed8:	d0fc      	beq.n	ed4 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
     eda:	1c67      	adds	r7, r4, #1
     edc:	b2bf      	uxth	r7, r7
     ede:	4651      	mov	r1, sl
     ee0:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ee2:	7981      	ldrb	r1, [r0, #6]
     ee4:	2901      	cmp	r1, #1
     ee6:	d023      	beq.n	f30 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
     ee8:	b2ad      	uxth	r5, r5
     eea:	003c      	movs	r4, r7
     eec:	7bb7      	ldrb	r7, [r6, #14]
	if (!spi_is_ready_to_write(module)) {
     eee:	421f      	tst	r7, r3
     ef0:	d002      	beq.n	ef8 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ef2:	05ed      	lsls	r5, r5, #23
     ef4:	0ded      	lsrs	r5, r5, #23
     ef6:	8335      	strh	r5, [r6, #24]
     ef8:	1e55      	subs	r5, r2, #1
     efa:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
     efc:	79c6      	ldrb	r6, [r0, #7]
     efe:	2e00      	cmp	r6, #0
     f00:	d11d      	bne.n	f3e <spi_write_buffer_wait+0xca>
     f02:	002a      	movs	r2, r5
	while (length--) {
     f04:	4d59      	ldr	r5, [pc, #356]	; (106c <spi_write_buffer_wait+0x1f8>)
     f06:	42aa      	cmp	r2, r5
     f08:	d070      	beq.n	fec <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
     f0a:	7945      	ldrb	r5, [r0, #5]
     f0c:	2d00      	cmp	r5, #0
     f0e:	d1e0      	bne.n	ed2 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f10:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f12:	7bb5      	ldrb	r5, [r6, #14]
				if (spi_is_ready_to_write(module)) {
     f14:	421d      	tst	r5, r3
     f16:	d1d4      	bne.n	ec2 <spi_write_buffer_wait+0x4e>
     f18:	4d55      	ldr	r5, [pc, #340]	; (1070 <spi_write_buffer_wait+0x1fc>)
     f1a:	7bb7      	ldrb	r7, [r6, #14]
     f1c:	421f      	tst	r7, r3
     f1e:	d1d0      	bne.n	ec2 <spi_write_buffer_wait+0x4e>
     f20:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f22:	2d00      	cmp	r5, #0
     f24:	d1f9      	bne.n	f1a <spi_write_buffer_wait+0xa6>
     f26:	e7cc      	b.n	ec2 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f28:	2302      	movs	r3, #2
     f2a:	73b3      	strb	r3, [r6, #14]
				return STATUS_ABORTED;
     f2c:	3302      	adds	r3, #2
     f2e:	e7ab      	b.n	e88 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
     f30:	3402      	adds	r4, #2
     f32:	b2a4      	uxth	r4, r4
     f34:	4651      	mov	r1, sl
     f36:	5dcf      	ldrb	r7, [r1, r7]
     f38:	023f      	lsls	r7, r7, #8
     f3a:	433d      	orrs	r5, r7
     f3c:	e7d6      	b.n	eec <spi_write_buffer_wait+0x78>
     f3e:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
     f40:	7945      	ldrb	r5, [r0, #5]
     f42:	2d00      	cmp	r5, #0
     f44:	d137      	bne.n	fb6 <spi_write_buffer_wait+0x142>
     f46:	4d4b      	ldr	r5, [pc, #300]	; (1074 <spi_write_buffer_wait+0x200>)
     f48:	9101      	str	r1, [sp, #4]
     f4a:	e012      	b.n	f72 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
     f4c:	3402      	adds	r4, #2
     f4e:	b2a4      	uxth	r4, r4
     f50:	4649      	mov	r1, r9
     f52:	9f01      	ldr	r7, [sp, #4]
     f54:	5c79      	ldrb	r1, [r7, r1]
     f56:	0209      	lsls	r1, r1, #8
     f58:	9f00      	ldr	r7, [sp, #0]
     f5a:	430f      	orrs	r7, r1
     f5c:	e01b      	b.n	f96 <spi_write_buffer_wait+0x122>
						length--;
     f5e:	3a01      	subs	r2, #1
     f60:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
     f62:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f64:	7bb7      	ldrb	r7, [r6, #14]
					if (spi_is_ready_to_read(module)) {
     f66:	4641      	mov	r1, r8
     f68:	420f      	tst	r7, r1
     f6a:	d11b      	bne.n	fa4 <spi_write_buffer_wait+0x130>
     f6c:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f6e:	2d00      	cmp	r5, #0
     f70:	d018      	beq.n	fa4 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
     f72:	2a00      	cmp	r2, #0
     f74:	d0f5      	beq.n	f62 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f76:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f78:	7bb7      	ldrb	r7, [r6, #14]
     f7a:	421f      	tst	r7, r3
     f7c:	d0f1      	beq.n	f62 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
     f7e:	1c67      	adds	r7, r4, #1
     f80:	b2b9      	uxth	r1, r7
     f82:	4689      	mov	r9, r1
     f84:	9901      	ldr	r1, [sp, #4]
     f86:	5d09      	ldrb	r1, [r1, r4]
     f88:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f8a:	7981      	ldrb	r1, [r0, #6]
     f8c:	2901      	cmp	r1, #1
     f8e:	d0dd      	beq.n	f4c <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
     f90:	4669      	mov	r1, sp
     f92:	880f      	ldrh	r7, [r1, #0]
     f94:	464c      	mov	r4, r9
     f96:	7bb1      	ldrb	r1, [r6, #14]
	if (!spi_is_ready_to_write(module)) {
     f98:	4219      	tst	r1, r3
     f9a:	d0e0      	beq.n	f5e <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f9c:	05ff      	lsls	r7, r7, #23
     f9e:	0dff      	lsrs	r7, r7, #23
     fa0:	8337      	strh	r7, [r6, #24]
     fa2:	e7dc      	b.n	f5e <spi_write_buffer_wait+0xea>
     fa4:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fa6:	7bb5      	ldrb	r5, [r6, #14]
				if (spi_is_write_complete(module)) {
     fa8:	4667      	mov	r7, ip
     faa:	423d      	tst	r5, r7
     fac:	d118      	bne.n	fe0 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fae:	7bb5      	ldrb	r5, [r6, #14]
				if (!spi_is_ready_to_read(module)) {
     fb0:	4646      	mov	r6, r8
     fb2:	4235      	tst	r5, r6
     fb4:	d052      	beq.n	105c <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fb6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fb8:	7bb5      	ldrb	r5, [r6, #14]
			while (!spi_is_ready_to_read(module)) {
     fba:	4647      	mov	r7, r8
     fbc:	423d      	tst	r5, r7
     fbe:	d0fb      	beq.n	fb8 <spi_write_buffer_wait+0x144>
     fc0:	7bb5      	ldrb	r5, [r6, #14]
	if (!spi_is_ready_to_read(module)) {
     fc2:	423d      	tst	r5, r7
     fc4:	d007      	beq.n	fd6 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fc6:	8a35      	ldrh	r5, [r6, #16]
     fc8:	423d      	tst	r5, r7
     fca:	d000      	beq.n	fce <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     fcc:	8237      	strh	r7, [r6, #16]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fce:	7985      	ldrb	r5, [r0, #6]
     fd0:	2d01      	cmp	r5, #1
     fd2:	d009      	beq.n	fe8 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fd4:	8b35      	ldrh	r5, [r6, #24]
			flush_length--;
     fd6:	465d      	mov	r5, fp
     fd8:	3d01      	subs	r5, #1
     fda:	b2ad      	uxth	r5, r5
     fdc:	46ab      	mov	fp, r5
     fde:	e769      	b.n	eb4 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     fe0:	2302      	movs	r3, #2
     fe2:	73b3      	strb	r3, [r6, #14]
					return STATUS_ABORTED;
     fe4:	3302      	adds	r3, #2
     fe6:	e74f      	b.n	e88 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fe8:	8b35      	ldrh	r5, [r6, #24]
     fea:	e7f4      	b.n	fd6 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
     fec:	7943      	ldrb	r3, [r0, #5]
     fee:	2b01      	cmp	r3, #1
     ff0:	d00b      	beq.n	100a <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
     ff2:	2b00      	cmp	r3, #0
     ff4:	d134      	bne.n	1060 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
     ff6:	79c2      	ldrb	r2, [r0, #7]
     ff8:	2a00      	cmp	r2, #0
     ffa:	d100      	bne.n	ffe <spi_write_buffer_wait+0x18a>
     ffc:	e744      	b.n	e88 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
     ffe:	2404      	movs	r4, #4
			while (flush_length) {
    1000:	465b      	mov	r3, fp
    1002:	465d      	mov	r5, fp
    1004:	2b00      	cmp	r3, #0
    1006:	d119      	bne.n	103c <spi_write_buffer_wait+0x1c8>
    1008:	e73e      	b.n	e88 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    100a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    100c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    100e:	7b8b      	ldrb	r3, [r1, #14]
    1010:	4213      	tst	r3, r2
    1012:	d0fc      	beq.n	100e <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    1014:	2300      	movs	r3, #0
    1016:	e737      	b.n	e88 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1018:	7b8b      	ldrb	r3, [r1, #14]
				if (!spi_is_ready_to_read(module)) {
    101a:	4223      	tst	r3, r4
    101c:	d022      	beq.n	1064 <spi_write_buffer_wait+0x1f0>
    101e:	7b8b      	ldrb	r3, [r1, #14]
	if (!spi_is_ready_to_read(module)) {
    1020:	4223      	tst	r3, r4
    1022:	d007      	beq.n	1034 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1024:	8a0b      	ldrh	r3, [r1, #16]
    1026:	4223      	tst	r3, r4
    1028:	d000      	beq.n	102c <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    102a:	820c      	strh	r4, [r1, #16]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    102c:	7983      	ldrb	r3, [r0, #6]
    102e:	2b01      	cmp	r3, #1
    1030:	d010      	beq.n	1054 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1032:	8b0b      	ldrh	r3, [r1, #24]
				flush_length--;
    1034:	3d01      	subs	r5, #1
    1036:	b2ad      	uxth	r5, r5
			while (flush_length) {
    1038:	2d00      	cmp	r5, #0
    103a:	d015      	beq.n	1068 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    103c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    103e:	7b8b      	ldrb	r3, [r1, #14]
					if (spi_is_ready_to_read(module)) {
    1040:	4223      	tst	r3, r4
    1042:	d1e9      	bne.n	1018 <spi_write_buffer_wait+0x1a4>
    1044:	4b0a      	ldr	r3, [pc, #40]	; (1070 <spi_write_buffer_wait+0x1fc>)
    1046:	7b8a      	ldrb	r2, [r1, #14]
    1048:	4222      	tst	r2, r4
    104a:	d1e5      	bne.n	1018 <spi_write_buffer_wait+0x1a4>
    104c:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    104e:	2b00      	cmp	r3, #0
    1050:	d1f9      	bne.n	1046 <spi_write_buffer_wait+0x1d2>
    1052:	e7e1      	b.n	1018 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1054:	8b0b      	ldrh	r3, [r1, #24]
    1056:	e7ed      	b.n	1034 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    1058:	2312      	movs	r3, #18
    105a:	e715      	b.n	e88 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    105c:	2312      	movs	r3, #18
    105e:	e713      	b.n	e88 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    1060:	2300      	movs	r3, #0
    1062:	e711      	b.n	e88 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    1064:	2312      	movs	r3, #18
    1066:	e70f      	b.n	e88 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    1068:	2300      	movs	r3, #0
    106a:	e70d      	b.n	e88 <spi_write_buffer_wait+0x14>
    106c:	0000ffff 	.word	0x0000ffff
    1070:	00002710 	.word	0x00002710
    1074:	00002711 	.word	0x00002711

00001078 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1078:	b5f0      	push	{r4, r5, r6, r7, lr}
    107a:	46de      	mov	lr, fp
    107c:	4657      	mov	r7, sl
    107e:	464e      	mov	r6, r9
    1080:	4645      	mov	r5, r8
    1082:	b5e0      	push	{r5, r6, r7, lr}
    1084:	b08d      	sub	sp, #52	; 0x34
    1086:	0005      	movs	r5, r0
    1088:	000c      	movs	r4, r1
    108a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    108c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    108e:	0008      	movs	r0, r1
    1090:	4b7e      	ldr	r3, [pc, #504]	; (128c <usart_init+0x214>)
    1092:	4798      	blx	r3
    1094:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1096:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1098:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    109a:	07db      	lsls	r3, r3, #31
    109c:	d506      	bpl.n	10ac <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    109e:	b00d      	add	sp, #52	; 0x34
    10a0:	bc3c      	pop	{r2, r3, r4, r5}
    10a2:	4690      	mov	r8, r2
    10a4:	4699      	mov	r9, r3
    10a6:	46a2      	mov	sl, r4
    10a8:	46ab      	mov	fp, r5
    10aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10ac:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    10ae:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10b0:	079b      	lsls	r3, r3, #30
    10b2:	d4f4      	bmi.n	109e <usart_init+0x26>
    10b4:	4976      	ldr	r1, [pc, #472]	; (1290 <usart_init+0x218>)
    10b6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10b8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10ba:	2301      	movs	r3, #1
    10bc:	40bb      	lsls	r3, r7
    10be:	4303      	orrs	r3, r0
    10c0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    10c2:	a90b      	add	r1, sp, #44	; 0x2c
    10c4:	7f73      	ldrb	r3, [r6, #29]
    10c6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10c8:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10ca:	b2d7      	uxtb	r7, r2
    10cc:	0038      	movs	r0, r7
    10ce:	4b71      	ldr	r3, [pc, #452]	; (1294 <usart_init+0x21c>)
    10d0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10d2:	0038      	movs	r0, r7
    10d4:	4b70      	ldr	r3, [pc, #448]	; (1298 <usart_init+0x220>)
    10d6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10d8:	7f70      	ldrb	r0, [r6, #29]
    10da:	2100      	movs	r1, #0
    10dc:	4b6f      	ldr	r3, [pc, #444]	; (129c <usart_init+0x224>)
    10de:	4798      	blx	r3
	module->character_size = config->character_size;
    10e0:	7af3      	ldrb	r3, [r6, #11]
    10e2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    10e4:	7d33      	ldrb	r3, [r6, #20]
    10e6:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    10e8:	7d73      	ldrb	r3, [r6, #21]
    10ea:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
    10ec:	682b      	ldr	r3, [r5, #0]
    10ee:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10f0:	0018      	movs	r0, r3
    10f2:	4b66      	ldr	r3, [pc, #408]	; (128c <usart_init+0x214>)
    10f4:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10f6:	300d      	adds	r0, #13
	uint16_t baud  = 0;
    10f8:	2200      	movs	r2, #0
    10fa:	230e      	movs	r3, #14
    10fc:	a902      	add	r1, sp, #8
    10fe:	468c      	mov	ip, r1
    1100:	4463      	add	r3, ip
    1102:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
    1104:	6833      	ldr	r3, [r6, #0]
    1106:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    1108:	68f3      	ldr	r3, [r6, #12]
    110a:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    110c:	7db3      	ldrb	r3, [r6, #22]
    110e:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1110:	6873      	ldr	r3, [r6, #4]
    1112:	4699      	mov	r9, r3
	switch (transfer_mode)
    1114:	2b00      	cmp	r3, #0
    1116:	d014      	beq.n	1142 <usart_init+0xca>
    1118:	2380      	movs	r3, #128	; 0x80
    111a:	055b      	lsls	r3, r3, #21
    111c:	4599      	cmp	r9, r3
    111e:	d130      	bne.n	1182 <usart_init+0x10a>
			if (!config->use_external_clock) {
    1120:	7df3      	ldrb	r3, [r6, #23]
    1122:	2b00      	cmp	r3, #0
    1124:	d131      	bne.n	118a <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1126:	6933      	ldr	r3, [r6, #16]
    1128:	001f      	movs	r7, r3
    112a:	b2c0      	uxtb	r0, r0
    112c:	4b5c      	ldr	r3, [pc, #368]	; (12a0 <usart_init+0x228>)
    112e:	4798      	blx	r3
    1130:	0001      	movs	r1, r0
    1132:	220e      	movs	r2, #14
    1134:	ab02      	add	r3, sp, #8
    1136:	469c      	mov	ip, r3
    1138:	4462      	add	r2, ip
    113a:	0038      	movs	r0, r7
    113c:	4b59      	ldr	r3, [pc, #356]	; (12a4 <usart_init+0x22c>)
    113e:	4798      	blx	r3
    1140:	e020      	b.n	1184 <usart_init+0x10c>
			if (config->use_external_clock) {
    1142:	7df3      	ldrb	r3, [r6, #23]
    1144:	2b00      	cmp	r3, #0
    1146:	d00b      	beq.n	1160 <usart_init+0xe8>
				status_code =
    1148:	2310      	movs	r3, #16
    114a:	9300      	str	r3, [sp, #0]
    114c:	2300      	movs	r3, #0
    114e:	220e      	movs	r2, #14
    1150:	a902      	add	r1, sp, #8
    1152:	468c      	mov	ip, r1
    1154:	4462      	add	r2, ip
    1156:	69b1      	ldr	r1, [r6, #24]
    1158:	6930      	ldr	r0, [r6, #16]
    115a:	4f53      	ldr	r7, [pc, #332]	; (12a8 <usart_init+0x230>)
    115c:	47b8      	blx	r7
    115e:	e011      	b.n	1184 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
    1160:	6933      	ldr	r3, [r6, #16]
    1162:	001f      	movs	r7, r3
    1164:	b2c0      	uxtb	r0, r0
    1166:	4b4e      	ldr	r3, [pc, #312]	; (12a0 <usart_init+0x228>)
    1168:	4798      	blx	r3
    116a:	0001      	movs	r1, r0
				status_code =
    116c:	2310      	movs	r3, #16
    116e:	9300      	str	r3, [sp, #0]
    1170:	2300      	movs	r3, #0
    1172:	220e      	movs	r2, #14
    1174:	a802      	add	r0, sp, #8
    1176:	4684      	mov	ip, r0
    1178:	4462      	add	r2, ip
    117a:	0038      	movs	r0, r7
    117c:	4f4a      	ldr	r7, [pc, #296]	; (12a8 <usart_init+0x230>)
    117e:	47b8      	blx	r7
    1180:	e000      	b.n	1184 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
    1182:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
    1184:	2800      	cmp	r0, #0
    1186:	d000      	beq.n	118a <usart_init+0x112>
    1188:	e789      	b.n	109e <usart_init+0x26>
	usart_hw->BAUD.reg = baud;
    118a:	230e      	movs	r3, #14
    118c:	aa02      	add	r2, sp, #8
    118e:	4694      	mov	ip, r2
    1190:	4463      	add	r3, ip
    1192:	881b      	ldrh	r3, [r3, #0]
    1194:	4642      	mov	r2, r8
    1196:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
    1198:	4653      	mov	r3, sl
    119a:	9f03      	ldr	r7, [sp, #12]
    119c:	431f      	orrs	r7, r3
    119e:	464b      	mov	r3, r9
    11a0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11a2:	465b      	mov	r3, fp
    11a4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    11a6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    11a8:	7df3      	ldrb	r3, [r6, #23]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d101      	bne.n	11b2 <usart_init+0x13a>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    11ae:	3304      	adds	r3, #4
    11b0:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11b2:	7d31      	ldrb	r1, [r6, #20]
    11b4:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    11b6:	7d73      	ldrb	r3, [r6, #21]
    11b8:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11ba:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    11bc:	7ab1      	ldrb	r1, [r6, #10]
    11be:	7af2      	ldrb	r2, [r6, #11]
    11c0:	4311      	orrs	r1, r2
    11c2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    11c4:	8933      	ldrh	r3, [r6, #8]
    11c6:	2bff      	cmp	r3, #255	; 0xff
    11c8:	d003      	beq.n	11d2 <usart_init+0x15a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    11ca:	2280      	movs	r2, #128	; 0x80
    11cc:	0452      	lsls	r2, r2, #17
    11ce:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    11d0:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    11d2:	7f33      	ldrb	r3, [r6, #28]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d103      	bne.n	11e0 <usart_init+0x168>
    11d8:	4b34      	ldr	r3, [pc, #208]	; (12ac <usart_init+0x234>)
    11da:	789b      	ldrb	r3, [r3, #2]
    11dc:	079b      	lsls	r3, r3, #30
    11de:	d501      	bpl.n	11e4 <usart_init+0x16c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    11e0:	2380      	movs	r3, #128	; 0x80
    11e2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    11e4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    11e6:	8a13      	ldrh	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    11e8:	b21b      	sxth	r3, r3
    11ea:	2b00      	cmp	r3, #0
    11ec:	dbfb      	blt.n	11e6 <usart_init+0x16e>
	usart_hw->CTRLB.reg = ctrlb;
    11ee:	4643      	mov	r3, r8
    11f0:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    11f2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    11f4:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    11f6:	b21b      	sxth	r3, r3
    11f8:	2b00      	cmp	r3, #0
    11fa:	dbfb      	blt.n	11f4 <usart_init+0x17c>
	usart_hw->CTRLA.reg = ctrla;
    11fc:	4643      	mov	r3, r8
    11fe:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1200:	ab0a      	add	r3, sp, #40	; 0x28
    1202:	2280      	movs	r2, #128	; 0x80
    1204:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1206:	2200      	movs	r2, #0
    1208:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    120a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    120c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    120e:	6a33      	ldr	r3, [r6, #32]
    1210:	9306      	str	r3, [sp, #24]
    1212:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1214:	9307      	str	r3, [sp, #28]
    1216:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1218:	9308      	str	r3, [sp, #32]
    121a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    121c:	9303      	str	r3, [sp, #12]
    121e:	9309      	str	r3, [sp, #36]	; 0x24
    1220:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1222:	ae06      	add	r6, sp, #24
    1224:	e006      	b.n	1234 <usart_init+0x1bc>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1226:	0020      	movs	r0, r4
    1228:	4b21      	ldr	r3, [pc, #132]	; (12b0 <usart_init+0x238>)
    122a:	4798      	blx	r3
    122c:	e007      	b.n	123e <usart_init+0x1c6>
    122e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1230:	2f04      	cmp	r7, #4
    1232:	d00d      	beq.n	1250 <usart_init+0x1d8>
    1234:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1236:	00bb      	lsls	r3, r7, #2
    1238:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    123a:	2800      	cmp	r0, #0
    123c:	d0f3      	beq.n	1226 <usart_init+0x1ae>
		if (current_pinmux != PINMUX_UNUSED) {
    123e:	1c43      	adds	r3, r0, #1
    1240:	d0f5      	beq.n	122e <usart_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1242:	a90a      	add	r1, sp, #40	; 0x28
    1244:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1246:	0c00      	lsrs	r0, r0, #16
    1248:	b2c0      	uxtb	r0, r0
    124a:	4b1a      	ldr	r3, [pc, #104]	; (12b4 <usart_init+0x23c>)
    124c:	4798      	blx	r3
    124e:	e7ee      	b.n	122e <usart_init+0x1b6>
		module->callback[i]            = NULL;
    1250:	2300      	movs	r3, #0
    1252:	60ab      	str	r3, [r5, #8]
    1254:	60eb      	str	r3, [r5, #12]
    1256:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
    1258:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    125a:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    125c:	2200      	movs	r2, #0
    125e:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    1260:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    1262:	3320      	adds	r3, #32
    1264:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1266:	3301      	adds	r3, #1
    1268:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    126a:	3301      	adds	r3, #1
    126c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    126e:	3301      	adds	r3, #1
    1270:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1272:	6828      	ldr	r0, [r5, #0]
    1274:	4b05      	ldr	r3, [pc, #20]	; (128c <usart_init+0x214>)
    1276:	4798      	blx	r3
    1278:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    127a:	490f      	ldr	r1, [pc, #60]	; (12b8 <usart_init+0x240>)
    127c:	4b0f      	ldr	r3, [pc, #60]	; (12bc <usart_init+0x244>)
    127e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1280:	00a4      	lsls	r4, r4, #2
    1282:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <usart_init+0x248>)
    1284:	50e5      	str	r5, [r4, r3]
	return status_code;
    1286:	2000      	movs	r0, #0
    1288:	e709      	b.n	109e <usart_init+0x26>
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	00000959 	.word	0x00000959
    1290:	40000400 	.word	0x40000400
    1294:	00001cf5 	.word	0x00001cf5
    1298:	00001c69 	.word	0x00001c69
    129c:	00000795 	.word	0x00000795
    12a0:	00001d11 	.word	0x00001d11
    12a4:	000006d7 	.word	0x000006d7
    12a8:	00000701 	.word	0x00000701
    12ac:	41002000 	.word	0x41002000
    12b0:	000007e1 	.word	0x000007e1
    12b4:	00001ded 	.word	0x00001ded
    12b8:	00001301 	.word	0x00001301
    12bc:	00000995 	.word	0x00000995
    12c0:	2000008c 	.word	0x2000008c

000012c4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    12c4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    12c6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    12c8:	2a00      	cmp	r2, #0
    12ca:	d101      	bne.n	12d0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    12cc:	0018      	movs	r0, r3
    12ce:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    12d0:	8bc2      	ldrh	r2, [r0, #30]
    12d2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    12d4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    12d6:	2a00      	cmp	r2, #0
    12d8:	d1f8      	bne.n	12cc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    12da:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    12dc:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    12de:	2102      	movs	r1, #2
    12e0:	7b93      	ldrb	r3, [r2, #14]
    12e2:	420b      	tst	r3, r1
    12e4:	d0fc      	beq.n	12e0 <usart_write_wait+0x1c>
	return STATUS_OK;
    12e6:	2300      	movs	r3, #0
    12e8:	e7f0      	b.n	12cc <usart_write_wait+0x8>

000012ea <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    12ea:	1c93      	adds	r3, r2, #2
    12ec:	009b      	lsls	r3, r3, #2
    12ee:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    12f0:	2120      	movs	r1, #32
    12f2:	2301      	movs	r3, #1
    12f4:	4093      	lsls	r3, r2
    12f6:	001a      	movs	r2, r3
    12f8:	5c43      	ldrb	r3, [r0, r1]
    12fa:	4313      	orrs	r3, r2
    12fc:	5443      	strb	r3, [r0, r1]
}
    12fe:	4770      	bx	lr

00001300 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1302:	0080      	lsls	r0, r0, #2
    1304:	4b46      	ldr	r3, [pc, #280]	; (1420 <_usart_interrupt_handler+0x120>)
    1306:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1308:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    130a:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
    130c:	b21b      	sxth	r3, r3
    130e:	2b00      	cmp	r3, #0
    1310:	dbfb      	blt.n	130a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1312:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    1314:	7b66      	ldrb	r6, [r4, #13]
    1316:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1318:	2320      	movs	r3, #32
    131a:	5ceb      	ldrb	r3, [r5, r3]
    131c:	2221      	movs	r2, #33	; 0x21
    131e:	5caf      	ldrb	r7, [r5, r2]
    1320:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1322:	07f3      	lsls	r3, r6, #31
    1324:	d522      	bpl.n	136c <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
    1326:	8beb      	ldrh	r3, [r5, #30]
    1328:	b29b      	uxth	r3, r3
    132a:	2b00      	cmp	r3, #0
    132c:	d01c      	beq.n	1368 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    132e:	69aa      	ldr	r2, [r5, #24]
    1330:	7813      	ldrb	r3, [r2, #0]
    1332:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1334:	1c51      	adds	r1, r2, #1
    1336:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1338:	7969      	ldrb	r1, [r5, #5]
    133a:	2901      	cmp	r1, #1
    133c:	d00e      	beq.n	135c <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    133e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1340:	05db      	lsls	r3, r3, #23
    1342:	0ddb      	lsrs	r3, r3, #23
    1344:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    1346:	8beb      	ldrh	r3, [r5, #30]
    1348:	3b01      	subs	r3, #1
    134a:	b29b      	uxth	r3, r3
    134c:	83eb      	strh	r3, [r5, #30]
    134e:	2b00      	cmp	r3, #0
    1350:	d10c      	bne.n	136c <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1352:	3301      	adds	r3, #1
    1354:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1356:	3301      	adds	r3, #1
    1358:	7363      	strb	r3, [r4, #13]
    135a:	e007      	b.n	136c <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    135c:	7851      	ldrb	r1, [r2, #1]
    135e:	0209      	lsls	r1, r1, #8
    1360:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1362:	3202      	adds	r2, #2
    1364:	61aa      	str	r2, [r5, #24]
    1366:	e7eb      	b.n	1340 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1368:	2301      	movs	r3, #1
    136a:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    136c:	07b3      	lsls	r3, r6, #30
    136e:	d506      	bpl.n	137e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1370:	2302      	movs	r3, #2
    1372:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    1374:	2200      	movs	r2, #0
    1376:	3321      	adds	r3, #33	; 0x21
    1378:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    137a:	07fb      	lsls	r3, r7, #31
    137c:	d416      	bmi.n	13ac <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    137e:	0773      	lsls	r3, r6, #29
    1380:	d54d      	bpl.n	141e <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
    1382:	8bab      	ldrh	r3, [r5, #28]
    1384:	b29b      	uxth	r3, r3
    1386:	2b00      	cmp	r3, #0
    1388:	d047      	beq.n	141a <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    138a:	8a23      	ldrh	r3, [r4, #16]
    138c:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    138e:	075a      	lsls	r2, r3, #29
    1390:	d020      	beq.n	13d4 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1392:	079a      	lsls	r2, r3, #30
    1394:	d50e      	bpl.n	13b4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1396:	221a      	movs	r2, #26
    1398:	2322      	movs	r3, #34	; 0x22
    139a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    139c:	3b20      	subs	r3, #32
    139e:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    13a0:	077b      	lsls	r3, r7, #29
    13a2:	d53c      	bpl.n	141e <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    13a4:	692b      	ldr	r3, [r5, #16]
    13a6:	0028      	movs	r0, r5
    13a8:	4798      	blx	r3
    13aa:	e038      	b.n	141e <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    13ac:	0028      	movs	r0, r5
    13ae:	68ab      	ldr	r3, [r5, #8]
    13b0:	4798      	blx	r3
    13b2:	e7e4      	b.n	137e <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    13b4:	075a      	lsls	r2, r3, #29
    13b6:	d505      	bpl.n	13c4 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
    13b8:	221e      	movs	r2, #30
    13ba:	2322      	movs	r3, #34	; 0x22
    13bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    13be:	3b1e      	subs	r3, #30
    13c0:	8223      	strh	r3, [r4, #16]
    13c2:	e7ed      	b.n	13a0 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13c4:	07db      	lsls	r3, r3, #31
    13c6:	d5eb      	bpl.n	13a0 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    13c8:	2213      	movs	r2, #19
    13ca:	2322      	movs	r3, #34	; 0x22
    13cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    13ce:	3b21      	subs	r3, #33	; 0x21
    13d0:	8223      	strh	r3, [r4, #16]
    13d2:	e7e5      	b.n	13a0 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    13d4:	8b23      	ldrh	r3, [r4, #24]
    13d6:	05db      	lsls	r3, r3, #23
    13d8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    13da:	b2da      	uxtb	r2, r3
    13dc:	6969      	ldr	r1, [r5, #20]
    13de:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    13e0:	696a      	ldr	r2, [r5, #20]
    13e2:	1c51      	adds	r1, r2, #1
    13e4:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13e6:	7969      	ldrb	r1, [r5, #5]
    13e8:	2901      	cmp	r1, #1
    13ea:	d010      	beq.n	140e <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    13ec:	8bab      	ldrh	r3, [r5, #28]
    13ee:	3b01      	subs	r3, #1
    13f0:	b29b      	uxth	r3, r3
    13f2:	83ab      	strh	r3, [r5, #28]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d112      	bne.n	141e <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13f8:	3304      	adds	r3, #4
    13fa:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    13fc:	2200      	movs	r2, #0
    13fe:	331e      	adds	r3, #30
    1400:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1402:	07bb      	lsls	r3, r7, #30
    1404:	d50b      	bpl.n	141e <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1406:	68eb      	ldr	r3, [r5, #12]
    1408:	0028      	movs	r0, r5
    140a:	4798      	blx	r3
    140c:	e007      	b.n	141e <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    140e:	0a1b      	lsrs	r3, r3, #8
    1410:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1412:	696b      	ldr	r3, [r5, #20]
    1414:	3301      	adds	r3, #1
    1416:	616b      	str	r3, [r5, #20]
    1418:	e7e8      	b.n	13ec <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    141a:	2304      	movs	r3, #4
    141c:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1420:	2000008c 	.word	0x2000008c

00001424 <drv_ctrl_write_cmd>:
static uint16_t actual_position_mm;

    /* Pure SPI write function, takes register and data as input and send it to the stepper controller via SPI.
	 * Returns 0 on success and 1 on failure.
	 */
static int drv_ctrl_write_cmd(uint8_t adress, uint16_t data) {
    1424:	b530      	push	{r4, r5, lr}
    1426:	b083      	sub	sp, #12
	
	uint8_t transfer_data_buffer[] = {((adress << 4)|(data >> 8)), (data & 0xFF)};
    1428:	ab01      	add	r3, sp, #4
    142a:	0102      	lsls	r2, r0, #4
    142c:	0a08      	lsrs	r0, r1, #8
    142e:	4310      	orrs	r0, r2
    1430:	7018      	strb	r0, [r3, #0]
    1432:	7059      	strb	r1, [r3, #1]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1434:	4c06      	ldr	r4, [pc, #24]	; (1450 <drv_ctrl_write_cmd+0x2c>)
    1436:	2540      	movs	r5, #64	; 0x40
    1438:	61a5      	str	r5, [r4, #24]
	
	port_pin_set_output_level(MOTOR_CONTROLLER_SS_PIN, true);
	enum status_code response = spi_write_buffer_wait(&spi_master_instance, transfer_data_buffer, 2);
    143a:	2202      	movs	r2, #2
    143c:	0019      	movs	r1, r3
    143e:	4805      	ldr	r0, [pc, #20]	; (1454 <drv_ctrl_write_cmd+0x30>)
    1440:	4b05      	ldr	r3, [pc, #20]	; (1458 <drv_ctrl_write_cmd+0x34>)
    1442:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1444:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(MOTOR_CONTROLLER_SS_PIN, false);
	
	if(response == 0) {
    1446:	1e43      	subs	r3, r0, #1
    1448:	4198      	sbcs	r0, r3
		return EXIT_SUCCESS;
	} else {
		return EXIT_FAILURE;
	}
}
    144a:	b003      	add	sp, #12
    144c:	bd30      	pop	{r4, r5, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	41004480 	.word	0x41004480
    1454:	200000f0 	.word	0x200000f0
    1458:	00000e75 	.word	0x00000e75

0000145c <drv_ctrl_write_ctrl>:

    /* Following functions writes to one designated register. The functions are using the local configuration struct
	 * to prevent overwriting of previous values.
	 */

static void drv_ctrl_write_ctrl(void){
    145c:	b510      	push	{r4, lr}
	
	drv_ctrl_write_cmd(CTRL_REG,
	drv_config.direction_set |
    145e:	4b08      	ldr	r3, [pc, #32]	; (1480 <drv_ctrl_write_ctrl+0x24>)
	drv_config.enable |
	drv_config.step_mode |
	drv_config.stall_detect |
    1460:	7899      	ldrb	r1, [r3, #2]
    1462:	781a      	ldrb	r2, [r3, #0]
    1464:	4311      	orrs	r1, r2
    1466:	78da      	ldrb	r2, [r3, #3]
    1468:	4311      	orrs	r1, r2
    146a:	791a      	ldrb	r2, [r3, #4]
    146c:	4311      	orrs	r1, r2
    146e:	88da      	ldrh	r2, [r3, #6]
    1470:	4311      	orrs	r1, r2
	drv_config.isense_gain |
    1472:	891b      	ldrh	r3, [r3, #8]
	drv_ctrl_write_cmd(CTRL_REG,
    1474:	4319      	orrs	r1, r3
    1476:	2000      	movs	r0, #0
    1478:	4b02      	ldr	r3, [pc, #8]	; (1484 <drv_ctrl_write_ctrl+0x28>)
    147a:	4798      	blx	r3
	drv_config.dead_time_insert);
	
}
    147c:	bd10      	pop	{r4, pc}
    147e:	46c0      	nop			; (mov r8, r8)
    1480:	20000048 	.word	0x20000048
    1484:	00001425 	.word	0x00001425

00001488 <drv_ctrl_read_cmd>:
uint16_t drv_ctrl_read_cmd(uint8_t adress) {
    1488:	b570      	push	{r4, r5, r6, lr}
    148a:	b082      	sub	sp, #8
	uint8_t data[2] ={0x00, 0x00};
    148c:	a901      	add	r1, sp, #4
    148e:	2200      	movs	r2, #0
    1490:	700a      	strb	r2, [r1, #0]
    1492:	704a      	strb	r2, [r1, #1]
		port_base->OUTSET.reg = pin_mask;
    1494:	4c0a      	ldr	r4, [pc, #40]	; (14c0 <drv_ctrl_read_cmd+0x38>)
    1496:	2540      	movs	r5, #64	; 0x40
    1498:	61a5      	str	r5, [r4, #24]
	uint16_t dummy = ((adress << 4) | (1 << 7));
    149a:	0103      	lsls	r3, r0, #4
    149c:	2080      	movs	r0, #128	; 0x80
	enum status_code response = spi_read_buffer_wait(&spi_master_instance, data, 2, dummy);
    149e:	4303      	orrs	r3, r0
    14a0:	3202      	adds	r2, #2
    14a2:	4808      	ldr	r0, [pc, #32]	; (14c4 <drv_ctrl_read_cmd+0x3c>)
    14a4:	4e08      	ldr	r6, [pc, #32]	; (14c8 <drv_ctrl_read_cmd+0x40>)
    14a6:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    14a8:	6165      	str	r5, [r4, #20]
    14aa:	2301      	movs	r3, #1
	if(response == 0) {
    14ac:	2800      	cmp	r0, #0
    14ae:	d104      	bne.n	14ba <drv_ctrl_read_cmd+0x32>
		return ((data[0] << 4) | data[1]);
    14b0:	aa01      	add	r2, sp, #4
    14b2:	7810      	ldrb	r0, [r2, #0]
    14b4:	0100      	lsls	r0, r0, #4
    14b6:	7853      	ldrb	r3, [r2, #1]
    14b8:	4303      	orrs	r3, r0
    14ba:	b298      	uxth	r0, r3
}
    14bc:	b002      	add	sp, #8
    14be:	bd70      	pop	{r4, r5, r6, pc}
    14c0:	41004480 	.word	0x41004480
    14c4:	200000f0 	.word	0x200000f0
    14c8:	00000d5d 	.word	0x00000d5d

000014cc <drv_ctrl_init>:
	drv_config.hs_current);
	
}

    /* Initialize the stepper driver, drv_config_struct is defined in this file and exported in header. */
int drv_ctrl_init(struct drv_config_struct * const new_config) {
    14cc:	b570      	push	{r4, r5, r6, lr}
    14ce:	0001      	movs	r1, r0
	
	drv_config = *new_config;
    14d0:	4c18      	ldr	r4, [pc, #96]	; (1534 <drv_ctrl_init+0x68>)
    14d2:	2226      	movs	r2, #38	; 0x26
    14d4:	0020      	movs	r0, r4
    14d6:	4b18      	ldr	r3, [pc, #96]	; (1538 <drv_ctrl_init+0x6c>)
    14d8:	4798      	blx	r3
	
	drv_ctrl_write_ctrl();			
    14da:	4b18      	ldr	r3, [pc, #96]	; (153c <drv_ctrl_init+0x70>)
    14dc:	4798      	blx	r3
	drv_config.drv_torque |
    14de:	7aa1      	ldrb	r1, [r4, #10]
	drv_ctrl_write_cmd(TORQUE_REG,
    14e0:	89a3      	ldrh	r3, [r4, #12]
    14e2:	4319      	orrs	r1, r3
    14e4:	2001      	movs	r0, #1
    14e6:	4d16      	ldr	r5, [pc, #88]	; (1540 <drv_ctrl_init+0x74>)
    14e8:	47a8      	blx	r5
    drv_config.drv_toff |
    14ea:	7ba1      	ldrb	r1, [r4, #14]
    drv_ctrl_write_cmd(OFF_REG,
    14ec:	8a23      	ldrh	r3, [r4, #16]
    14ee:	4319      	orrs	r1, r3
    14f0:	2002      	movs	r0, #2
    14f2:	47a8      	blx	r5
	drv_config.drv_tblank |
    14f4:	7ca1      	ldrb	r1, [r4, #18]
	drv_ctrl_write_cmd(BLANK_REG,
    14f6:	8aa3      	ldrh	r3, [r4, #20]
    14f8:	4319      	orrs	r1, r3
    14fa:	2003      	movs	r0, #3
    14fc:	47a8      	blx	r5
	drv_ctrl_write_cmd(DECAY_REG,
    14fe:	7da1      	ldrb	r1, [r4, #22]
    1500:	7de3      	ldrb	r3, [r4, #23]
    1502:	4319      	orrs	r1, r3
    1504:	2004      	movs	r0, #4
    1506:	47a8      	blx	r5
	drv_config.drv_sdthr |
    1508:	7e21      	ldrb	r1, [r4, #24]
    150a:	8b63      	ldrh	r3, [r4, #26]
    150c:	4319      	orrs	r1, r3
	drv_config.stall_count |
    150e:	8ba3      	ldrh	r3, [r4, #28]
	drv_ctrl_write_cmd(STALL_REG,
    1510:	4319      	orrs	r1, r3
    1512:	2005      	movs	r0, #5
    1514:	47a8      	blx	r5
	drv_config.hs_drive_time |
    1516:	7fa1      	ldrb	r1, [r4, #30]
    1518:	2320      	movs	r3, #32
    151a:	5ce3      	ldrb	r3, [r4, r3]
    151c:	4319      	orrs	r1, r3
    151e:	2321      	movs	r3, #33	; 0x21
    1520:	5ce3      	ldrb	r3, [r4, r3]
    1522:	4319      	orrs	r1, r3
    1524:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    1526:	4319      	orrs	r1, r3
	drv_config.ls_current |
    1528:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	drv_ctrl_write_cmd(DRIVE_REG,
    152a:	4319      	orrs	r1, r3
    152c:	2006      	movs	r0, #6
    152e:	47a8      	blx	r5
	drv_ctrl_write_decay();			
	drv_ctrl_write_stall();			
	drv_ctrl_write_drive();	
			
	return EXIT_SUCCESS;
}
    1530:	2000      	movs	r0, #0
    1532:	bd70      	pop	{r4, r5, r6, pc}
    1534:	20000048 	.word	0x20000048
    1538:	000023a1 	.word	0x000023a1
    153c:	0000145d 	.word	0x0000145d
    1540:	00001425 	.word	0x00001425

00001544 <drv_ctrl_enable>:

int drv_ctrl_enable(){
    1544:	b510      	push	{r4, lr}
	
	drv_config.enable = DRV_ENABLE;
    1546:	2201      	movs	r2, #1
    1548:	4b02      	ldr	r3, [pc, #8]	; (1554 <drv_ctrl_enable+0x10>)
    154a:	701a      	strb	r2, [r3, #0]
	drv_ctrl_write_ctrl();
    154c:	4b02      	ldr	r3, [pc, #8]	; (1558 <drv_ctrl_enable+0x14>)
    154e:	4798      	blx	r3
	
	return EXIT_SUCCESS;
}
    1550:	2000      	movs	r0, #0
    1552:	bd10      	pop	{r4, pc}
    1554:	20000048 	.word	0x20000048
    1558:	0000145d 	.word	0x0000145d

0000155c <drv_ctrl_moveto>:
}

    /* Move to position, takes target position as input in mm from top. Check also for out of range position.
	 * when move is complete set new position. Returns 1 on success and 0 on failure. This function is blocking!!
	 */
int drv_ctrl_moveto(uint16_t position_mm) {
    155c:	b5f0      	push	{r4, r5, r6, r7, lr}
    155e:	46d6      	mov	lr, sl
    1560:	464f      	mov	r7, r9
    1562:	4646      	mov	r6, r8
    1564:	b5c0      	push	{r6, r7, lr}
    1566:	4680      	mov	r8, r0
	
	if(position_mm > Z_AXIS_MAX_TRAVEL) {
		return EXIT_FAILURE;
    1568:	2001      	movs	r0, #1
	if(position_mm > Z_AXIS_MAX_TRAVEL) {
    156a:	4643      	mov	r3, r8
    156c:	2b64      	cmp	r3, #100	; 0x64
    156e:	d825      	bhi.n	15bc <drv_ctrl_moveto+0x60>
	}
	
	enum direction dir = (actual_position_mm > position_mm) ? up : down;
    1570:	4b17      	ldr	r3, [pc, #92]	; (15d0 <drv_ctrl_moveto+0x74>)
    1572:	881b      	ldrh	r3, [r3, #0]
	uint16_t steps = abs(actual_position_mm - position_mm) * Z_AXIS_STEPS_PER_MM;
    1574:	4642      	mov	r2, r8
    1576:	1a9f      	subs	r7, r3, r2
    1578:	17fa      	asrs	r2, r7, #31
    157a:	18bf      	adds	r7, r7, r2
    157c:	4057      	eors	r7, r2
    157e:	22a0      	movs	r2, #160	; 0xa0
    1580:	4357      	muls	r7, r2
    1582:	b2bf      	uxth	r7, r7
	if (level) {
    1584:	4598      	cmp	r8, r3
    1586:	d21e      	bcs.n	15c6 <drv_ctrl_moveto+0x6a>
		port_base->OUTSET.reg = pin_mask;
    1588:	2280      	movs	r2, #128	; 0x80
    158a:	0352      	lsls	r2, r2, #13
    158c:	4b11      	ldr	r3, [pc, #68]	; (15d4 <drv_ctrl_moveto+0x78>)
    158e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(MOTOR_CONTROLLER_DIR_PIN, dir);
	for(int i = 0; i <= steps; i++){
    1590:	2400      	movs	r4, #0
    1592:	4e10      	ldr	r6, [pc, #64]	; (15d4 <drv_ctrl_moveto+0x78>)
    1594:	2380      	movs	r3, #128	; 0x80
    1596:	039b      	lsls	r3, r3, #14
    1598:	4699      	mov	r9, r3
    159a:	469a      	mov	sl, r3
    159c:	4653      	mov	r3, sl
    159e:	61b3      	str	r3, [r6, #24]
		port_pin_set_output_level(MOTOR_CONTROLLER_STP_PIN, true);
		delay_us(STEPPER_PULSE_PERIOD_us);
    15a0:	2064      	movs	r0, #100	; 0x64
    15a2:	4d0d      	ldr	r5, [pc, #52]	; (15d8 <drv_ctrl_moveto+0x7c>)
    15a4:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    15a6:	464b      	mov	r3, r9
    15a8:	6173      	str	r3, [r6, #20]
		port_pin_set_output_level(MOTOR_CONTROLLER_STP_PIN, false);
		delay_us(STEPPER_PULSE_PERIOD_us);
    15aa:	2064      	movs	r0, #100	; 0x64
    15ac:	47a8      	blx	r5
	for(int i = 0; i <= steps; i++){
    15ae:	3401      	adds	r4, #1
    15b0:	42bc      	cmp	r4, r7
    15b2:	ddf3      	ble.n	159c <drv_ctrl_moveto+0x40>
	}
	
	actual_position_mm = position_mm;
    15b4:	4b06      	ldr	r3, [pc, #24]	; (15d0 <drv_ctrl_moveto+0x74>)
    15b6:	4642      	mov	r2, r8
    15b8:	801a      	strh	r2, [r3, #0]
	
	return EXIT_SUCCESS;
    15ba:	2000      	movs	r0, #0
	
}
    15bc:	bc1c      	pop	{r2, r3, r4}
    15be:	4690      	mov	r8, r2
    15c0:	4699      	mov	r9, r3
    15c2:	46a2      	mov	sl, r4
    15c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15c6:	2280      	movs	r2, #128	; 0x80
    15c8:	0352      	lsls	r2, r2, #13
    15ca:	4b02      	ldr	r3, [pc, #8]	; (15d4 <drv_ctrl_moveto+0x78>)
    15cc:	615a      	str	r2, [r3, #20]
    15ce:	e7df      	b.n	1590 <drv_ctrl_moveto+0x34>
    15d0:	20000044 	.word	0x20000044
    15d4:	41004400 	.word	0x41004400
    15d8:	00000145 	.word	0x00000145

000015dc <plc_com_receive_callback>:
}

void plc_com_receive_callback() {
	/* Callback function for receiving messages from the PLC. Takes the message and converts it via plc_com_plc_to_state to predefined state which is then used to switch the state of the machine.
	 * Returns the state*/
}
    15dc:	4770      	bx	lr
	...

000015e0 <iputc>:
#include "rprintf.h"

struct usart_module my_usart_instance;

static void iputc(uint8_t ch)
{
    15e0:	b570      	push	{r4, r5, r6, lr}
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
	while(STATUS_OK !=usart_write_wait(module, c));
    15e2:	b284      	uxth	r4, r0
    15e4:	4e03      	ldr	r6, [pc, #12]	; (15f4 <iputc+0x14>)
    15e6:	4d04      	ldr	r5, [pc, #16]	; (15f8 <iputc+0x18>)
    15e8:	0021      	movs	r1, r4
    15ea:	0030      	movs	r0, r6
    15ec:	47a8      	blx	r5
    15ee:	2800      	cmp	r0, #0
    15f0:	d1fa      	bne.n	15e8 <iputc+0x8>
	/*This function has to be replaced by user*/	
	usart_serial_putchar(&my_usart_instance, ch);
}
    15f2:	bd70      	pop	{r4, r5, r6, pc}
    15f4:	200000a4 	.word	0x200000a4
    15f8:	000012c5 	.word	0x000012c5

000015fc <rprintf_init>:
static uint8_t* change(uint32_t Index)
{
    return (uint8_t*)("0123456789abcdef"+Index);
}

void rprintf_init() {
    15fc:	b570      	push	{r4, r5, r6, lr}
    15fe:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1600:	2380      	movs	r3, #128	; 0x80
    1602:	05db      	lsls	r3, r3, #23
    1604:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1606:	2300      	movs	r3, #0
    1608:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    160a:	22ff      	movs	r2, #255	; 0xff
    160c:	4669      	mov	r1, sp
    160e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1610:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1612:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1614:	2296      	movs	r2, #150	; 0x96
    1616:	0192      	lsls	r2, r2, #6
    1618:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    161a:	2401      	movs	r4, #1
    161c:	466a      	mov	r2, sp
    161e:	750c      	strb	r4, [r1, #20]
	config->transmitter_enable = true;
    1620:	754c      	strb	r4, [r1, #21]
	config->clock_polarity_inverted = false;
    1622:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1624:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1626:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1628:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    162a:	774b      	strb	r3, [r1, #29]
    struct usart_config my_config_usart;

    usart_get_config_defaults(&my_config_usart);

    my_config_usart.baudrate    = 9600;
	my_config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    162c:	23c4      	movs	r3, #196	; 0xc4
    162e:	039b      	lsls	r3, r3, #14
    1630:	9303      	str	r3, [sp, #12]
    my_config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1632:	2301      	movs	r3, #1
    1634:	425b      	negs	r3, r3
    1636:	9308      	str	r3, [sp, #32]
    my_config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1638:	9309      	str	r3, [sp, #36]	; 0x24
    my_config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    163a:	4b0e      	ldr	r3, [pc, #56]	; (1674 <rprintf_init+0x78>)
    163c:	930a      	str	r3, [sp, #40]	; 0x28
    my_config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    163e:	4b0e      	ldr	r3, [pc, #56]	; (1678 <rprintf_init+0x7c>)
    1640:	930b      	str	r3, [sp, #44]	; 0x2c
	if (usart_init(module, hw, config) == STATUS_OK) {
    1642:	4e0e      	ldr	r6, [pc, #56]	; (167c <rprintf_init+0x80>)
    1644:	490e      	ldr	r1, [pc, #56]	; (1680 <rprintf_init+0x84>)
    1646:	0030      	movs	r0, r6
    1648:	4b0e      	ldr	r3, [pc, #56]	; (1684 <rprintf_init+0x88>)
    164a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    164c:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    164e:	0028      	movs	r0, r5
    1650:	4b0d      	ldr	r3, [pc, #52]	; (1688 <rprintf_init+0x8c>)
    1652:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1654:	231f      	movs	r3, #31
    1656:	4018      	ands	r0, r3
    1658:	4084      	lsls	r4, r0
    165a:	4b0c      	ldr	r3, [pc, #48]	; (168c <rprintf_init+0x90>)
    165c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    165e:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1660:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1662:	b21b      	sxth	r3, r3
    1664:	2b00      	cmp	r3, #0
    1666:	dbfb      	blt.n	1660 <rprintf_init+0x64>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1668:	682b      	ldr	r3, [r5, #0]
    166a:	2202      	movs	r2, #2
    166c:	4313      	orrs	r3, r2
    166e:	602b      	str	r3, [r5, #0]

    usart_serial_init(&my_usart_instance, EDBG_CDC_MODULE,&my_config_usart);
    usart_enable(&my_usart_instance);
}
    1670:	b00c      	add	sp, #48	; 0x30
    1672:	bd70      	pop	{r4, r5, r6, pc}
    1674:	00180002 	.word	0x00180002
    1678:	00190002 	.word	0x00190002
    167c:	200000a4 	.word	0x200000a4
    1680:	42001400 	.word	0x42001400
    1684:	00001079 	.word	0x00001079
    1688:	000009d1 	.word	0x000009d1
    168c:	e000e100 	.word	0xe000e100

00001690 <rprintf>:

void rprintf(const uint8_t *pszFmt,...)
{
    1690:	b40f      	push	{r0, r1, r2, r3}
    1692:	b5f0      	push	{r4, r5, r6, r7, lr}
    1694:	46de      	mov	lr, fp
    1696:	4657      	mov	r7, sl
    1698:	464e      	mov	r6, r9
    169a:	4645      	mov	r5, r8
    169c:	b5e0      	push	{r5, r6, r7, lr}
    169e:	b08f      	sub	sp, #60	; 0x3c
    uint8_t *pszVal;
    uint32_t iVal, xVal, i = 0, buffer[12], index = 1;
    16a0:	2401      	movs	r4, #1
                buffer[i++]=0;

            while(i > 0)
            {
                i--;
                iputc(*change(buffer[i]));
    16a2:	4b56      	ldr	r3, [pc, #344]	; (17fc <rprintf+0x16c>)
    16a4:	469b      	mov	fp, r3
    while(*pszFmt)
    16a6:	e00d      	b.n	16c4 <rprintf+0x34>
        pszFmt++;
    16a8:	1c6a      	adds	r2, r5, #1
    16aa:	9218      	str	r2, [sp, #96]	; 0x60
        if(*pszFmt == 's')
    16ac:	786b      	ldrb	r3, [r5, #1]
    16ae:	2b73      	cmp	r3, #115	; 0x73
    16b0:	d014      	beq.n	16dc <rprintf+0x4c>
        if(*pszFmt == 'd')
    16b2:	2b64      	cmp	r3, #100	; 0x64
    16b4:	d025      	beq.n	1702 <rprintf+0x72>
        if(*pszFmt == 'c')
    16b6:	2b63      	cmp	r3, #99	; 0x63
    16b8:	d054      	beq.n	1764 <rprintf+0xd4>
        if(*pszFmt == 'x')
    16ba:	2b78      	cmp	r3, #120	; 0x78
    16bc:	d05e      	beq.n	177c <rprintf+0xec>
            }
            pszFmt++;
            continue;
        }
        if(pszFmt == '\0')
    16be:	2a00      	cmp	r2, #0
    16c0:	d100      	bne.n	16c4 <rprintf+0x34>
    16c2:	e090      	b.n	17e6 <rprintf+0x156>
    while(*pszFmt)
    16c4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    16c6:	7828      	ldrb	r0, [r5, #0]
    16c8:	2800      	cmp	r0, #0
    16ca:	d100      	bne.n	16ce <rprintf+0x3e>
    16cc:	e08b      	b.n	17e6 <rprintf+0x156>
        if('%' != *pszFmt)
    16ce:	2825      	cmp	r0, #37	; 0x25
    16d0:	d0ea      	beq.n	16a8 <rprintf+0x18>
            iputc(*pszFmt);
    16d2:	4b4b      	ldr	r3, [pc, #300]	; (1800 <rprintf+0x170>)
    16d4:	4798      	blx	r3
            pszFmt++;
    16d6:	3501      	adds	r5, #1
    16d8:	9518      	str	r5, [sp, #96]	; 0x60
            continue;
    16da:	e7f3      	b.n	16c4 <rprintf+0x34>
            pszVal = (uint8_t*)pArg[index++];
    16dc:	1c67      	adds	r7, r4, #1
    16de:	00a4      	lsls	r4, r4, #2
    16e0:	ab18      	add	r3, sp, #96	; 0x60
    16e2:	469c      	mov	ip, r3
    16e4:	4464      	add	r4, ip
    16e6:	6824      	ldr	r4, [r4, #0]
            for(; *pszVal != '\0'; pszVal++)
    16e8:	7820      	ldrb	r0, [r4, #0]
    16ea:	2800      	cmp	r0, #0
    16ec:	d005      	beq.n	16fa <rprintf+0x6a>
                iputc(*pszVal);
    16ee:	4e44      	ldr	r6, [pc, #272]	; (1800 <rprintf+0x170>)
    16f0:	47b0      	blx	r6
            for(; *pszVal != '\0'; pszVal++)
    16f2:	3401      	adds	r4, #1
    16f4:	7820      	ldrb	r0, [r4, #0]
    16f6:	2800      	cmp	r0, #0
    16f8:	d1fa      	bne.n	16f0 <rprintf+0x60>
            pszFmt++;
    16fa:	3502      	adds	r5, #2
    16fc:	9518      	str	r5, [sp, #96]	; 0x60
            pszVal = (uint8_t*)pArg[index++];
    16fe:	003c      	movs	r4, r7
            continue;
    1700:	e7e0      	b.n	16c4 <rprintf+0x34>
            iVal = pArg[index++];
    1702:	1c63      	adds	r3, r4, #1
    1704:	9301      	str	r3, [sp, #4]
    1706:	00a4      	lsls	r4, r4, #2
    1708:	ab18      	add	r3, sp, #96	; 0x60
    170a:	469c      	mov	ip, r3
    170c:	4464      	add	r4, ip
    170e:	6826      	ldr	r6, [r4, #0]
    1710:	ab02      	add	r3, sp, #8
    1712:	4698      	mov	r8, r3
            i = 0;
    1714:	2700      	movs	r7, #0
                buffer[i++] = iVal % 10;
    1716:	4b3b      	ldr	r3, [pc, #236]	; (1804 <rprintf+0x174>)
    1718:	469a      	mov	sl, r3
                iVal /= 10;
    171a:	4b3b      	ldr	r3, [pc, #236]	; (1808 <rprintf+0x178>)
    171c:	4699      	mov	r9, r3
    171e:	e000      	b.n	1722 <rprintf+0x92>
                buffer[i++] = iVal % 10;
    1720:	0027      	movs	r7, r4
    1722:	1c7c      	adds	r4, r7, #1
    1724:	210a      	movs	r1, #10
    1726:	0030      	movs	r0, r6
    1728:	47d0      	blx	sl
    172a:	4643      	mov	r3, r8
    172c:	c302      	stmia	r3!, {r1}
    172e:	4698      	mov	r8, r3
                iVal /= 10;
    1730:	210a      	movs	r1, #10
    1732:	0030      	movs	r0, r6
    1734:	47c8      	blx	r9
    1736:	1e06      	subs	r6, r0, #0
            }while(iVal);
    1738:	d1f2      	bne.n	1720 <rprintf+0x90>
            while(i > 0)
    173a:	2c00      	cmp	r4, #0
    173c:	d00e      	beq.n	175c <rprintf+0xcc>
    173e:	00bf      	lsls	r7, r7, #2
    1740:	ab02      	add	r3, sp, #8
    1742:	469c      	mov	ip, r3
    1744:	4467      	add	r7, ip
                iputc(*change(buffer[i]));
    1746:	4b2d      	ldr	r3, [pc, #180]	; (17fc <rprintf+0x16c>)
    1748:	4698      	mov	r8, r3
    174a:	4e2d      	ldr	r6, [pc, #180]	; (1800 <rprintf+0x170>)
                i--;
    174c:	3c01      	subs	r4, #1
                iputc(*change(buffer[i]));
    174e:	4643      	mov	r3, r8
    1750:	683a      	ldr	r2, [r7, #0]
    1752:	5c98      	ldrb	r0, [r3, r2]
    1754:	47b0      	blx	r6
    1756:	3f04      	subs	r7, #4
            while(i > 0)
    1758:	2c00      	cmp	r4, #0
    175a:	d1f7      	bne.n	174c <rprintf+0xbc>
            pszFmt++;
    175c:	3502      	adds	r5, #2
    175e:	9518      	str	r5, [sp, #96]	; 0x60
            iVal = pArg[index++];
    1760:	9c01      	ldr	r4, [sp, #4]
            continue;
    1762:	e7af      	b.n	16c4 <rprintf+0x34>
            cVal = (uint8_t)pArg[index++];
    1764:	1c66      	adds	r6, r4, #1
    1766:	00a4      	lsls	r4, r4, #2
    1768:	ab18      	add	r3, sp, #96	; 0x60
    176a:	469c      	mov	ip, r3
    176c:	4464      	add	r4, ip
            iputc(cVal);
    176e:	7820      	ldrb	r0, [r4, #0]
    1770:	4b23      	ldr	r3, [pc, #140]	; (1800 <rprintf+0x170>)
    1772:	4798      	blx	r3
            pszFmt++;
    1774:	3502      	adds	r5, #2
    1776:	9518      	str	r5, [sp, #96]	; 0x60
            cVal = (uint8_t)pArg[index++];
    1778:	0034      	movs	r4, r6
            continue;
    177a:	e7a3      	b.n	16c4 <rprintf+0x34>
            xVal = pArg[index++];
    177c:	1c67      	adds	r7, r4, #1
    177e:	00a4      	lsls	r4, r4, #2
    1780:	ab18      	add	r3, sp, #96	; 0x60
    1782:	469c      	mov	ip, r3
    1784:	4464      	add	r4, ip
    1786:	6823      	ldr	r3, [r4, #0]
    1788:	aa02      	add	r2, sp, #8
            i = 0;
    178a:	2100      	movs	r1, #0
                buffer[i++] = xVal % 16;
    178c:	260f      	movs	r6, #15
    178e:	e000      	b.n	1792 <rprintf+0x102>
    1790:	0021      	movs	r1, r4
    1792:	1c4c      	adds	r4, r1, #1
    1794:	0030      	movs	r0, r6
    1796:	4018      	ands	r0, r3
    1798:	c201      	stmia	r2!, {r0}
                xVal /= 16;
    179a:	091b      	lsrs	r3, r3, #4
            }while(xVal);
    179c:	d1f8      	bne.n	1790 <rprintf+0x100>
            if(i%2!=0)
    179e:	07e3      	lsls	r3, r4, #31
    17a0:	d504      	bpl.n	17ac <rprintf+0x11c>
                buffer[i++]=0;
    17a2:	00a4      	lsls	r4, r4, #2
    17a4:	2300      	movs	r3, #0
    17a6:	aa02      	add	r2, sp, #8
    17a8:	50a3      	str	r3, [r4, r2]
    17aa:	1c8c      	adds	r4, r1, #2
            if(i<2)
    17ac:	2c01      	cmp	r4, #1
    17ae:	d914      	bls.n	17da <rprintf+0x14a>
            while(i > 0)
    17b0:	2c00      	cmp	r4, #0
    17b2:	d00e      	beq.n	17d2 <rprintf+0x142>
    17b4:	4b15      	ldr	r3, [pc, #84]	; (180c <rprintf+0x17c>)
    17b6:	18e6      	adds	r6, r4, r3
    17b8:	00b6      	lsls	r6, r6, #2
    17ba:	ab02      	add	r3, sp, #8
    17bc:	469c      	mov	ip, r3
    17be:	4466      	add	r6, ip
                i--;
    17c0:	3c01      	subs	r4, #1
                iputc(*change(buffer[i]));
    17c2:	465b      	mov	r3, fp
    17c4:	6832      	ldr	r2, [r6, #0]
    17c6:	5c98      	ldrb	r0, [r3, r2]
    17c8:	4b0d      	ldr	r3, [pc, #52]	; (1800 <rprintf+0x170>)
    17ca:	4798      	blx	r3
    17cc:	3e04      	subs	r6, #4
            while(i > 0)
    17ce:	2c00      	cmp	r4, #0
    17d0:	d1f6      	bne.n	17c0 <rprintf+0x130>
            pszFmt++;
    17d2:	3502      	adds	r5, #2
    17d4:	9518      	str	r5, [sp, #96]	; 0x60
            xVal = pArg[index++];
    17d6:	003c      	movs	r4, r7
            continue;
    17d8:	e774      	b.n	16c4 <rprintf+0x34>
                buffer[i++]=0;
    17da:	00a3      	lsls	r3, r4, #2
    17dc:	2200      	movs	r2, #0
    17de:	a902      	add	r1, sp, #8
    17e0:	505a      	str	r2, [r3, r1]
    17e2:	3401      	adds	r4, #1
    17e4:	e7e4      	b.n	17b0 <rprintf+0x120>
        {
            break;
        }

    }
    17e6:	b00f      	add	sp, #60	; 0x3c
    17e8:	bc3c      	pop	{r2, r3, r4, r5}
    17ea:	4690      	mov	r8, r2
    17ec:	4699      	mov	r9, r3
    17ee:	46a2      	mov	sl, r4
    17f0:	46ab      	mov	fp, r5
    17f2:	bcf0      	pop	{r4, r5, r6, r7}
    17f4:	bc08      	pop	{r3}
    17f6:	b004      	add	sp, #16
    17f8:	4718      	bx	r3
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	00002500 	.word	0x00002500
    1800:	000015e1 	.word	0x000015e1
    1804:	000022f9 	.word	0x000022f9
    1808:	000021ed 	.word	0x000021ed
    180c:	3fffffff 	.word	0x3fffffff

00001810 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1810:	4b0c      	ldr	r3, [pc, #48]	; (1844 <cpu_irq_enter_critical+0x34>)
    1812:	681b      	ldr	r3, [r3, #0]
    1814:	2b00      	cmp	r3, #0
    1816:	d106      	bne.n	1826 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1818:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    181c:	2b00      	cmp	r3, #0
    181e:	d007      	beq.n	1830 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1820:	2200      	movs	r2, #0
    1822:	4b09      	ldr	r3, [pc, #36]	; (1848 <cpu_irq_enter_critical+0x38>)
    1824:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1826:	4a07      	ldr	r2, [pc, #28]	; (1844 <cpu_irq_enter_critical+0x34>)
    1828:	6813      	ldr	r3, [r2, #0]
    182a:	3301      	adds	r3, #1
    182c:	6013      	str	r3, [r2, #0]
}
    182e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1830:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1832:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1836:	2200      	movs	r2, #0
    1838:	4b04      	ldr	r3, [pc, #16]	; (184c <cpu_irq_enter_critical+0x3c>)
    183a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    183c:	3201      	adds	r2, #1
    183e:	4b02      	ldr	r3, [pc, #8]	; (1848 <cpu_irq_enter_critical+0x38>)
    1840:	701a      	strb	r2, [r3, #0]
    1842:	e7f0      	b.n	1826 <cpu_irq_enter_critical+0x16>
    1844:	20000070 	.word	0x20000070
    1848:	20000074 	.word	0x20000074
    184c:	20000008 	.word	0x20000008

00001850 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1850:	4b08      	ldr	r3, [pc, #32]	; (1874 <cpu_irq_leave_critical+0x24>)
    1852:	681a      	ldr	r2, [r3, #0]
    1854:	3a01      	subs	r2, #1
    1856:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	2b00      	cmp	r3, #0
    185c:	d109      	bne.n	1872 <cpu_irq_leave_critical+0x22>
    185e:	4b06      	ldr	r3, [pc, #24]	; (1878 <cpu_irq_leave_critical+0x28>)
    1860:	781b      	ldrb	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d005      	beq.n	1872 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1866:	2201      	movs	r2, #1
    1868:	4b04      	ldr	r3, [pc, #16]	; (187c <cpu_irq_leave_critical+0x2c>)
    186a:	701a      	strb	r2, [r3, #0]
    186c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1870:	b662      	cpsie	i
	}
}
    1872:	4770      	bx	lr
    1874:	20000070 	.word	0x20000070
    1878:	20000074 	.word	0x20000074
    187c:	20000008 	.word	0x20000008

00001880 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1884:	ac01      	add	r4, sp, #4
    1886:	2501      	movs	r5, #1
    1888:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    188a:	2700      	movs	r7, #0
    188c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    188e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1890:	0021      	movs	r1, r4
    1892:	200e      	movs	r0, #14
    1894:	4e06      	ldr	r6, [pc, #24]	; (18b0 <system_board_init+0x30>)
    1896:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1898:	2280      	movs	r2, #128	; 0x80
    189a:	01d2      	lsls	r2, r2, #7
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <system_board_init+0x34>)
    189e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    18a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    18a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    18a4:	0021      	movs	r1, r4
    18a6:	200f      	movs	r0, #15
    18a8:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
    18aa:	b003      	add	sp, #12
    18ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	000018b9 	.word	0x000018b9
    18b4:	41004400 	.word	0x41004400

000018b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    18b8:	b500      	push	{lr}
    18ba:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    18bc:	ab01      	add	r3, sp, #4
    18be:	2280      	movs	r2, #128	; 0x80
    18c0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    18c2:	780a      	ldrb	r2, [r1, #0]
    18c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    18c6:	784a      	ldrb	r2, [r1, #1]
    18c8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    18ca:	788a      	ldrb	r2, [r1, #2]
    18cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    18ce:	0019      	movs	r1, r3
    18d0:	4b01      	ldr	r3, [pc, #4]	; (18d8 <port_pin_set_config+0x20>)
    18d2:	4798      	blx	r3
}
    18d4:	b003      	add	sp, #12
    18d6:	bd00      	pop	{pc}
    18d8:	00001ded 	.word	0x00001ded

000018dc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    18dc:	b510      	push	{r4, lr}
	switch (clock_source) {
    18de:	2807      	cmp	r0, #7
    18e0:	d803      	bhi.n	18ea <system_clock_source_get_hz+0xe>
    18e2:	0080      	lsls	r0, r0, #2
    18e4:	4b16      	ldr	r3, [pc, #88]	; (1940 <system_clock_source_get_hz+0x64>)
    18e6:	581b      	ldr	r3, [r3, r0]
    18e8:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    18ea:	2000      	movs	r0, #0
    18ec:	e027      	b.n	193e <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    18ee:	4b15      	ldr	r3, [pc, #84]	; (1944 <system_clock_source_get_hz+0x68>)
    18f0:	68d8      	ldr	r0, [r3, #12]
    18f2:	e024      	b.n	193e <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    18f4:	4b14      	ldr	r3, [pc, #80]	; (1948 <system_clock_source_get_hz+0x6c>)
    18f6:	6a1b      	ldr	r3, [r3, #32]
    18f8:	059b      	lsls	r3, r3, #22
    18fa:	0f9b      	lsrs	r3, r3, #30
    18fc:	4813      	ldr	r0, [pc, #76]	; (194c <system_clock_source_get_hz+0x70>)
    18fe:	40d8      	lsrs	r0, r3
    1900:	e01d      	b.n	193e <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    1902:	4b10      	ldr	r3, [pc, #64]	; (1944 <system_clock_source_get_hz+0x68>)
    1904:	6918      	ldr	r0, [r3, #16]
    1906:	e01a      	b.n	193e <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1908:	4b0e      	ldr	r3, [pc, #56]	; (1944 <system_clock_source_get_hz+0x68>)
    190a:	681b      	ldr	r3, [r3, #0]
			return 0;
    190c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    190e:	079b      	lsls	r3, r3, #30
    1910:	d515      	bpl.n	193e <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1912:	490d      	ldr	r1, [pc, #52]	; (1948 <system_clock_source_get_hz+0x6c>)
    1914:	2210      	movs	r2, #16
    1916:	68cb      	ldr	r3, [r1, #12]
    1918:	421a      	tst	r2, r3
    191a:	d0fc      	beq.n	1916 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    191c:	4b09      	ldr	r3, [pc, #36]	; (1944 <system_clock_source_get_hz+0x68>)
    191e:	681b      	ldr	r3, [r3, #0]
    1920:	075b      	lsls	r3, r3, #29
    1922:	d401      	bmi.n	1928 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1924:	480a      	ldr	r0, [pc, #40]	; (1950 <system_clock_source_get_hz+0x74>)
    1926:	e00a      	b.n	193e <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1928:	2000      	movs	r0, #0
    192a:	4b0a      	ldr	r3, [pc, #40]	; (1954 <system_clock_source_get_hz+0x78>)
    192c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    192e:	4b05      	ldr	r3, [pc, #20]	; (1944 <system_clock_source_get_hz+0x68>)
    1930:	689b      	ldr	r3, [r3, #8]
    1932:	041b      	lsls	r3, r3, #16
    1934:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1936:	4358      	muls	r0, r3
    1938:	e001      	b.n	193e <system_clock_source_get_hz+0x62>
		return 32768UL;
    193a:	2080      	movs	r0, #128	; 0x80
    193c:	0200      	lsls	r0, r0, #8
	}
}
    193e:	bd10      	pop	{r4, pc}
    1940:	00002514 	.word	0x00002514
    1944:	20000078 	.word	0x20000078
    1948:	40000800 	.word	0x40000800
    194c:	007a1200 	.word	0x007a1200
    1950:	02dc6c00 	.word	0x02dc6c00
    1954:	00001d11 	.word	0x00001d11

00001958 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1958:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    195a:	490c      	ldr	r1, [pc, #48]	; (198c <system_clock_source_osc8m_set_config+0x34>)
    195c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    195e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1960:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1962:	7840      	ldrb	r0, [r0, #1]
    1964:	2201      	movs	r2, #1
    1966:	4010      	ands	r0, r2
    1968:	0180      	lsls	r0, r0, #6
    196a:	2640      	movs	r6, #64	; 0x40
    196c:	43b3      	bics	r3, r6
    196e:	4303      	orrs	r3, r0
    1970:	402a      	ands	r2, r5
    1972:	01d2      	lsls	r2, r2, #7
    1974:	2080      	movs	r0, #128	; 0x80
    1976:	4383      	bics	r3, r0
    1978:	4313      	orrs	r3, r2
    197a:	2203      	movs	r2, #3
    197c:	4022      	ands	r2, r4
    197e:	0212      	lsls	r2, r2, #8
    1980:	4803      	ldr	r0, [pc, #12]	; (1990 <system_clock_source_osc8m_set_config+0x38>)
    1982:	4003      	ands	r3, r0
    1984:	4313      	orrs	r3, r2
    1986:	620b      	str	r3, [r1, #32]
}
    1988:	bd70      	pop	{r4, r5, r6, pc}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	40000800 	.word	0x40000800
    1990:	fffffcff 	.word	0xfffffcff

00001994 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1994:	2807      	cmp	r0, #7
    1996:	d803      	bhi.n	19a0 <system_clock_source_enable+0xc>
    1998:	0080      	lsls	r0, r0, #2
    199a:	4b1e      	ldr	r3, [pc, #120]	; (1a14 <system_clock_source_enable+0x80>)
    199c:	581b      	ldr	r3, [r3, r0]
    199e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    19a0:	2017      	movs	r0, #23
    19a2:	e036      	b.n	1a12 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    19a4:	4a1c      	ldr	r2, [pc, #112]	; (1a18 <system_clock_source_enable+0x84>)
    19a6:	6a13      	ldr	r3, [r2, #32]
    19a8:	2102      	movs	r1, #2
    19aa:	430b      	orrs	r3, r1
    19ac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    19ae:	2000      	movs	r0, #0
    19b0:	e02f      	b.n	1a12 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    19b2:	4a19      	ldr	r2, [pc, #100]	; (1a18 <system_clock_source_enable+0x84>)
    19b4:	6993      	ldr	r3, [r2, #24]
    19b6:	2102      	movs	r1, #2
    19b8:	430b      	orrs	r3, r1
    19ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    19bc:	2000      	movs	r0, #0
		break;
    19be:	e028      	b.n	1a12 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    19c0:	4a15      	ldr	r2, [pc, #84]	; (1a18 <system_clock_source_enable+0x84>)
    19c2:	8a13      	ldrh	r3, [r2, #16]
    19c4:	2102      	movs	r1, #2
    19c6:	430b      	orrs	r3, r1
    19c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    19ca:	2000      	movs	r0, #0
		break;
    19cc:	e021      	b.n	1a12 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    19ce:	4a12      	ldr	r2, [pc, #72]	; (1a18 <system_clock_source_enable+0x84>)
    19d0:	8a93      	ldrh	r3, [r2, #20]
    19d2:	2102      	movs	r1, #2
    19d4:	430b      	orrs	r3, r1
    19d6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    19d8:	2000      	movs	r0, #0
		break;
    19da:	e01a      	b.n	1a12 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    19dc:	4b0f      	ldr	r3, [pc, #60]	; (1a1c <system_clock_source_enable+0x88>)
    19de:	681a      	ldr	r2, [r3, #0]
    19e0:	2102      	movs	r1, #2
    19e2:	430a      	orrs	r2, r1
    19e4:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	4a0d      	ldr	r2, [pc, #52]	; (1a20 <system_clock_source_enable+0x8c>)
    19ea:	4013      	ands	r3, r2
    19ec:	4a0a      	ldr	r2, [pc, #40]	; (1a18 <system_clock_source_enable+0x84>)
    19ee:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19f0:	0011      	movs	r1, r2
    19f2:	2210      	movs	r2, #16
    19f4:	68cb      	ldr	r3, [r1, #12]
    19f6:	421a      	tst	r2, r3
    19f8:	d0fc      	beq.n	19f4 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    19fa:	4a08      	ldr	r2, [pc, #32]	; (1a1c <system_clock_source_enable+0x88>)
    19fc:	6891      	ldr	r1, [r2, #8]
    19fe:	4b06      	ldr	r3, [pc, #24]	; (1a18 <system_clock_source_enable+0x84>)
    1a00:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1a02:	6851      	ldr	r1, [r2, #4]
    1a04:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1a06:	6812      	ldr	r2, [r2, #0]
    1a08:	b292      	uxth	r2, r2
    1a0a:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    1a0c:	2000      	movs	r0, #0
    1a0e:	e000      	b.n	1a12 <system_clock_source_enable+0x7e>
		return STATUS_OK;
    1a10:	2000      	movs	r0, #0
}
    1a12:	4770      	bx	lr
    1a14:	00002534 	.word	0x00002534
    1a18:	40000800 	.word	0x40000800
    1a1c:	20000078 	.word	0x20000078
    1a20:	0000ff7f 	.word	0x0000ff7f

00001a24 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1a24:	b530      	push	{r4, r5, lr}
    1a26:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1a28:	22c2      	movs	r2, #194	; 0xc2
    1a2a:	00d2      	lsls	r2, r2, #3
    1a2c:	4b1a      	ldr	r3, [pc, #104]	; (1a98 <system_clock_init+0x74>)
    1a2e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1a30:	4a1a      	ldr	r2, [pc, #104]	; (1a9c <system_clock_init+0x78>)
    1a32:	6853      	ldr	r3, [r2, #4]
    1a34:	211e      	movs	r1, #30
    1a36:	438b      	bics	r3, r1
    1a38:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1a3a:	2301      	movs	r3, #1
    1a3c:	466a      	mov	r2, sp
    1a3e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a40:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a42:	4d17      	ldr	r5, [pc, #92]	; (1aa0 <system_clock_init+0x7c>)
    1a44:	b2e0      	uxtb	r0, r4
    1a46:	4669      	mov	r1, sp
    1a48:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a4a:	3401      	adds	r4, #1
    1a4c:	2c1c      	cmp	r4, #28
    1a4e:	d1f9      	bne.n	1a44 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1a50:	a803      	add	r0, sp, #12
    1a52:	2400      	movs	r4, #0
    1a54:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1a56:	2501      	movs	r5, #1
    1a58:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1a5a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1a5c:	4b11      	ldr	r3, [pc, #68]	; (1aa4 <system_clock_init+0x80>)
    1a5e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1a60:	2006      	movs	r0, #6
    1a62:	4b11      	ldr	r3, [pc, #68]	; (1aa8 <system_clock_init+0x84>)
    1a64:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a66:	4b11      	ldr	r3, [pc, #68]	; (1aac <system_clock_init+0x88>)
    1a68:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1a6a:	4b11      	ldr	r3, [pc, #68]	; (1ab0 <system_clock_init+0x8c>)
    1a6c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1a6e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1a70:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1a72:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1a74:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1a76:	466b      	mov	r3, sp
    1a78:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1a7a:	2306      	movs	r3, #6
    1a7c:	466a      	mov	r2, sp
    1a7e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1a80:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1a82:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a84:	4669      	mov	r1, sp
    1a86:	2000      	movs	r0, #0
    1a88:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <system_clock_init+0x90>)
    1a8a:	4798      	blx	r3
    1a8c:	2000      	movs	r0, #0
    1a8e:	4b0a      	ldr	r3, [pc, #40]	; (1ab8 <system_clock_init+0x94>)
    1a90:	4798      	blx	r3
#endif
}
    1a92:	b005      	add	sp, #20
    1a94:	bd30      	pop	{r4, r5, pc}
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	40000800 	.word	0x40000800
    1a9c:	41004000 	.word	0x41004000
    1aa0:	00001cf5 	.word	0x00001cf5
    1aa4:	00001959 	.word	0x00001959
    1aa8:	00001995 	.word	0x00001995
    1aac:	00001abd 	.word	0x00001abd
    1ab0:	40000400 	.word	0x40000400
    1ab4:	00001ae1 	.word	0x00001ae1
    1ab8:	00001b99 	.word	0x00001b99

00001abc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1abc:	4a06      	ldr	r2, [pc, #24]	; (1ad8 <system_gclk_init+0x1c>)
    1abe:	6993      	ldr	r3, [r2, #24]
    1ac0:	2108      	movs	r1, #8
    1ac2:	430b      	orrs	r3, r1
    1ac4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ac6:	2201      	movs	r2, #1
    1ac8:	4b04      	ldr	r3, [pc, #16]	; (1adc <system_gclk_init+0x20>)
    1aca:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1acc:	0019      	movs	r1, r3
    1ace:	780b      	ldrb	r3, [r1, #0]
    1ad0:	4213      	tst	r3, r2
    1ad2:	d1fc      	bne.n	1ace <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1ad4:	4770      	bx	lr
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	40000400 	.word	0x40000400
    1adc:	40000c00 	.word	0x40000c00

00001ae0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
    1ae2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1ae4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ae6:	780d      	ldrb	r5, [r1, #0]
    1ae8:	022d      	lsls	r5, r5, #8
    1aea:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1aec:	784b      	ldrb	r3, [r1, #1]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d002      	beq.n	1af8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1af2:	2380      	movs	r3, #128	; 0x80
    1af4:	02db      	lsls	r3, r3, #11
    1af6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1af8:	7a4b      	ldrb	r3, [r1, #9]
    1afa:	2b00      	cmp	r3, #0
    1afc:	d002      	beq.n	1b04 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1afe:	2380      	movs	r3, #128	; 0x80
    1b00:	031b      	lsls	r3, r3, #12
    1b02:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1b04:	6848      	ldr	r0, [r1, #4]
    1b06:	2801      	cmp	r0, #1
    1b08:	d910      	bls.n	1b2c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1b0a:	1e43      	subs	r3, r0, #1
    1b0c:	4218      	tst	r0, r3
    1b0e:	d134      	bne.n	1b7a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1b10:	2802      	cmp	r0, #2
    1b12:	d930      	bls.n	1b76 <system_gclk_gen_set_config+0x96>
    1b14:	2302      	movs	r3, #2
    1b16:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1b18:	3201      	adds	r2, #1
						mask <<= 1) {
    1b1a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1b1c:	4298      	cmp	r0, r3
    1b1e:	d8fb      	bhi.n	1b18 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1b20:	0212      	lsls	r2, r2, #8
    1b22:	4332      	orrs	r2, r6
    1b24:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1b26:	2380      	movs	r3, #128	; 0x80
    1b28:	035b      	lsls	r3, r3, #13
    1b2a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1b2c:	7a0b      	ldrb	r3, [r1, #8]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d002      	beq.n	1b38 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1b32:	2380      	movs	r3, #128	; 0x80
    1b34:	039b      	lsls	r3, r3, #14
    1b36:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b38:	4a13      	ldr	r2, [pc, #76]	; (1b88 <system_gclk_gen_set_config+0xa8>)
    1b3a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1b3c:	b25b      	sxtb	r3, r3
    1b3e:	2b00      	cmp	r3, #0
    1b40:	dbfb      	blt.n	1b3a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1b42:	4b12      	ldr	r3, [pc, #72]	; (1b8c <system_gclk_gen_set_config+0xac>)
    1b44:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b46:	4b12      	ldr	r3, [pc, #72]	; (1b90 <system_gclk_gen_set_config+0xb0>)
    1b48:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b4a:	4a0f      	ldr	r2, [pc, #60]	; (1b88 <system_gclk_gen_set_config+0xa8>)
    1b4c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1b4e:	b25b      	sxtb	r3, r3
    1b50:	2b00      	cmp	r3, #0
    1b52:	dbfb      	blt.n	1b4c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1b54:	4b0c      	ldr	r3, [pc, #48]	; (1b88 <system_gclk_gen_set_config+0xa8>)
    1b56:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b58:	001a      	movs	r2, r3
    1b5a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1b5c:	b25b      	sxtb	r3, r3
    1b5e:	2b00      	cmp	r3, #0
    1b60:	dbfb      	blt.n	1b5a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b62:	4a09      	ldr	r2, [pc, #36]	; (1b88 <system_gclk_gen_set_config+0xa8>)
    1b64:	6853      	ldr	r3, [r2, #4]
    1b66:	2180      	movs	r1, #128	; 0x80
    1b68:	0249      	lsls	r1, r1, #9
    1b6a:	400b      	ands	r3, r1
    1b6c:	431d      	orrs	r5, r3
    1b6e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1b70:	4b08      	ldr	r3, [pc, #32]	; (1b94 <system_gclk_gen_set_config+0xb4>)
    1b72:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b74:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1b76:	2200      	movs	r2, #0
    1b78:	e7d2      	b.n	1b20 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b7a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1b7c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b7e:	2380      	movs	r3, #128	; 0x80
    1b80:	029b      	lsls	r3, r3, #10
    1b82:	431d      	orrs	r5, r3
    1b84:	e7d2      	b.n	1b2c <system_gclk_gen_set_config+0x4c>
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	40000c00 	.word	0x40000c00
    1b8c:	00001811 	.word	0x00001811
    1b90:	40000c08 	.word	0x40000c08
    1b94:	00001851 	.word	0x00001851

00001b98 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b98:	b510      	push	{r4, lr}
    1b9a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b9c:	4a0b      	ldr	r2, [pc, #44]	; (1bcc <system_gclk_gen_enable+0x34>)
    1b9e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ba0:	b25b      	sxtb	r3, r3
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	dbfb      	blt.n	1b9e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1ba6:	4b0a      	ldr	r3, [pc, #40]	; (1bd0 <system_gclk_gen_enable+0x38>)
    1ba8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1baa:	4b0a      	ldr	r3, [pc, #40]	; (1bd4 <system_gclk_gen_enable+0x3c>)
    1bac:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bae:	4a07      	ldr	r2, [pc, #28]	; (1bcc <system_gclk_gen_enable+0x34>)
    1bb0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bb2:	b25b      	sxtb	r3, r3
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	dbfb      	blt.n	1bb0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1bb8:	4a04      	ldr	r2, [pc, #16]	; (1bcc <system_gclk_gen_enable+0x34>)
    1bba:	6851      	ldr	r1, [r2, #4]
    1bbc:	2380      	movs	r3, #128	; 0x80
    1bbe:	025b      	lsls	r3, r3, #9
    1bc0:	430b      	orrs	r3, r1
    1bc2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <system_gclk_gen_enable+0x40>)
    1bc6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bc8:	bd10      	pop	{r4, pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	40000c00 	.word	0x40000c00
    1bd0:	00001811 	.word	0x00001811
    1bd4:	40000c04 	.word	0x40000c04
    1bd8:	00001851 	.word	0x00001851

00001bdc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1bdc:	b570      	push	{r4, r5, r6, lr}
    1bde:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1be0:	4a1a      	ldr	r2, [pc, #104]	; (1c4c <system_gclk_gen_get_hz+0x70>)
    1be2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1be4:	b25b      	sxtb	r3, r3
    1be6:	2b00      	cmp	r3, #0
    1be8:	dbfb      	blt.n	1be2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1bea:	4b19      	ldr	r3, [pc, #100]	; (1c50 <system_gclk_gen_get_hz+0x74>)
    1bec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bee:	4b19      	ldr	r3, [pc, #100]	; (1c54 <system_gclk_gen_get_hz+0x78>)
    1bf0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bf2:	4a16      	ldr	r2, [pc, #88]	; (1c4c <system_gclk_gen_get_hz+0x70>)
    1bf4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bf6:	b25b      	sxtb	r3, r3
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	dbfb      	blt.n	1bf4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1bfc:	4e13      	ldr	r6, [pc, #76]	; (1c4c <system_gclk_gen_get_hz+0x70>)
    1bfe:	6870      	ldr	r0, [r6, #4]
    1c00:	04c0      	lsls	r0, r0, #19
    1c02:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1c04:	4b14      	ldr	r3, [pc, #80]	; (1c58 <system_gclk_gen_get_hz+0x7c>)
    1c06:	4798      	blx	r3
    1c08:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c0a:	4b12      	ldr	r3, [pc, #72]	; (1c54 <system_gclk_gen_get_hz+0x78>)
    1c0c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1c0e:	6876      	ldr	r6, [r6, #4]
    1c10:	02f6      	lsls	r6, r6, #11
    1c12:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c14:	4b11      	ldr	r3, [pc, #68]	; (1c5c <system_gclk_gen_get_hz+0x80>)
    1c16:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c18:	4a0c      	ldr	r2, [pc, #48]	; (1c4c <system_gclk_gen_get_hz+0x70>)
    1c1a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c1c:	b25b      	sxtb	r3, r3
    1c1e:	2b00      	cmp	r3, #0
    1c20:	dbfb      	blt.n	1c1a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1c22:	4b0a      	ldr	r3, [pc, #40]	; (1c4c <system_gclk_gen_get_hz+0x70>)
    1c24:	689c      	ldr	r4, [r3, #8]
    1c26:	0224      	lsls	r4, r4, #8
    1c28:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1c2a:	4b0d      	ldr	r3, [pc, #52]	; (1c60 <system_gclk_gen_get_hz+0x84>)
    1c2c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1c2e:	2e00      	cmp	r6, #0
    1c30:	d107      	bne.n	1c42 <system_gclk_gen_get_hz+0x66>
    1c32:	2c01      	cmp	r4, #1
    1c34:	d907      	bls.n	1c46 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1c36:	0021      	movs	r1, r4
    1c38:	0028      	movs	r0, r5
    1c3a:	4b0a      	ldr	r3, [pc, #40]	; (1c64 <system_gclk_gen_get_hz+0x88>)
    1c3c:	4798      	blx	r3
    1c3e:	0005      	movs	r5, r0
    1c40:	e001      	b.n	1c46 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1c42:	3401      	adds	r4, #1
    1c44:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1c46:	0028      	movs	r0, r5
    1c48:	bd70      	pop	{r4, r5, r6, pc}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	40000c00 	.word	0x40000c00
    1c50:	00001811 	.word	0x00001811
    1c54:	40000c04 	.word	0x40000c04
    1c58:	000018dd 	.word	0x000018dd
    1c5c:	40000c08 	.word	0x40000c08
    1c60:	00001851 	.word	0x00001851
    1c64:	000021ed 	.word	0x000021ed

00001c68 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c68:	b510      	push	{r4, lr}
    1c6a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <system_gclk_chan_enable+0x20>)
    1c6e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c70:	4b06      	ldr	r3, [pc, #24]	; (1c8c <system_gclk_chan_enable+0x24>)
    1c72:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c74:	4a06      	ldr	r2, [pc, #24]	; (1c90 <system_gclk_chan_enable+0x28>)
    1c76:	8853      	ldrh	r3, [r2, #2]
    1c78:	2180      	movs	r1, #128	; 0x80
    1c7a:	01c9      	lsls	r1, r1, #7
    1c7c:	430b      	orrs	r3, r1
    1c7e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1c80:	4b04      	ldr	r3, [pc, #16]	; (1c94 <system_gclk_chan_enable+0x2c>)
    1c82:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c84:	bd10      	pop	{r4, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	00001811 	.word	0x00001811
    1c8c:	40000c02 	.word	0x40000c02
    1c90:	40000c00 	.word	0x40000c00
    1c94:	00001851 	.word	0x00001851

00001c98 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c98:	b510      	push	{r4, lr}
    1c9a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c9c:	4b0f      	ldr	r3, [pc, #60]	; (1cdc <system_gclk_chan_disable+0x44>)
    1c9e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ca0:	4b0f      	ldr	r3, [pc, #60]	; (1ce0 <system_gclk_chan_disable+0x48>)
    1ca2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1ca4:	4a0f      	ldr	r2, [pc, #60]	; (1ce4 <system_gclk_chan_disable+0x4c>)
    1ca6:	8853      	ldrh	r3, [r2, #2]
    1ca8:	051b      	lsls	r3, r3, #20
    1caa:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1cac:	8853      	ldrh	r3, [r2, #2]
    1cae:	490e      	ldr	r1, [pc, #56]	; (1ce8 <system_gclk_chan_disable+0x50>)
    1cb0:	400b      	ands	r3, r1
    1cb2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1cb4:	8853      	ldrh	r3, [r2, #2]
    1cb6:	490d      	ldr	r1, [pc, #52]	; (1cec <system_gclk_chan_disable+0x54>)
    1cb8:	400b      	ands	r3, r1
    1cba:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1cbc:	0011      	movs	r1, r2
    1cbe:	2280      	movs	r2, #128	; 0x80
    1cc0:	01d2      	lsls	r2, r2, #7
    1cc2:	884b      	ldrh	r3, [r1, #2]
    1cc4:	4213      	tst	r3, r2
    1cc6:	d1fc      	bne.n	1cc2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1cc8:	4906      	ldr	r1, [pc, #24]	; (1ce4 <system_gclk_chan_disable+0x4c>)
    1cca:	884a      	ldrh	r2, [r1, #2]
    1ccc:	0203      	lsls	r3, r0, #8
    1cce:	4806      	ldr	r0, [pc, #24]	; (1ce8 <system_gclk_chan_disable+0x50>)
    1cd0:	4002      	ands	r2, r0
    1cd2:	4313      	orrs	r3, r2
    1cd4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1cd6:	4b06      	ldr	r3, [pc, #24]	; (1cf0 <system_gclk_chan_disable+0x58>)
    1cd8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cda:	bd10      	pop	{r4, pc}
    1cdc:	00001811 	.word	0x00001811
    1ce0:	40000c02 	.word	0x40000c02
    1ce4:	40000c00 	.word	0x40000c00
    1ce8:	fffff0ff 	.word	0xfffff0ff
    1cec:	ffffbfff 	.word	0xffffbfff
    1cf0:	00001851 	.word	0x00001851

00001cf4 <system_gclk_chan_set_config>:
{
    1cf4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1cf6:	780c      	ldrb	r4, [r1, #0]
    1cf8:	0224      	lsls	r4, r4, #8
    1cfa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1cfc:	4b02      	ldr	r3, [pc, #8]	; (1d08 <system_gclk_chan_set_config+0x14>)
    1cfe:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d00:	b2a4      	uxth	r4, r4
    1d02:	4b02      	ldr	r3, [pc, #8]	; (1d0c <system_gclk_chan_set_config+0x18>)
    1d04:	805c      	strh	r4, [r3, #2]
}
    1d06:	bd10      	pop	{r4, pc}
    1d08:	00001c99 	.word	0x00001c99
    1d0c:	40000c00 	.word	0x40000c00

00001d10 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d10:	b510      	push	{r4, lr}
    1d12:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d14:	4b06      	ldr	r3, [pc, #24]	; (1d30 <system_gclk_chan_get_hz+0x20>)
    1d16:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d18:	4b06      	ldr	r3, [pc, #24]	; (1d34 <system_gclk_chan_get_hz+0x24>)
    1d1a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1d1c:	4b06      	ldr	r3, [pc, #24]	; (1d38 <system_gclk_chan_get_hz+0x28>)
    1d1e:	885c      	ldrh	r4, [r3, #2]
    1d20:	0524      	lsls	r4, r4, #20
    1d22:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1d24:	4b05      	ldr	r3, [pc, #20]	; (1d3c <system_gclk_chan_get_hz+0x2c>)
    1d26:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d28:	0020      	movs	r0, r4
    1d2a:	4b05      	ldr	r3, [pc, #20]	; (1d40 <system_gclk_chan_get_hz+0x30>)
    1d2c:	4798      	blx	r3
}
    1d2e:	bd10      	pop	{r4, pc}
    1d30:	00001811 	.word	0x00001811
    1d34:	40000c02 	.word	0x40000c02
    1d38:	40000c00 	.word	0x40000c00
    1d3c:	00001851 	.word	0x00001851
    1d40:	00001bdd 	.word	0x00001bdd

00001d44 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d44:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d46:	78d3      	ldrb	r3, [r2, #3]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d135      	bne.n	1db8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d4c:	7813      	ldrb	r3, [r2, #0]
    1d4e:	2b80      	cmp	r3, #128	; 0x80
    1d50:	d029      	beq.n	1da6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d52:	061b      	lsls	r3, r3, #24
    1d54:	2480      	movs	r4, #128	; 0x80
    1d56:	0264      	lsls	r4, r4, #9
    1d58:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d5a:	7854      	ldrb	r4, [r2, #1]
    1d5c:	2502      	movs	r5, #2
    1d5e:	43ac      	bics	r4, r5
    1d60:	d106      	bne.n	1d70 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d62:	7894      	ldrb	r4, [r2, #2]
    1d64:	2c00      	cmp	r4, #0
    1d66:	d120      	bne.n	1daa <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d68:	2480      	movs	r4, #128	; 0x80
    1d6a:	02a4      	lsls	r4, r4, #10
    1d6c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d6e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d70:	7854      	ldrb	r4, [r2, #1]
    1d72:	3c01      	subs	r4, #1
    1d74:	2c01      	cmp	r4, #1
    1d76:	d91c      	bls.n	1db2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d78:	040d      	lsls	r5, r1, #16
    1d7a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d7c:	24a0      	movs	r4, #160	; 0xa0
    1d7e:	05e4      	lsls	r4, r4, #23
    1d80:	432c      	orrs	r4, r5
    1d82:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d84:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d86:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d88:	24d0      	movs	r4, #208	; 0xd0
    1d8a:	0624      	lsls	r4, r4, #24
    1d8c:	432c      	orrs	r4, r5
    1d8e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d90:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d92:	78d4      	ldrb	r4, [r2, #3]
    1d94:	2c00      	cmp	r4, #0
    1d96:	d122      	bne.n	1dde <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d98:	035b      	lsls	r3, r3, #13
    1d9a:	d51c      	bpl.n	1dd6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d9c:	7893      	ldrb	r3, [r2, #2]
    1d9e:	2b01      	cmp	r3, #1
    1da0:	d01e      	beq.n	1de0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1da2:	6141      	str	r1, [r0, #20]
    1da4:	e017      	b.n	1dd6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1da6:	2300      	movs	r3, #0
    1da8:	e7d7      	b.n	1d5a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1daa:	24c0      	movs	r4, #192	; 0xc0
    1dac:	02e4      	lsls	r4, r4, #11
    1dae:	4323      	orrs	r3, r4
    1db0:	e7dd      	b.n	1d6e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1db2:	4c0d      	ldr	r4, [pc, #52]	; (1de8 <_system_pinmux_config+0xa4>)
    1db4:	4023      	ands	r3, r4
    1db6:	e7df      	b.n	1d78 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1db8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1dba:	040c      	lsls	r4, r1, #16
    1dbc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1dbe:	23a0      	movs	r3, #160	; 0xa0
    1dc0:	05db      	lsls	r3, r3, #23
    1dc2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dc4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1dc6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1dc8:	23d0      	movs	r3, #208	; 0xd0
    1dca:	061b      	lsls	r3, r3, #24
    1dcc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dce:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1dd0:	78d3      	ldrb	r3, [r2, #3]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d103      	bne.n	1dde <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1dd6:	7853      	ldrb	r3, [r2, #1]
    1dd8:	3b01      	subs	r3, #1
    1dda:	2b01      	cmp	r3, #1
    1ddc:	d902      	bls.n	1de4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1dde:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1de0:	6181      	str	r1, [r0, #24]
    1de2:	e7f8      	b.n	1dd6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1de4:	6081      	str	r1, [r0, #8]
}
    1de6:	e7fa      	b.n	1dde <_system_pinmux_config+0x9a>
    1de8:	fffbffff 	.word	0xfffbffff

00001dec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1dec:	b510      	push	{r4, lr}
    1dee:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1df0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1df2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1df4:	2900      	cmp	r1, #0
    1df6:	d104      	bne.n	1e02 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1df8:	0943      	lsrs	r3, r0, #5
    1dfa:	01db      	lsls	r3, r3, #7
    1dfc:	4905      	ldr	r1, [pc, #20]	; (1e14 <system_pinmux_pin_set_config+0x28>)
    1dfe:	468c      	mov	ip, r1
    1e00:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e02:	241f      	movs	r4, #31
    1e04:	4020      	ands	r0, r4
    1e06:	2101      	movs	r1, #1
    1e08:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1e0a:	0018      	movs	r0, r3
    1e0c:	4b02      	ldr	r3, [pc, #8]	; (1e18 <system_pinmux_pin_set_config+0x2c>)
    1e0e:	4798      	blx	r3
}
    1e10:	bd10      	pop	{r4, pc}
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	41004400 	.word	0x41004400
    1e18:	00001d45 	.word	0x00001d45

00001e1c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1e1c:	4770      	bx	lr
	...

00001e20 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e20:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e22:	4b05      	ldr	r3, [pc, #20]	; (1e38 <system_init+0x18>)
    1e24:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <system_init+0x1c>)
    1e28:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e2a:	4b05      	ldr	r3, [pc, #20]	; (1e40 <system_init+0x20>)
    1e2c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e2e:	4b05      	ldr	r3, [pc, #20]	; (1e44 <system_init+0x24>)
    1e30:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e32:	4b05      	ldr	r3, [pc, #20]	; (1e48 <system_init+0x28>)
    1e34:	4798      	blx	r3
}
    1e36:	bd10      	pop	{r4, pc}
    1e38:	00001a25 	.word	0x00001a25
    1e3c:	00001881 	.word	0x00001881
    1e40:	00001e1d 	.word	0x00001e1d
    1e44:	00001e1d 	.word	0x00001e1d
    1e48:	00001e1d 	.word	0x00001e1d

00001e4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e4c:	e7fe      	b.n	1e4c <Dummy_Handler>
	...

00001e50 <Reset_Handler>:
{
    1e50:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1e52:	4a1a      	ldr	r2, [pc, #104]	; (1ebc <Reset_Handler+0x6c>)
    1e54:	4b1a      	ldr	r3, [pc, #104]	; (1ec0 <Reset_Handler+0x70>)
    1e56:	429a      	cmp	r2, r3
    1e58:	d011      	beq.n	1e7e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1e5a:	001a      	movs	r2, r3
    1e5c:	4b19      	ldr	r3, [pc, #100]	; (1ec4 <Reset_Handler+0x74>)
    1e5e:	429a      	cmp	r2, r3
    1e60:	d20d      	bcs.n	1e7e <Reset_Handler+0x2e>
    1e62:	4a19      	ldr	r2, [pc, #100]	; (1ec8 <Reset_Handler+0x78>)
    1e64:	3303      	adds	r3, #3
    1e66:	1a9b      	subs	r3, r3, r2
    1e68:	089b      	lsrs	r3, r3, #2
    1e6a:	3301      	adds	r3, #1
    1e6c:	009b      	lsls	r3, r3, #2
    1e6e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1e70:	4813      	ldr	r0, [pc, #76]	; (1ec0 <Reset_Handler+0x70>)
    1e72:	4912      	ldr	r1, [pc, #72]	; (1ebc <Reset_Handler+0x6c>)
    1e74:	588c      	ldr	r4, [r1, r2]
    1e76:	5084      	str	r4, [r0, r2]
    1e78:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1e7a:	429a      	cmp	r2, r3
    1e7c:	d1fa      	bne.n	1e74 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1e7e:	4a13      	ldr	r2, [pc, #76]	; (1ecc <Reset_Handler+0x7c>)
    1e80:	4b13      	ldr	r3, [pc, #76]	; (1ed0 <Reset_Handler+0x80>)
    1e82:	429a      	cmp	r2, r3
    1e84:	d20a      	bcs.n	1e9c <Reset_Handler+0x4c>
    1e86:	43d3      	mvns	r3, r2
    1e88:	4911      	ldr	r1, [pc, #68]	; (1ed0 <Reset_Handler+0x80>)
    1e8a:	185b      	adds	r3, r3, r1
    1e8c:	2103      	movs	r1, #3
    1e8e:	438b      	bics	r3, r1
    1e90:	3304      	adds	r3, #4
    1e92:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1e94:	2100      	movs	r1, #0
    1e96:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1e98:	4293      	cmp	r3, r2
    1e9a:	d1fc      	bne.n	1e96 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e9c:	4a0d      	ldr	r2, [pc, #52]	; (1ed4 <Reset_Handler+0x84>)
    1e9e:	21ff      	movs	r1, #255	; 0xff
    1ea0:	4b0d      	ldr	r3, [pc, #52]	; (1ed8 <Reset_Handler+0x88>)
    1ea2:	438b      	bics	r3, r1
    1ea4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1ea6:	4a0d      	ldr	r2, [pc, #52]	; (1edc <Reset_Handler+0x8c>)
    1ea8:	6853      	ldr	r3, [r2, #4]
    1eaa:	397f      	subs	r1, #127	; 0x7f
    1eac:	430b      	orrs	r3, r1
    1eae:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1eb0:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <Reset_Handler+0x90>)
    1eb2:	4798      	blx	r3
        main();
    1eb4:	4b0b      	ldr	r3, [pc, #44]	; (1ee4 <Reset_Handler+0x94>)
    1eb6:	4798      	blx	r3
    1eb8:	e7fe      	b.n	1eb8 <Reset_Handler+0x68>
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	0000258c 	.word	0x0000258c
    1ec0:	20000000 	.word	0x20000000
    1ec4:	2000000c 	.word	0x2000000c
    1ec8:	20000004 	.word	0x20000004
    1ecc:	2000000c 	.word	0x2000000c
    1ed0:	20000100 	.word	0x20000100
    1ed4:	e000ed00 	.word	0xe000ed00
    1ed8:	00000000 	.word	0x00000000
    1edc:	41004000 	.word	0x41004000
    1ee0:	00002359 	.word	0x00002359
    1ee4:	00001ee9 	.word	0x00001ee9

00001ee8 <main>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}


int main (void)
{
    1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eea:	46c6      	mov	lr, r8
    1eec:	b500      	push	{lr}
    1eee:	b08e      	sub	sp, #56	; 0x38
	system_init();
    1ef0:	4b9a      	ldr	r3, [pc, #616]	; (215c <STACK_SIZE+0x15c>)
    1ef2:	4798      	blx	r3
	delay_init();
    1ef4:	4b9a      	ldr	r3, [pc, #616]	; (2160 <STACK_SIZE+0x160>)
    1ef6:	4798      	blx	r3
	rprintf_init();
    1ef8:	4b9a      	ldr	r3, [pc, #616]	; (2164 <STACK_SIZE+0x164>)
    1efa:	4798      	blx	r3
	config->powersave  = false;
    1efc:	ac01      	add	r4, sp, #4
    1efe:	2500      	movs	r5, #0
    1f00:	70a5      	strb	r5, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1f02:	2301      	movs	r3, #1
    1f04:	4698      	mov	r8, r3
    1f06:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1f08:	2302      	movs	r3, #2
    1f0a:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(MOTOR_CONTROLLER_DIR_PIN, &config_port_pin);
    1f0c:	0021      	movs	r1, r4
    1f0e:	2014      	movs	r0, #20
    1f10:	4f95      	ldr	r7, [pc, #596]	; (2168 <STACK_SIZE+0x168>)
    1f12:	47b8      	blx	r7
	port_pin_set_config(MOTOR_CONTROLLER_STP_PIN, &config_port_pin);
    1f14:	0021      	movs	r1, r4
    1f16:	2015      	movs	r0, #21
    1f18:	47b8      	blx	r7
	port_pin_set_config(MOTOR_CONTROLLER_SS_PIN, &config_port_pin);
    1f1a:	0021      	movs	r1, r4
    1f1c:	2026      	movs	r0, #38	; 0x26
    1f1e:	47b8      	blx	r7
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f20:	2380      	movs	r3, #128	; 0x80
    1f22:	7023      	strb	r3, [r4, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f24:	7065      	strb	r5, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f26:	4643      	mov	r3, r8
    1f28:	70a3      	strb	r3, [r4, #2]
	config->powersave    = false;
    1f2a:	70e5      	strb	r5, [r4, #3]
	system_pinmux_pin_set_config(EXT1_PIN_17, &config_pinmux);
    1f2c:	0021      	movs	r1, r4
    1f2e:	2004      	movs	r0, #4
    1f30:	4b8e      	ldr	r3, [pc, #568]	; (216c <STACK_SIZE+0x16c>)
    1f32:	4798      	blx	r3
	slave->ss_pin          = config->ss_pin;
    1f34:	4e8e      	ldr	r6, [pc, #568]	; (2170 <STACK_SIZE+0x170>)
    1f36:	2326      	movs	r3, #38	; 0x26
    1f38:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
    1f3a:	7075      	strb	r5, [r6, #1]
	slave->address         = config->address;
    1f3c:	70b5      	strb	r5, [r6, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1f3e:	4643      	mov	r3, r8
    1f40:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1f42:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1f44:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1f46:	0021      	movs	r1, r4
    1f48:	2026      	movs	r0, #38	; 0x26
    1f4a:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    1f4c:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
    1f4e:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1f50:	09d0      	lsrs	r0, r2, #7
		return NULL;
    1f52:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
    1f54:	2800      	cmp	r0, #0
    1f56:	d102      	bne.n	1f5e <main+0x76>
		return &(ports[port_index]->Group[group_index]);
    1f58:	01db      	lsls	r3, r3, #7
    1f5a:	4986      	ldr	r1, [pc, #536]	; (2174 <STACK_SIZE+0x174>)
    1f5c:	1859      	adds	r1, r3, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f5e:	231f      	movs	r3, #31
    1f60:	4013      	ands	r3, r2
    1f62:	2201      	movs	r2, #1
    1f64:	0010      	movs	r0, r2
    1f66:	4098      	lsls	r0, r3
		port_base->OUTSET.reg = pin_mask;
    1f68:	6188      	str	r0, [r1, #24]
	config->mode             = SPI_MODE_MASTER;
    1f6a:	ac01      	add	r4, sp, #4
    1f6c:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1f6e:	2300      	movs	r3, #0
    1f70:	9302      	str	r3, [sp, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1f72:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1f74:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1f76:	74a2      	strb	r2, [r4, #18]
	config->generator_source = GCLK_GENERATOR_0;
    1f78:	321f      	adds	r2, #31
    1f7a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1f7c:	3a14      	subs	r2, #20
    1f7e:	2100      	movs	r1, #0
    1f80:	a806      	add	r0, sp, #24
    1f82:	4b7d      	ldr	r3, [pc, #500]	; (2178 <STACK_SIZE+0x178>)
    1f84:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    1f86:	4b7d      	ldr	r3, [pc, #500]	; (217c <STACK_SIZE+0x17c>)
    1f88:	6163      	str	r3, [r4, #20]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_3;
    1f8a:	23c0      	movs	r3, #192	; 0xc0
    1f8c:	059b      	lsls	r3, r3, #22
    1f8e:	60a3      	str	r3, [r4, #8]
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    1f90:	2380      	movs	r3, #128	; 0x80
    1f92:	025b      	lsls	r3, r3, #9
    1f94:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
    1f96:	4b7a      	ldr	r3, [pc, #488]	; (2180 <STACK_SIZE+0x180>)
    1f98:	6263      	str	r3, [r4, #36]	; 0x24
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    1f9a:	2301      	movs	r3, #1
    1f9c:	425b      	negs	r3, r3
    1f9e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
    1fa0:	4b78      	ldr	r3, [pc, #480]	; (2184 <STACK_SIZE+0x184>)
    1fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
    1fa4:	4b78      	ldr	r3, [pc, #480]	; (2188 <STACK_SIZE+0x188>)
    1fa6:	6323      	str	r3, [r4, #48]	; 0x30
	spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
    1fa8:	4d78      	ldr	r5, [pc, #480]	; (218c <STACK_SIZE+0x18c>)
    1faa:	0022      	movs	r2, r4
    1fac:	4978      	ldr	r1, [pc, #480]	; (2190 <STACK_SIZE+0x190>)
    1fae:	0028      	movs	r0, r5
    1fb0:	4b78      	ldr	r3, [pc, #480]	; (2194 <STACK_SIZE+0x194>)
    1fb2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1fb4:	682b      	ldr	r3, [r5, #0]
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    1fb6:	8a1a      	ldrh	r2, [r3, #16]
	while (spi_is_syncing(module)) {
    1fb8:	b212      	sxth	r2, r2
    1fba:	2a00      	cmp	r2, #0
    1fbc:	dbfb      	blt.n	1fb6 <main+0xce>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1fbe:	681a      	ldr	r2, [r3, #0]
    1fc0:	2102      	movs	r1, #2
    1fc2:	430a      	orrs	r2, r1
    1fc4:	601a      	str	r2, [r3, #0]
	stepper_motor_config.direction_set = DRV_DIRPIN;
    1fc6:	ac01      	add	r4, sp, #4
    1fc8:	2300      	movs	r3, #0
    1fca:	70a3      	strb	r3, [r4, #2]
	stepper_motor_config.step_mode = DRV_MODE_1_4;
    1fcc:	2010      	movs	r0, #16
    1fce:	70e0      	strb	r0, [r4, #3]
	stepper_motor_config.stall_detect = DRV_EXSTALL_INTERNAL;
    1fd0:	7123      	strb	r3, [r4, #4]
	stepper_motor_config.isense_gain = DRV_ISGAIN_40;
    1fd2:	22c0      	movs	r2, #192	; 0xc0
    1fd4:	0092      	lsls	r2, r2, #2
    1fd6:	80e2      	strh	r2, [r4, #6]
	stepper_motor_config.dead_time_insert = DRV_DTIME_850ns; //Check if change is needed
    1fd8:	22c0      	movs	r2, #192	; 0xc0
    1fda:	0112      	lsls	r2, r2, #4
    1fdc:	8122      	strh	r2, [r4, #8]
	stepper_motor_config.drv_torque = 0x96;
    1fde:	2296      	movs	r2, #150	; 0x96
    1fe0:	72a2      	strb	r2, [r4, #10]
	stepper_motor_config.backemf_sample_th = DRV_SMPLTH_200us; //Check if change is needed
    1fe2:	326b      	adds	r2, #107	; 0x6b
    1fe4:	32ff      	adds	r2, #255	; 0xff
    1fe6:	81a2      	strh	r2, [r4, #12]
	stepper_motor_config.drv_toff = 0x80; // Check if change is needed
    1fe8:	317e      	adds	r1, #126	; 0x7e
    1fea:	73a1      	strb	r1, [r4, #14]
	stepper_motor_config.pwm_mode = DRV_PWMMODE_INTERNAL;
    1fec:	2500      	movs	r5, #0
    1fee:	8223      	strh	r3, [r4, #16]
	stepper_motor_config.drv_tblank = 0xFF; //Check if change is needed
    1ff0:	26ff      	movs	r6, #255	; 0xff
    1ff2:	74a6      	strb	r6, [r4, #18]
	stepper_motor_config.adaptive_blanking_time= DRV_ABT_DISABLE;
    1ff4:	82a3      	strh	r3, [r4, #20]
	stepper_motor_config.drv_tdecay = 0x10; //Check if check is needed
    1ff6:	75a0      	strb	r0, [r4, #22]
	stepper_motor_config.decay_mode = DRV_DECMOD_FORCE_SLOWINC_FASTDEC; //Check if change is needed
    1ff8:	380f      	subs	r0, #15
    1ffa:	75e0      	strb	r0, [r4, #23]
	stepper_motor_config.ocp_threshold = DRV_OCPTH_250mV;
    1ffc:	77a5      	strb	r5, [r4, #30]
	stepper_motor_config.ocp_deglitch_time = DRV_OCPDEG_4us;
    1ffe:	3007      	adds	r0, #7
    2000:	77e0      	strb	r0, [r4, #31]
	stepper_motor_config.ls_drive_time = DRV_TDRIVEN_1us;
    2002:	3018      	adds	r0, #24
    2004:	5420      	strb	r0, [r4, r0]
	stepper_motor_config.hs_drive_time = DRV_TDRIVEP_1us;
    2006:	3001      	adds	r0, #1
    2008:	5421      	strb	r1, [r4, r0]
	stepper_motor_config.ls_current = DRV_IDRIVEN_100mA;
    200a:	8463      	strh	r3, [r4, #34]	; 0x22
	stepper_motor_config.hs_current = DRV_IDRIVEP_100mA;
    200c:	84a3      	strh	r3, [r4, #36]	; 0x24
	stepper_motor_config.drv_sdthr = 0x40; //Check if change is needed
    200e:	3940      	subs	r1, #64	; 0x40
    2010:	7621      	strb	r1, [r4, #24]
	stepper_motor_config.stall_count = DRV_SDCNT_4; //Check if change is needed
    2012:	8362      	strh	r2, [r4, #26]
	stepper_motor_config.back_emf_div = DRV_VDIV_32;
    2014:	83a3      	strh	r3, [r4, #28]
	drv_ctrl_init(&stepper_motor_config);
    2016:	0020      	movs	r0, r4
    2018:	4b5f      	ldr	r3, [pc, #380]	; (2198 <STACK_SIZE+0x198>)
    201a:	4798      	blx	r3
	drv_ctrl_enable();
    201c:	4b5f      	ldr	r3, [pc, #380]	; (219c <STACK_SIZE+0x19c>)
    201e:	4798      	blx	r3
	adc_get_config_defaults(&config_adc);
    2020:	0020      	movs	r0, r4
    2022:	4b5f      	ldr	r3, [pc, #380]	; (21a0 <STACK_SIZE+0x1a0>)
    2024:	4798      	blx	r3
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND; //Maybe change to external GND Pin
    2026:	23c0      	movs	r3, #192	; 0xc0
    2028:	015b      	lsls	r3, r3, #5
    202a:	81e3      	strh	r3, [r4, #14]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    202c:	7325      	strb	r5, [r4, #12]
	config_adc.reference = ADC_REFERENCE_AREFA;
    202e:	2303      	movs	r3, #3
    2030:	7063      	strb	r3, [r4, #1]
	adc_init(&adc_instance, ADC, &config_adc);
    2032:	4d5c      	ldr	r5, [pc, #368]	; (21a4 <STACK_SIZE+0x1a4>)
    2034:	0022      	movs	r2, r4
    2036:	495c      	ldr	r1, [pc, #368]	; (21a8 <STACK_SIZE+0x1a8>)
    2038:	0028      	movs	r0, r5
    203a:	4b5c      	ldr	r3, [pc, #368]	; (21ac <STACK_SIZE+0x1ac>)
    203c:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    203e:	682b      	ldr	r3, [r5, #0]
    2040:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    2042:	b252      	sxtb	r2, r2
    2044:	2a00      	cmp	r2, #0
    2046:	dbfb      	blt.n	2040 <STACK_SIZE+0x40>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2048:	220f      	movs	r2, #15
    204a:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    204c:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    204e:	781a      	ldrb	r2, [r3, #0]
    2050:	2102      	movs	r1, #2
    2052:	430a      	orrs	r2, r1
    2054:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2056:	4b53      	ldr	r3, [pc, #332]	; (21a4 <STACK_SIZE+0x1a4>)
    2058:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    205a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    205c:	b25b      	sxtb	r3, r3
    205e:	2b00      	cmp	r3, #0
    2060:	dbfb      	blt.n	205a <STACK_SIZE+0x5a>
	config->data_order       = USART_DATAORDER_LSB;
    2062:	ab01      	add	r3, sp, #4
    2064:	2280      	movs	r2, #128	; 0x80
    2066:	05d2      	lsls	r2, r2, #23
    2068:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    206a:	2200      	movs	r2, #0
    206c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    206e:	21ff      	movs	r1, #255	; 0xff
    2070:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2072:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2074:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    2076:	2196      	movs	r1, #150	; 0x96
    2078:	0189      	lsls	r1, r1, #6
    207a:	6119      	str	r1, [r3, #16]
	config->receiver_enable  = true;
    207c:	2101      	movs	r1, #1
    207e:	7519      	strb	r1, [r3, #20]
	config->transmitter_enable = true;
    2080:	7559      	strb	r1, [r3, #21]
	config->clock_polarity_inverted = false;
    2082:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
    2084:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
    2086:	619a      	str	r2, [r3, #24]
	config->run_in_standby   = false;
    2088:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
    208a:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    208c:	22c4      	movs	r2, #196	; 0xc4
    208e:	0392      	lsls	r2, r2, #14
    2090:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2092:	2201      	movs	r2, #1
    2094:	4252      	negs	r2, r2
    2096:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2098:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    209a:	4a45      	ldr	r2, [pc, #276]	; (21b0 <STACK_SIZE+0x1b0>)
    209c:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    209e:	4a45      	ldr	r2, [pc, #276]	; (21b4 <STACK_SIZE+0x1b4>)
    20a0:	62da      	str	r2, [r3, #44]	; 0x2c
	while(usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK){
    20a2:	4d45      	ldr	r5, [pc, #276]	; (21b8 <STACK_SIZE+0x1b8>)
    20a4:	4c45      	ldr	r4, [pc, #276]	; (21bc <STACK_SIZE+0x1bc>)
    20a6:	aa01      	add	r2, sp, #4
    20a8:	4945      	ldr	r1, [pc, #276]	; (21c0 <STACK_SIZE+0x1c0>)
    20aa:	0028      	movs	r0, r5
    20ac:	47a0      	blx	r4
    20ae:	2800      	cmp	r0, #0
    20b0:	d1f9      	bne.n	20a6 <STACK_SIZE+0xa6>
	SercomUsart *const usart_hw = &(module->hw->USART);
    20b2:	4d41      	ldr	r5, [pc, #260]	; (21b8 <STACK_SIZE+0x1b8>)
    20b4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    20b6:	0020      	movs	r0, r4
    20b8:	4b42      	ldr	r3, [pc, #264]	; (21c4 <STACK_SIZE+0x1c4>)
    20ba:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    20bc:	231f      	movs	r3, #31
    20be:	4018      	ands	r0, r3
    20c0:	3b1e      	subs	r3, #30
    20c2:	4083      	lsls	r3, r0
    20c4:	4a40      	ldr	r2, [pc, #256]	; (21c8 <STACK_SIZE+0x1c8>)
    20c6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    20c8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    20ca:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    20cc:	b21b      	sxth	r3, r3
    20ce:	2b00      	cmp	r3, #0
    20d0:	dbfb      	blt.n	20ca <STACK_SIZE+0xca>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    20d2:	6823      	ldr	r3, [r4, #0]
    20d4:	2202      	movs	r2, #2
    20d6:	4313      	orrs	r3, r2
    20d8:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    20da:	4b37      	ldr	r3, [pc, #220]	; (21b8 <STACK_SIZE+0x1b8>)
    20dc:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    20de:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    20e0:	b212      	sxth	r2, r2
    20e2:	2a00      	cmp	r2, #0
    20e4:	dbfb      	blt.n	20de <STACK_SIZE+0xde>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    20e6:	6859      	ldr	r1, [r3, #4]
    20e8:	2280      	movs	r2, #128	; 0x80
    20ea:	0252      	lsls	r2, r2, #9
    20ec:	430a      	orrs	r2, r1
    20ee:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    20f0:	2101      	movs	r1, #1
    20f2:	4a31      	ldr	r2, [pc, #196]	; (21b8 <STACK_SIZE+0x1b8>)
    20f4:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    20f6:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    20f8:	b212      	sxth	r2, r2
    20fa:	2a00      	cmp	r2, #0
    20fc:	dbfb      	blt.n	20f6 <STACK_SIZE+0xf6>
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    20fe:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    2100:	b212      	sxth	r2, r2
    2102:	2a00      	cmp	r2, #0
    2104:	dbfb      	blt.n	20fe <STACK_SIZE+0xfe>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2106:	6859      	ldr	r1, [r3, #4]
    2108:	2280      	movs	r2, #128	; 0x80
    210a:	0292      	lsls	r2, r2, #10
    210c:	430a      	orrs	r2, r1
    210e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2110:	2101      	movs	r1, #1
    2112:	4a29      	ldr	r2, [pc, #164]	; (21b8 <STACK_SIZE+0x1b8>)
    2114:	7191      	strb	r1, [r2, #6]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2116:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    2118:	b212      	sxth	r2, r2
    211a:	2a00      	cmp	r2, #0
    211c:	dbfb      	blt.n	2116 <STACK_SIZE+0x116>
	usart_register_callback(&usart_instance,
    211e:	4c26      	ldr	r4, [pc, #152]	; (21b8 <STACK_SIZE+0x1b8>)
    2120:	2201      	movs	r2, #1
    2122:	492a      	ldr	r1, [pc, #168]	; (21cc <STACK_SIZE+0x1cc>)
    2124:	0020      	movs	r0, r4
    2126:	4b2a      	ldr	r3, [pc, #168]	; (21d0 <STACK_SIZE+0x1d0>)
    2128:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    212a:	2221      	movs	r2, #33	; 0x21
    212c:	5ca3      	ldrb	r3, [r4, r2]
    212e:	2102      	movs	r1, #2
    2130:	430b      	orrs	r3, r1
    2132:	54a3      	strb	r3, [r4, r2]
	configure_usart();
	configure_usart_callbacks();
	
	while (1) {
		
		rprintf("Reg value: \n\r");
    2134:	4e27      	ldr	r6, [pc, #156]	; (21d4 <STACK_SIZE+0x1d4>)
    2136:	4d28      	ldr	r5, [pc, #160]	; (21d8 <STACK_SIZE+0x1d8>)
		uint16_t reg = drv_ctrl_read_cmd(0x01);
    2138:	4f28      	ldr	r7, [pc, #160]	; (21dc <STACK_SIZE+0x1dc>)
		rprintf("Reg value: \n\r");
    213a:	0030      	movs	r0, r6
    213c:	47a8      	blx	r5
		uint16_t reg = drv_ctrl_read_cmd(0x01);
    213e:	2001      	movs	r0, #1
    2140:	47b8      	blx	r7
    2142:	0001      	movs	r1, r0
		rprintf("%x \n\r", reg);
    2144:	4826      	ldr	r0, [pc, #152]	; (21e0 <STACK_SIZE+0x1e0>)
    2146:	47a8      	blx	r5
		drv_ctrl_moveto(10);
    2148:	200a      	movs	r0, #10
    214a:	4c26      	ldr	r4, [pc, #152]	; (21e4 <STACK_SIZE+0x1e4>)
    214c:	47a0      	blx	r4
		drv_ctrl_moveto(0);
    214e:	2000      	movs	r0, #0
    2150:	47a0      	blx	r4
		delay_ms(1000);
    2152:	20fa      	movs	r0, #250	; 0xfa
    2154:	0080      	lsls	r0, r0, #2
    2156:	4b24      	ldr	r3, [pc, #144]	; (21e8 <STACK_SIZE+0x1e8>)
    2158:	4798      	blx	r3
    215a:	e7ee      	b.n	213a <STACK_SIZE+0x13a>
    215c:	00001e21 	.word	0x00001e21
    2160:	00000105 	.word	0x00000105
    2164:	000015fd 	.word	0x000015fd
    2168:	000018b9 	.word	0x000018b9
    216c:	00001ded 	.word	0x00001ded
    2170:	200000ec 	.word	0x200000ec
    2174:	41004400 	.word	0x41004400
    2178:	000023b3 	.word	0x000023b3
    217c:	000186a0 	.word	0x000186a0
    2180:	00040003 	.word	0x00040003
    2184:	00060003 	.word	0x00060003
    2188:	00070003 	.word	0x00070003
    218c:	200000f0 	.word	0x200000f0
    2190:	42000800 	.word	0x42000800
    2194:	00000a61 	.word	0x00000a61
    2198:	000014cd 	.word	0x000014cd
    219c:	00001545 	.word	0x00001545
    21a0:	0000019d 	.word	0x0000019d
    21a4:	200000f8 	.word	0x200000f8
    21a8:	42004000 	.word	0x42004000
    21ac:	000001e5 	.word	0x000001e5
    21b0:	00180002 	.word	0x00180002
    21b4:	00190002 	.word	0x00190002
    21b8:	200000c8 	.word	0x200000c8
    21bc:	00001079 	.word	0x00001079
    21c0:	42001400 	.word	0x42001400
    21c4:	000009d1 	.word	0x000009d1
    21c8:	e000e100 	.word	0xe000e100
    21cc:	000015dd 	.word	0x000015dd
    21d0:	000012eb 	.word	0x000012eb
    21d4:	00002554 	.word	0x00002554
    21d8:	00001691 	.word	0x00001691
    21dc:	00001489 	.word	0x00001489
    21e0:	00002564 	.word	0x00002564
    21e4:	0000155d 	.word	0x0000155d
    21e8:	00000171 	.word	0x00000171

000021ec <__udivsi3>:
    21ec:	2200      	movs	r2, #0
    21ee:	0843      	lsrs	r3, r0, #1
    21f0:	428b      	cmp	r3, r1
    21f2:	d374      	bcc.n	22de <__udivsi3+0xf2>
    21f4:	0903      	lsrs	r3, r0, #4
    21f6:	428b      	cmp	r3, r1
    21f8:	d35f      	bcc.n	22ba <__udivsi3+0xce>
    21fa:	0a03      	lsrs	r3, r0, #8
    21fc:	428b      	cmp	r3, r1
    21fe:	d344      	bcc.n	228a <__udivsi3+0x9e>
    2200:	0b03      	lsrs	r3, r0, #12
    2202:	428b      	cmp	r3, r1
    2204:	d328      	bcc.n	2258 <__udivsi3+0x6c>
    2206:	0c03      	lsrs	r3, r0, #16
    2208:	428b      	cmp	r3, r1
    220a:	d30d      	bcc.n	2228 <__udivsi3+0x3c>
    220c:	22ff      	movs	r2, #255	; 0xff
    220e:	0209      	lsls	r1, r1, #8
    2210:	ba12      	rev	r2, r2
    2212:	0c03      	lsrs	r3, r0, #16
    2214:	428b      	cmp	r3, r1
    2216:	d302      	bcc.n	221e <__udivsi3+0x32>
    2218:	1212      	asrs	r2, r2, #8
    221a:	0209      	lsls	r1, r1, #8
    221c:	d065      	beq.n	22ea <__udivsi3+0xfe>
    221e:	0b03      	lsrs	r3, r0, #12
    2220:	428b      	cmp	r3, r1
    2222:	d319      	bcc.n	2258 <__udivsi3+0x6c>
    2224:	e000      	b.n	2228 <__udivsi3+0x3c>
    2226:	0a09      	lsrs	r1, r1, #8
    2228:	0bc3      	lsrs	r3, r0, #15
    222a:	428b      	cmp	r3, r1
    222c:	d301      	bcc.n	2232 <__udivsi3+0x46>
    222e:	03cb      	lsls	r3, r1, #15
    2230:	1ac0      	subs	r0, r0, r3
    2232:	4152      	adcs	r2, r2
    2234:	0b83      	lsrs	r3, r0, #14
    2236:	428b      	cmp	r3, r1
    2238:	d301      	bcc.n	223e <__udivsi3+0x52>
    223a:	038b      	lsls	r3, r1, #14
    223c:	1ac0      	subs	r0, r0, r3
    223e:	4152      	adcs	r2, r2
    2240:	0b43      	lsrs	r3, r0, #13
    2242:	428b      	cmp	r3, r1
    2244:	d301      	bcc.n	224a <__udivsi3+0x5e>
    2246:	034b      	lsls	r3, r1, #13
    2248:	1ac0      	subs	r0, r0, r3
    224a:	4152      	adcs	r2, r2
    224c:	0b03      	lsrs	r3, r0, #12
    224e:	428b      	cmp	r3, r1
    2250:	d301      	bcc.n	2256 <__udivsi3+0x6a>
    2252:	030b      	lsls	r3, r1, #12
    2254:	1ac0      	subs	r0, r0, r3
    2256:	4152      	adcs	r2, r2
    2258:	0ac3      	lsrs	r3, r0, #11
    225a:	428b      	cmp	r3, r1
    225c:	d301      	bcc.n	2262 <__udivsi3+0x76>
    225e:	02cb      	lsls	r3, r1, #11
    2260:	1ac0      	subs	r0, r0, r3
    2262:	4152      	adcs	r2, r2
    2264:	0a83      	lsrs	r3, r0, #10
    2266:	428b      	cmp	r3, r1
    2268:	d301      	bcc.n	226e <__udivsi3+0x82>
    226a:	028b      	lsls	r3, r1, #10
    226c:	1ac0      	subs	r0, r0, r3
    226e:	4152      	adcs	r2, r2
    2270:	0a43      	lsrs	r3, r0, #9
    2272:	428b      	cmp	r3, r1
    2274:	d301      	bcc.n	227a <__udivsi3+0x8e>
    2276:	024b      	lsls	r3, r1, #9
    2278:	1ac0      	subs	r0, r0, r3
    227a:	4152      	adcs	r2, r2
    227c:	0a03      	lsrs	r3, r0, #8
    227e:	428b      	cmp	r3, r1
    2280:	d301      	bcc.n	2286 <__udivsi3+0x9a>
    2282:	020b      	lsls	r3, r1, #8
    2284:	1ac0      	subs	r0, r0, r3
    2286:	4152      	adcs	r2, r2
    2288:	d2cd      	bcs.n	2226 <__udivsi3+0x3a>
    228a:	09c3      	lsrs	r3, r0, #7
    228c:	428b      	cmp	r3, r1
    228e:	d301      	bcc.n	2294 <__udivsi3+0xa8>
    2290:	01cb      	lsls	r3, r1, #7
    2292:	1ac0      	subs	r0, r0, r3
    2294:	4152      	adcs	r2, r2
    2296:	0983      	lsrs	r3, r0, #6
    2298:	428b      	cmp	r3, r1
    229a:	d301      	bcc.n	22a0 <__udivsi3+0xb4>
    229c:	018b      	lsls	r3, r1, #6
    229e:	1ac0      	subs	r0, r0, r3
    22a0:	4152      	adcs	r2, r2
    22a2:	0943      	lsrs	r3, r0, #5
    22a4:	428b      	cmp	r3, r1
    22a6:	d301      	bcc.n	22ac <__udivsi3+0xc0>
    22a8:	014b      	lsls	r3, r1, #5
    22aa:	1ac0      	subs	r0, r0, r3
    22ac:	4152      	adcs	r2, r2
    22ae:	0903      	lsrs	r3, r0, #4
    22b0:	428b      	cmp	r3, r1
    22b2:	d301      	bcc.n	22b8 <__udivsi3+0xcc>
    22b4:	010b      	lsls	r3, r1, #4
    22b6:	1ac0      	subs	r0, r0, r3
    22b8:	4152      	adcs	r2, r2
    22ba:	08c3      	lsrs	r3, r0, #3
    22bc:	428b      	cmp	r3, r1
    22be:	d301      	bcc.n	22c4 <__udivsi3+0xd8>
    22c0:	00cb      	lsls	r3, r1, #3
    22c2:	1ac0      	subs	r0, r0, r3
    22c4:	4152      	adcs	r2, r2
    22c6:	0883      	lsrs	r3, r0, #2
    22c8:	428b      	cmp	r3, r1
    22ca:	d301      	bcc.n	22d0 <__udivsi3+0xe4>
    22cc:	008b      	lsls	r3, r1, #2
    22ce:	1ac0      	subs	r0, r0, r3
    22d0:	4152      	adcs	r2, r2
    22d2:	0843      	lsrs	r3, r0, #1
    22d4:	428b      	cmp	r3, r1
    22d6:	d301      	bcc.n	22dc <__udivsi3+0xf0>
    22d8:	004b      	lsls	r3, r1, #1
    22da:	1ac0      	subs	r0, r0, r3
    22dc:	4152      	adcs	r2, r2
    22de:	1a41      	subs	r1, r0, r1
    22e0:	d200      	bcs.n	22e4 <__udivsi3+0xf8>
    22e2:	4601      	mov	r1, r0
    22e4:	4152      	adcs	r2, r2
    22e6:	4610      	mov	r0, r2
    22e8:	4770      	bx	lr
    22ea:	e7ff      	b.n	22ec <__udivsi3+0x100>
    22ec:	b501      	push	{r0, lr}
    22ee:	2000      	movs	r0, #0
    22f0:	f000 f806 	bl	2300 <__aeabi_idiv0>
    22f4:	bd02      	pop	{r1, pc}
    22f6:	46c0      	nop			; (mov r8, r8)

000022f8 <__aeabi_uidivmod>:
    22f8:	2900      	cmp	r1, #0
    22fa:	d0f7      	beq.n	22ec <__udivsi3+0x100>
    22fc:	e776      	b.n	21ec <__udivsi3>
    22fe:	4770      	bx	lr

00002300 <__aeabi_idiv0>:
    2300:	4770      	bx	lr
    2302:	46c0      	nop			; (mov r8, r8)

00002304 <__aeabi_lmul>:
    2304:	b5f0      	push	{r4, r5, r6, r7, lr}
    2306:	46ce      	mov	lr, r9
    2308:	4647      	mov	r7, r8
    230a:	0415      	lsls	r5, r2, #16
    230c:	0c2d      	lsrs	r5, r5, #16
    230e:	002e      	movs	r6, r5
    2310:	b580      	push	{r7, lr}
    2312:	0407      	lsls	r7, r0, #16
    2314:	0c14      	lsrs	r4, r2, #16
    2316:	0c3f      	lsrs	r7, r7, #16
    2318:	4699      	mov	r9, r3
    231a:	0c03      	lsrs	r3, r0, #16
    231c:	437e      	muls	r6, r7
    231e:	435d      	muls	r5, r3
    2320:	4367      	muls	r7, r4
    2322:	4363      	muls	r3, r4
    2324:	197f      	adds	r7, r7, r5
    2326:	0c34      	lsrs	r4, r6, #16
    2328:	19e4      	adds	r4, r4, r7
    232a:	469c      	mov	ip, r3
    232c:	42a5      	cmp	r5, r4
    232e:	d903      	bls.n	2338 <__aeabi_lmul+0x34>
    2330:	2380      	movs	r3, #128	; 0x80
    2332:	025b      	lsls	r3, r3, #9
    2334:	4698      	mov	r8, r3
    2336:	44c4      	add	ip, r8
    2338:	464b      	mov	r3, r9
    233a:	4351      	muls	r1, r2
    233c:	4343      	muls	r3, r0
    233e:	0436      	lsls	r6, r6, #16
    2340:	0c36      	lsrs	r6, r6, #16
    2342:	0c25      	lsrs	r5, r4, #16
    2344:	0424      	lsls	r4, r4, #16
    2346:	4465      	add	r5, ip
    2348:	19a4      	adds	r4, r4, r6
    234a:	1859      	adds	r1, r3, r1
    234c:	1949      	adds	r1, r1, r5
    234e:	0020      	movs	r0, r4
    2350:	bc0c      	pop	{r2, r3}
    2352:	4690      	mov	r8, r2
    2354:	4699      	mov	r9, r3
    2356:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002358 <__libc_init_array>:
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	2600      	movs	r6, #0
    235c:	4d0c      	ldr	r5, [pc, #48]	; (2390 <__libc_init_array+0x38>)
    235e:	4c0d      	ldr	r4, [pc, #52]	; (2394 <__libc_init_array+0x3c>)
    2360:	1b64      	subs	r4, r4, r5
    2362:	10a4      	asrs	r4, r4, #2
    2364:	42a6      	cmp	r6, r4
    2366:	d109      	bne.n	237c <__libc_init_array+0x24>
    2368:	2600      	movs	r6, #0
    236a:	f000 f8ff 	bl	256c <_init>
    236e:	4d0a      	ldr	r5, [pc, #40]	; (2398 <__libc_init_array+0x40>)
    2370:	4c0a      	ldr	r4, [pc, #40]	; (239c <__libc_init_array+0x44>)
    2372:	1b64      	subs	r4, r4, r5
    2374:	10a4      	asrs	r4, r4, #2
    2376:	42a6      	cmp	r6, r4
    2378:	d105      	bne.n	2386 <__libc_init_array+0x2e>
    237a:	bd70      	pop	{r4, r5, r6, pc}
    237c:	00b3      	lsls	r3, r6, #2
    237e:	58eb      	ldr	r3, [r5, r3]
    2380:	4798      	blx	r3
    2382:	3601      	adds	r6, #1
    2384:	e7ee      	b.n	2364 <__libc_init_array+0xc>
    2386:	00b3      	lsls	r3, r6, #2
    2388:	58eb      	ldr	r3, [r5, r3]
    238a:	4798      	blx	r3
    238c:	3601      	adds	r6, #1
    238e:	e7f2      	b.n	2376 <__libc_init_array+0x1e>
    2390:	00002578 	.word	0x00002578
    2394:	00002578 	.word	0x00002578
    2398:	00002578 	.word	0x00002578
    239c:	0000257c 	.word	0x0000257c

000023a0 <memcpy>:
    23a0:	2300      	movs	r3, #0
    23a2:	b510      	push	{r4, lr}
    23a4:	429a      	cmp	r2, r3
    23a6:	d100      	bne.n	23aa <memcpy+0xa>
    23a8:	bd10      	pop	{r4, pc}
    23aa:	5ccc      	ldrb	r4, [r1, r3]
    23ac:	54c4      	strb	r4, [r0, r3]
    23ae:	3301      	adds	r3, #1
    23b0:	e7f8      	b.n	23a4 <memcpy+0x4>

000023b2 <memset>:
    23b2:	0003      	movs	r3, r0
    23b4:	1882      	adds	r2, r0, r2
    23b6:	4293      	cmp	r3, r2
    23b8:	d100      	bne.n	23bc <memset+0xa>
    23ba:	4770      	bx	lr
    23bc:	7019      	strb	r1, [r3, #0]
    23be:	3301      	adds	r3, #1
    23c0:	e7f9      	b.n	23b6 <memset+0x4>
    23c2:	0000      	movs	r0, r0
    23c4:	000003ac 	.word	0x000003ac
    23c8:	0000060a 	.word	0x0000060a
    23cc:	0000060a 	.word	0x0000060a
    23d0:	0000060a 	.word	0x0000060a
    23d4:	0000060a 	.word	0x0000060a
    23d8:	0000060a 	.word	0x0000060a
    23dc:	0000060a 	.word	0x0000060a
    23e0:	0000060a 	.word	0x0000060a
    23e4:	0000060a 	.word	0x0000060a
    23e8:	0000060a 	.word	0x0000060a
    23ec:	0000060a 	.word	0x0000060a
    23f0:	0000060a 	.word	0x0000060a
    23f4:	0000060a 	.word	0x0000060a
    23f8:	0000060a 	.word	0x0000060a
    23fc:	0000060a 	.word	0x0000060a
    2400:	0000060a 	.word	0x0000060a
    2404:	0000038c 	.word	0x0000038c
    2408:	0000060a 	.word	0x0000060a
    240c:	0000060a 	.word	0x0000060a
    2410:	0000060a 	.word	0x0000060a
    2414:	0000060a 	.word	0x0000060a
    2418:	0000060a 	.word	0x0000060a
    241c:	0000060a 	.word	0x0000060a
    2420:	0000060a 	.word	0x0000060a
    2424:	0000060a 	.word	0x0000060a
    2428:	0000060a 	.word	0x0000060a
    242c:	0000060a 	.word	0x0000060a
    2430:	0000060a 	.word	0x0000060a
    2434:	0000060a 	.word	0x0000060a
    2438:	0000060a 	.word	0x0000060a
    243c:	0000060a 	.word	0x0000060a
    2440:	0000060a 	.word	0x0000060a
    2444:	000003a4 	.word	0x000003a4
    2448:	0000060a 	.word	0x0000060a
    244c:	0000060a 	.word	0x0000060a
    2450:	0000060a 	.word	0x0000060a
    2454:	0000060a 	.word	0x0000060a
    2458:	0000060a 	.word	0x0000060a
    245c:	0000060a 	.word	0x0000060a
    2460:	0000060a 	.word	0x0000060a
    2464:	0000060a 	.word	0x0000060a
    2468:	0000060a 	.word	0x0000060a
    246c:	0000060a 	.word	0x0000060a
    2470:	0000060a 	.word	0x0000060a
    2474:	0000060a 	.word	0x0000060a
    2478:	0000060a 	.word	0x0000060a
    247c:	0000060a 	.word	0x0000060a
    2480:	0000060a 	.word	0x0000060a
    2484:	0000039c 	.word	0x0000039c
    2488:	000003b4 	.word	0x000003b4
    248c:	0000036c 	.word	0x0000036c
    2490:	0000037c 	.word	0x0000037c
    2494:	00000374 	.word	0x00000374
    2498:	00000002 	.word	0x00000002
    249c:	00000003 	.word	0x00000003
    24a0:	00000028 	.word	0x00000028
    24a4:	00000029 	.word	0x00000029
    24a8:	00000004 	.word	0x00000004
    24ac:	00000005 	.word	0x00000005
    24b0:	00000006 	.word	0x00000006
    24b4:	00000007 	.word	0x00000007
    24b8:	00000020 	.word	0x00000020
    24bc:	00000021 	.word	0x00000021
    24c0:	00000022 	.word	0x00000022
    24c4:	00000023 	.word	0x00000023
    24c8:	00000024 	.word	0x00000024
    24cc:	00000025 	.word	0x00000025
    24d0:	00000026 	.word	0x00000026
    24d4:	00000027 	.word	0x00000027
    24d8:	00000008 	.word	0x00000008
    24dc:	00000009 	.word	0x00000009
    24e0:	0000000a 	.word	0x0000000a
    24e4:	0000000b 	.word	0x0000000b
    24e8:	42000800 	.word	0x42000800
    24ec:	42000c00 	.word	0x42000c00
    24f0:	42001000 	.word	0x42001000
    24f4:	42001400 	.word	0x42001400
    24f8:	42001800 	.word	0x42001800
    24fc:	42001c00 	.word	0x42001c00
    2500:	33323130 	.word	0x33323130
    2504:	37363534 	.word	0x37363534
    2508:	62613938 	.word	0x62613938
    250c:	66656463 	.word	0x66656463
    2510:	00000000 	.word	0x00000000
    2514:	000018ee 	.word	0x000018ee
    2518:	000018ea 	.word	0x000018ea
    251c:	000018ea 	.word	0x000018ea
    2520:	0000193a 	.word	0x0000193a
    2524:	0000193a 	.word	0x0000193a
    2528:	00001902 	.word	0x00001902
    252c:	000018f4 	.word	0x000018f4
    2530:	00001908 	.word	0x00001908
    2534:	000019c0 	.word	0x000019c0
    2538:	000019a0 	.word	0x000019a0
    253c:	000019a0 	.word	0x000019a0
    2540:	00001a10 	.word	0x00001a10
    2544:	000019b2 	.word	0x000019b2
    2548:	000019ce 	.word	0x000019ce
    254c:	000019a4 	.word	0x000019a4
    2550:	000019dc 	.word	0x000019dc
    2554:	20676552 	.word	0x20676552
    2558:	756c6176 	.word	0x756c6176
    255c:	0a203a65 	.word	0x0a203a65
    2560:	0000000d 	.word	0x0000000d
    2564:	0a207825 	.word	0x0a207825
    2568:	0000000d 	.word	0x0000000d

0000256c <_init>:
    256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2572:	bc08      	pop	{r3}
    2574:	469e      	mov	lr, r3
    2576:	4770      	bx	lr

00002578 <__init_array_start>:
    2578:	000000cd 	.word	0x000000cd

0000257c <_fini>:
    257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2582:	bc08      	pop	{r3}
    2584:	469e      	mov	lr, r3
    2586:	4770      	bx	lr

00002588 <__fini_array_start>:
    2588:	000000a5 	.word	0x000000a5
