
PickNPlace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fbc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000002c  20000000  00002fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000100  2000002c  00002fe8  0002002c  2**2
                  ALLOC
  3 .stack        00002004  2000012c  000030e8  0002002c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
  6 .debug_info   00037063  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004917  00000000  00000000  00057110  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000083d2  00000000  00000000  0005ba27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000568  00000000  00000000  00063df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b10  00000000  00000000  00064361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001631e  00000000  00000000  00064e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f87d  00000000  00000000  0007b18f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00065473  00000000  00000000  0008aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000dc4  00000000  00000000  000efe80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 21 00 20 b1 22 00 00 ad 22 00 00 ad 22 00 00     0!. ."..."..."..
	...
      2c:	ad 22 00 00 00 00 00 00 00 00 00 00 ad 22 00 00     ."..........."..
      3c:	ad 22 00 00 ad 22 00 00 ad 22 00 00 ad 22 00 00     ."..."..."..."..
      4c:	ad 22 00 00 ad 22 00 00 ad 22 00 00 ad 22 00 00     ."..."..."..."..
      5c:	01 0a 00 00 11 0a 00 00 21 0a 00 00 31 0a 00 00     ........!...1...
      6c:	41 0a 00 00 51 0a 00 00 ad 22 00 00 ad 22 00 00     A...Q...."..."..
      7c:	ad 22 00 00 ad 22 00 00 ad 22 00 00 ad 22 00 00     ."..."..."..."..
      8c:	ad 22 00 00 ad 22 00 00 ad 22 00 00 ad 22 00 00     ."..."..."..."..
      9c:	ad 22 00 00 ad 22 00 00                             ."..."..

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000002c 	.word	0x2000002c
      c4:	00000000 	.word	0x00000000
      c8:	00002fbc 	.word	0x00002fbc

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000030 	.word	0x20000030
      f8:	00002fbc 	.word	0x00002fbc
      fc:	00002fbc 	.word	0x00002fbc
     100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     106:	2000      	movs	r0, #0
     108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
     10a:	4798      	blx	r3
     10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
     110:	21fa      	movs	r1, #250	; 0xfa
     112:	0089      	lsls	r1, r1, #2
     114:	47a0      	blx	r4
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
     118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
     11c:	0028      	movs	r0, r5
     11e:	47a0      	blx	r4
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
     122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     124:	2205      	movs	r2, #5
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
     128:	601a      	str	r2, [r3, #0]
}
     12a:	bd70      	pop	{r4, r5, r6, pc}
     12c:	0000203d 	.word	0x0000203d
     130:	000027c5 	.word	0x000027c5
     134:	20000000 	.word	0x20000000
     138:	000f4240 	.word	0x000f4240
     13c:	20000004 	.word	0x20000004
     140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_us+0x24>)
     148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     14e:	2180      	movs	r1, #128	; 0x80
     150:	0249      	lsls	r1, r1, #9
	while (n--) {
     152:	3801      	subs	r0, #1
     154:	d307      	bcc.n	166 <delay_cycles_us+0x22>
	if (n > 0) {
     156:	2c00      	cmp	r4, #0
     158:	d0fb      	beq.n	152 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     15a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     15c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	6813      	ldr	r3, [r2, #0]
     160:	420b      	tst	r3, r1
     162:	d0fc      	beq.n	15e <delay_cycles_us+0x1a>
     164:	e7f5      	b.n	152 <delay_cycles_us+0xe>
	}
}
     166:	bd30      	pop	{r4, r5, pc}
     168:	20000004 	.word	0x20000004
     16c:	e000e010 	.word	0xe000e010

00000170 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     170:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_cycles_ms+0x24>)
     174:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     176:	4a08      	ldr	r2, [pc, #32]	; (198 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     178:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     17a:	2180      	movs	r1, #128	; 0x80
     17c:	0249      	lsls	r1, r1, #9
	while (n--) {
     17e:	3801      	subs	r0, #1
     180:	d307      	bcc.n	192 <delay_cycles_ms+0x22>
	if (n > 0) {
     182:	2c00      	cmp	r4, #0
     184:	d0fb      	beq.n	17e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     186:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     188:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	6813      	ldr	r3, [r2, #0]
     18c:	420b      	tst	r3, r1
     18e:	d0fc      	beq.n	18a <delay_cycles_ms+0x1a>
     190:	e7f5      	b.n	17e <delay_cycles_ms+0xe>
	}
}
     192:	bd30      	pop	{r4, r5, pc}
     194:	20000000 	.word	0x20000000
     198:	e000e010 	.word	0xe000e010

0000019c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     19c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     19e:	2200      	movs	r2, #0
     1a0:	2300      	movs	r3, #0
     1a2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1a4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1a6:	2100      	movs	r1, #0
     1a8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1aa:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1ac:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1ae:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1b0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1b2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1b4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1b6:	24c0      	movs	r4, #192	; 0xc0
     1b8:	0164      	lsls	r4, r4, #5
     1ba:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1bc:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1be:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1c0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1c2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1c4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1c6:	242a      	movs	r4, #42	; 0x2a
     1c8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1ca:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1cc:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1ce:	3c06      	subs	r4, #6
     1d0:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1d2:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1d4:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1d6:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1d8:	232b      	movs	r3, #43	; 0x2b
     1da:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1dc:	3301      	adds	r3, #1
     1de:	54c1      	strb	r1, [r0, r3]
}
     1e0:	bd10      	pop	{r4, pc}
	...

000001e4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46de      	mov	lr, fp
     1e8:	4657      	mov	r7, sl
     1ea:	464e      	mov	r6, r9
     1ec:	4645      	mov	r5, r8
     1ee:	b5e0      	push	{r5, r6, r7, lr}
     1f0:	b097      	sub	sp, #92	; 0x5c
     1f2:	0007      	movs	r7, r0
     1f4:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1f6:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1f8:	4ac9      	ldr	r2, [pc, #804]	; (520 <adc_init+0x33c>)
     1fa:	6a10      	ldr	r0, [r2, #32]
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	025b      	lsls	r3, r3, #9
     200:	4303      	orrs	r3, r0
     202:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     204:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     206:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     208:	07db      	lsls	r3, r3, #31
     20a:	d506      	bpl.n	21a <adc_init+0x36>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     20c:	b017      	add	sp, #92	; 0x5c
     20e:	bc3c      	pop	{r2, r3, r4, r5}
     210:	4690      	mov	r8, r2
     212:	4699      	mov	r9, r3
     214:	46a2      	mov	sl, r4
     216:	46ab      	mov	fp, r5
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     21a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     21c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     21e:	079b      	lsls	r3, r3, #30
     220:	d4f4      	bmi.n	20c <adc_init+0x28>
	module_inst->reference = config->reference;
     222:	7873      	ldrb	r3, [r6, #1]
     224:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     226:	2b00      	cmp	r3, #0
     228:	d104      	bne.n	234 <adc_init+0x50>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     22a:	4abe      	ldr	r2, [pc, #760]	; (524 <adc_init+0x340>)
     22c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     22e:	2104      	movs	r1, #4
     230:	430b      	orrs	r3, r1
     232:	6413      	str	r3, [r2, #64]	; 0x40
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
     234:	4bbc      	ldr	r3, [pc, #752]	; (528 <adc_init+0x344>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	051b      	lsls	r3, r3, #20
     23a:	0f1b      	lsrs	r3, r3, #28
     23c:	4698      	mov	r8, r3
	Adc *const adc_module = module_inst->hw;
     23e:	683b      	ldr	r3, [r7, #0]
     240:	469b      	mov	fp, r3
	gclk_chan_conf.source_generator = config->clock_source;
     242:	7833      	ldrb	r3, [r6, #0]
     244:	466a      	mov	r2, sp
     246:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     248:	4669      	mov	r1, sp
     24a:	2017      	movs	r0, #23
     24c:	4bb7      	ldr	r3, [pc, #732]	; (52c <adc_init+0x348>)
     24e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     250:	2017      	movs	r0, #23
     252:	4bb7      	ldr	r3, [pc, #732]	; (530 <adc_init+0x34c>)
     254:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     256:	232c      	movs	r3, #44	; 0x2c
     258:	5cf2      	ldrb	r2, [r6, r3]
     25a:	2a00      	cmp	r2, #0
     25c:	d05a      	beq.n	314 <adc_init+0x130>
		uint8_t offset = config->pin_scan.offset_start_scan;
     25e:	3b01      	subs	r3, #1
     260:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     262:	7b33      	ldrb	r3, [r6, #12]
     264:	18eb      	adds	r3, r5, r3
     266:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     268:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     26a:	b2c9      	uxtb	r1, r1
     26c:	428b      	cmp	r3, r1
     26e:	d227      	bcs.n	2c0 <adc_init+0xdc>
     270:	1952      	adds	r2, r2, r5
     272:	b2d3      	uxtb	r3, r2
     274:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     276:	4baf      	ldr	r3, [pc, #700]	; (534 <adc_init+0x350>)
     278:	469a      	mov	sl, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     27a:	0033      	movs	r3, r6
     27c:	464e      	mov	r6, r9
     27e:	46b9      	mov	r9, r7
     280:	001f      	movs	r7, r3
     282:	e003      	b.n	28c <adc_init+0xa8>
			offset++;
     284:	3501      	adds	r5, #1
     286:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     288:	42ae      	cmp	r6, r5
     28a:	d017      	beq.n	2bc <adc_init+0xd8>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     28c:	240f      	movs	r4, #15
     28e:	402c      	ands	r4, r5
     290:	7b3b      	ldrb	r3, [r7, #12]
     292:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     294:	2250      	movs	r2, #80	; 0x50
     296:	49a8      	ldr	r1, [pc, #672]	; (538 <adc_init+0x354>)
     298:	a802      	add	r0, sp, #8
     29a:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     29c:	2c13      	cmp	r4, #19
     29e:	d8f1      	bhi.n	284 <adc_init+0xa0>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2a0:	00a4      	lsls	r4, r4, #2
     2a2:	ab02      	add	r3, sp, #8
     2a4:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2a6:	a901      	add	r1, sp, #4
     2a8:	2300      	movs	r3, #0
     2aa:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2ac:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2ae:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2b0:	3301      	adds	r3, #1
     2b2:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2b4:	b2c0      	uxtb	r0, r0
     2b6:	4ba1      	ldr	r3, [pc, #644]	; (53c <adc_init+0x358>)
     2b8:	4798      	blx	r3
     2ba:	e7e3      	b.n	284 <adc_init+0xa0>
     2bc:	003e      	movs	r6, r7
     2be:	464f      	mov	r7, r9
		_adc_configure_ain_pin(config->negative_input);
     2c0:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2c2:	2250      	movs	r2, #80	; 0x50
     2c4:	499c      	ldr	r1, [pc, #624]	; (538 <adc_init+0x354>)
     2c6:	a802      	add	r0, sp, #8
     2c8:	4b9a      	ldr	r3, [pc, #616]	; (534 <adc_init+0x350>)
     2ca:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2cc:	2c13      	cmp	r4, #19
     2ce:	d913      	bls.n	2f8 <adc_init+0x114>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2d0:	7d73      	ldrb	r3, [r6, #21]
     2d2:	009b      	lsls	r3, r3, #2
     2d4:	b2db      	uxtb	r3, r3
     2d6:	465a      	mov	r2, fp
     2d8:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2da:	7db3      	ldrb	r3, [r6, #22]
     2dc:	01db      	lsls	r3, r3, #7
     2de:	7872      	ldrb	r2, [r6, #1]
     2e0:	4313      	orrs	r3, r2
     2e2:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2e4:	465a      	mov	r2, fp
     2e6:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2e8:	7933      	ldrb	r3, [r6, #4]
     2ea:	2b34      	cmp	r3, #52	; 0x34
     2ec:	d900      	bls.n	2f0 <adc_init+0x10c>
     2ee:	e18c      	b.n	60a <adc_init+0x426>
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	4a93      	ldr	r2, [pc, #588]	; (540 <adc_init+0x35c>)
     2f4:	58d3      	ldr	r3, [r2, r3]
     2f6:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2f8:	00a4      	lsls	r4, r4, #2
     2fa:	ab02      	add	r3, sp, #8
     2fc:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2fe:	a901      	add	r1, sp, #4
     300:	2300      	movs	r3, #0
     302:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     304:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     306:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     308:	3301      	adds	r3, #1
     30a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     30c:	b2c0      	uxtb	r0, r0
     30e:	4b8b      	ldr	r3, [pc, #556]	; (53c <adc_init+0x358>)
     310:	4798      	blx	r3
     312:	e7dd      	b.n	2d0 <adc_init+0xec>
		_adc_configure_ain_pin(config->positive_input);
     314:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     316:	2250      	movs	r2, #80	; 0x50
     318:	4987      	ldr	r1, [pc, #540]	; (538 <adc_init+0x354>)
     31a:	a802      	add	r0, sp, #8
     31c:	4b85      	ldr	r3, [pc, #532]	; (534 <adc_init+0x350>)
     31e:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     320:	2c13      	cmp	r4, #19
     322:	d915      	bls.n	350 <adc_init+0x16c>
		_adc_configure_ain_pin(config->negative_input);
     324:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     326:	2250      	movs	r2, #80	; 0x50
     328:	4983      	ldr	r1, [pc, #524]	; (538 <adc_init+0x354>)
     32a:	a802      	add	r0, sp, #8
     32c:	4b81      	ldr	r3, [pc, #516]	; (534 <adc_init+0x350>)
     32e:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     330:	2c13      	cmp	r4, #19
     332:	d8cd      	bhi.n	2d0 <adc_init+0xec>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     334:	00a4      	lsls	r4, r4, #2
     336:	ab02      	add	r3, sp, #8
     338:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     340:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     342:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     344:	3301      	adds	r3, #1
     346:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     348:	b2c0      	uxtb	r0, r0
     34a:	4b7c      	ldr	r3, [pc, #496]	; (53c <adc_init+0x358>)
     34c:	4798      	blx	r3
     34e:	e7bf      	b.n	2d0 <adc_init+0xec>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     350:	00a4      	lsls	r4, r4, #2
     352:	ab02      	add	r3, sp, #8
     354:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     356:	a901      	add	r1, sp, #4
     358:	2300      	movs	r3, #0
     35a:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     35c:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     35e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     360:	3301      	adds	r3, #1
     362:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     364:	b2c0      	uxtb	r0, r0
     366:	4b75      	ldr	r3, [pc, #468]	; (53c <adc_init+0x358>)
     368:	4798      	blx	r3
     36a:	e7db      	b.n	324 <adc_init+0x140>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     36c:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     36e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     370:	2102      	movs	r1, #2
     372:	e022      	b.n	3ba <adc_init+0x1d6>
		adjres = config->divide_result;
     374:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     376:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     378:	2410      	movs	r4, #16
     37a:	e01e      	b.n	3ba <adc_init+0x1d6>
		if(revision_num < REVISON_D_NUM) {
     37c:	4643      	mov	r3, r8
     37e:	2b02      	cmp	r3, #2
     380:	d800      	bhi.n	384 <adc_init+0x1a0>
     382:	e0c4      	b.n	50e <adc_init+0x32a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     384:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     386:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_2;
     388:	2101      	movs	r1, #1
     38a:	e016      	b.n	3ba <adc_init+0x1d6>
		if(revision_num < REVISON_D_NUM) {
     38c:	4643      	mov	r3, r8
     38e:	2b02      	cmp	r3, #2
     390:	d800      	bhi.n	394 <adc_init+0x1b0>
     392:	e0c0      	b.n	516 <adc_init+0x332>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     394:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     396:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_DISABLE;
     398:	2100      	movs	r1, #0
     39a:	e00e      	b.n	3ba <adc_init+0x1d6>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     39c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     39e:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     3a0:	2100      	movs	r1, #0
     3a2:	e00a      	b.n	3ba <adc_init+0x1d6>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3a4:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     3a6:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     3a8:	2100      	movs	r1, #0
     3aa:	e006      	b.n	3ba <adc_init+0x1d6>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ac:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3ae:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3b0:	2100      	movs	r1, #0
     3b2:	e002      	b.n	3ba <adc_init+0x1d6>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3b4:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3b6:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3b8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3ba:	0109      	lsls	r1, r1, #4
     3bc:	2270      	movs	r2, #112	; 0x70
     3be:	400a      	ands	r2, r1
     3c0:	4313      	orrs	r3, r2
     3c2:	465a      	mov	r2, fp
     3c4:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3c6:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3c8:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3ca:	2b3f      	cmp	r3, #63	; 0x3f
     3cc:	d900      	bls.n	3d0 <adc_init+0x1ec>
     3ce:	e71d      	b.n	20c <adc_init+0x28>
		adc_module->SAMPCTRL.reg =
     3d0:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3d2:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3d4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d6:	b25b      	sxtb	r3, r3
     3d8:	2b00      	cmp	r3, #0
     3da:	dbfb      	blt.n	3d4 <adc_init+0x1f0>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3dc:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3de:	8872      	ldrh	r2, [r6, #2]
     3e0:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3e2:	2224      	movs	r2, #36	; 0x24
     3e4:	5cb2      	ldrb	r2, [r6, r2]
     3e6:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3e8:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3ea:	7d32      	ldrb	r2, [r6, #20]
     3ec:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ee:	4313      	orrs	r3, r2
     3f0:	7cb2      	ldrb	r2, [r6, #18]
     3f2:	0052      	lsls	r2, r2, #1
     3f4:	4313      	orrs	r3, r2
     3f6:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3f8:	465a      	mov	r2, fp
     3fa:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3fc:	7e33      	ldrb	r3, [r6, #24]
     3fe:	2b00      	cmp	r3, #0
     400:	d020      	beq.n	444 <adc_init+0x260>
		switch (resolution) {
     402:	2c10      	cmp	r4, #16
     404:	d100      	bne.n	408 <adc_init+0x224>
     406:	e0e2      	b.n	5ce <adc_init+0x3ea>
     408:	d800      	bhi.n	40c <adc_init+0x228>
     40a:	e0a1      	b.n	550 <adc_init+0x36c>
     40c:	2c20      	cmp	r4, #32
     40e:	d100      	bne.n	412 <adc_init+0x22e>
     410:	e0bf      	b.n	592 <adc_init+0x3ae>
     412:	2c30      	cmp	r4, #48	; 0x30
     414:	d116      	bne.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     416:	7cf2      	ldrb	r2, [r6, #19]
     418:	2a00      	cmp	r2, #0
     41a:	d00a      	beq.n	432 <adc_init+0x24e>
					(config->window.window_lower_value > 127 ||
     41c:	69f2      	ldr	r2, [r6, #28]
     41e:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     420:	2017      	movs	r0, #23
			if (config->differential_mode &&
     422:	2aff      	cmp	r2, #255	; 0xff
     424:	d900      	bls.n	428 <adc_init+0x244>
     426:	e6f1      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     428:	6a32      	ldr	r2, [r6, #32]
     42a:	3280      	adds	r2, #128	; 0x80
     42c:	2aff      	cmp	r2, #255	; 0xff
     42e:	d900      	bls.n	432 <adc_init+0x24e>
     430:	e6ec      	b.n	20c <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     432:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     434:	69f2      	ldr	r2, [r6, #28]
     436:	2aff      	cmp	r2, #255	; 0xff
     438:	dd00      	ble.n	43c <adc_init+0x258>
     43a:	e6e7      	b.n	20c <adc_init+0x28>
     43c:	6a32      	ldr	r2, [r6, #32]
     43e:	2aff      	cmp	r2, #255	; 0xff
     440:	dd00      	ble.n	444 <adc_init+0x260>
     442:	e6e3      	b.n	20c <adc_init+0x28>
	Adc *const adc_module = module_inst->hw;
     444:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     446:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     448:	b252      	sxtb	r2, r2
     44a:	2a00      	cmp	r2, #0
     44c:	dbfb      	blt.n	446 <adc_init+0x262>
	adc_module->WINCTRL.reg = config->window.window_mode;
     44e:	465a      	mov	r2, fp
     450:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     452:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     454:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     456:	b25b      	sxtb	r3, r3
     458:	2b00      	cmp	r3, #0
     45a:	dbfb      	blt.n	454 <adc_init+0x270>
	adc_module->WINLT.reg =
     45c:	8bb3      	ldrh	r3, [r6, #28]
     45e:	465a      	mov	r2, fp
     460:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     462:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     464:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     466:	b25b      	sxtb	r3, r3
     468:	2b00      	cmp	r3, #0
     46a:	dbfb      	blt.n	464 <adc_init+0x280>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     46c:	8c33      	ldrh	r3, [r6, #32]
     46e:	465a      	mov	r2, fp
     470:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     472:	232c      	movs	r3, #44	; 0x2c
     474:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     476:	2b00      	cmp	r3, #0
     478:	d005      	beq.n	486 <adc_init+0x2a2>
		inputs_to_scan--;
     47a:	3b01      	subs	r3, #1
     47c:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     47e:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     480:	2b0f      	cmp	r3, #15
     482:	d900      	bls.n	486 <adc_init+0x2a2>
     484:	e6c2      	b.n	20c <adc_init+0x28>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     486:	222b      	movs	r2, #43	; 0x2b
     488:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     48a:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     48c:	290f      	cmp	r1, #15
     48e:	d900      	bls.n	492 <adc_init+0x2ae>
     490:	e6bc      	b.n	20c <adc_init+0x28>
	Adc *const adc_module = module_inst->hw;
     492:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     494:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     496:	b252      	sxtb	r2, r2
     498:	2a00      	cmp	r2, #0
     49a:	dbfb      	blt.n	494 <adc_init+0x2b0>
			config->negative_input |
     49c:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     49e:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     4a0:	4302      	orrs	r2, r0
     4a2:	68b0      	ldr	r0, [r6, #8]
     4a4:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     4a6:	0509      	lsls	r1, r1, #20
			config->negative_input |
     4a8:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4aa:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4ac:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     4ae:	465a      	mov	r2, fp
     4b0:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4b2:	232a      	movs	r3, #42	; 0x2a
     4b4:	5cf3      	ldrb	r3, [r6, r3]
     4b6:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4b8:	230f      	movs	r3, #15
     4ba:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4bc:	3315      	adds	r3, #21
     4be:	5cf3      	ldrb	r3, [r6, r3]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d012      	beq.n	4ea <adc_init+0x306>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4c4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4c6:	4a1f      	ldr	r2, [pc, #124]	; (544 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     4c8:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4ca:	4293      	cmp	r3, r2
     4cc:	d900      	bls.n	4d0 <adc_init+0x2ec>
     4ce:	e69d      	b.n	20c <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4d0:	465a      	mov	r2, fp
     4d2:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4d4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4d6:	2380      	movs	r3, #128	; 0x80
     4d8:	011b      	lsls	r3, r3, #4
     4da:	18d3      	adds	r3, r2, r3
     4dc:	4919      	ldr	r1, [pc, #100]	; (544 <adc_init+0x360>)
     4de:	b29b      	uxth	r3, r3
     4e0:	428b      	cmp	r3, r1
     4e2:	d900      	bls.n	4e6 <adc_init+0x302>
     4e4:	e692      	b.n	20c <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4e6:	465b      	mov	r3, fp
     4e8:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4ea:	4b17      	ldr	r3, [pc, #92]	; (548 <adc_init+0x364>)
     4ec:	681b      	ldr	r3, [r3, #0]
     4ee:	015b      	lsls	r3, r3, #5
     4f0:	22e0      	movs	r2, #224	; 0xe0
     4f2:	00d2      	lsls	r2, r2, #3
     4f4:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4f6:	4a15      	ldr	r2, [pc, #84]	; (54c <adc_init+0x368>)
     4f8:	6851      	ldr	r1, [r2, #4]
     4fa:	0149      	lsls	r1, r1, #5
     4fc:	6812      	ldr	r2, [r2, #0]
     4fe:	0ed2      	lsrs	r2, r2, #27
     500:	430a      	orrs	r2, r1
     502:	b2d2      	uxtb	r2, r2
			) |
     504:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     506:	465a      	mov	r2, fp
     508:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     50a:	2000      	movs	r0, #0
     50c:	e67e      	b.n	20c <adc_init+0x28>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     50e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     510:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_8;
     512:	2103      	movs	r1, #3
     514:	e751      	b.n	3ba <adc_init+0x1d6>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     516:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     518:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_16;
     51a:	2104      	movs	r1, #4
     51c:	e74d      	b.n	3ba <adc_init+0x1d6>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	40000400 	.word	0x40000400
     524:	40000800 	.word	0x40000800
     528:	41002018 	.word	0x41002018
     52c:	00002155 	.word	0x00002155
     530:	000020c9 	.word	0x000020c9
     534:	00002b4d 	.word	0x00002b4d
     538:	00002c44 	.word	0x00002c44
     53c:	0000224d 	.word	0x0000224d
     540:	00002b70 	.word	0x00002b70
     544:	00000fff 	.word	0x00000fff
     548:	00806024 	.word	0x00806024
     54c:	00806020 	.word	0x00806020
		switch (resolution) {
     550:	2c00      	cmp	r4, #0
     552:	d000      	beq.n	556 <adc_init+0x372>
     554:	e776      	b.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     556:	7cf2      	ldrb	r2, [r6, #19]
     558:	2a00      	cmp	r2, #0
     55a:	d00f      	beq.n	57c <adc_init+0x398>
					(config->window.window_lower_value > 2047 ||
     55c:	69f2      	ldr	r2, [r6, #28]
     55e:	2180      	movs	r1, #128	; 0x80
     560:	0109      	lsls	r1, r1, #4
     562:	468c      	mov	ip, r1
     564:	4462      	add	r2, ip
			if (config->differential_mode &&
     566:	492a      	ldr	r1, [pc, #168]	; (610 <adc_init+0x42c>)
				return STATUS_ERR_INVALID_ARG;
     568:	2017      	movs	r0, #23
			if (config->differential_mode &&
     56a:	428a      	cmp	r2, r1
     56c:	d900      	bls.n	570 <adc_init+0x38c>
     56e:	e64d      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     570:	6a32      	ldr	r2, [r6, #32]
     572:	4462      	add	r2, ip
     574:	4926      	ldr	r1, [pc, #152]	; (610 <adc_init+0x42c>)
     576:	428a      	cmp	r2, r1
     578:	d900      	bls.n	57c <adc_init+0x398>
     57a:	e647      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     57c:	4a24      	ldr	r2, [pc, #144]	; (610 <adc_init+0x42c>)
				return STATUS_ERR_INVALID_ARG;
     57e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     580:	69f1      	ldr	r1, [r6, #28]
     582:	4291      	cmp	r1, r2
     584:	dd00      	ble.n	588 <adc_init+0x3a4>
     586:	e641      	b.n	20c <adc_init+0x28>
     588:	6a31      	ldr	r1, [r6, #32]
     58a:	4291      	cmp	r1, r2
     58c:	dd00      	ble.n	590 <adc_init+0x3ac>
     58e:	e63d      	b.n	20c <adc_init+0x28>
     590:	e758      	b.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     592:	7cf2      	ldrb	r2, [r6, #19]
     594:	2a00      	cmp	r2, #0
     596:	d00f      	beq.n	5b8 <adc_init+0x3d4>
					(config->window.window_lower_value > 511 ||
     598:	69f2      	ldr	r2, [r6, #28]
     59a:	2180      	movs	r1, #128	; 0x80
     59c:	0089      	lsls	r1, r1, #2
     59e:	468c      	mov	ip, r1
     5a0:	4462      	add	r2, ip
			if (config->differential_mode &&
     5a2:	491c      	ldr	r1, [pc, #112]	; (614 <adc_init+0x430>)
				return STATUS_ERR_INVALID_ARG;
     5a4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5a6:	428a      	cmp	r2, r1
     5a8:	d900      	bls.n	5ac <adc_init+0x3c8>
     5aa:	e62f      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     5ac:	6a32      	ldr	r2, [r6, #32]
     5ae:	4462      	add	r2, ip
     5b0:	4918      	ldr	r1, [pc, #96]	; (614 <adc_init+0x430>)
     5b2:	428a      	cmp	r2, r1
     5b4:	d900      	bls.n	5b8 <adc_init+0x3d4>
     5b6:	e629      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     5b8:	4a16      	ldr	r2, [pc, #88]	; (614 <adc_init+0x430>)
				return STATUS_ERR_INVALID_ARG;
     5ba:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     5bc:	69f1      	ldr	r1, [r6, #28]
     5be:	4291      	cmp	r1, r2
     5c0:	dd00      	ble.n	5c4 <adc_init+0x3e0>
     5c2:	e623      	b.n	20c <adc_init+0x28>
     5c4:	6a31      	ldr	r1, [r6, #32]
     5c6:	4291      	cmp	r1, r2
     5c8:	dd00      	ble.n	5cc <adc_init+0x3e8>
     5ca:	e61f      	b.n	20c <adc_init+0x28>
     5cc:	e73a      	b.n	444 <adc_init+0x260>
			if (config->differential_mode &&
     5ce:	7cf2      	ldrb	r2, [r6, #19]
     5d0:	2a00      	cmp	r2, #0
     5d2:	d00f      	beq.n	5f4 <adc_init+0x410>
					(config->window.window_lower_value > 32767 ||
     5d4:	69f2      	ldr	r2, [r6, #28]
     5d6:	2180      	movs	r1, #128	; 0x80
     5d8:	0209      	lsls	r1, r1, #8
     5da:	468c      	mov	ip, r1
     5dc:	4462      	add	r2, ip
			if (config->differential_mode &&
     5de:	490e      	ldr	r1, [pc, #56]	; (618 <adc_init+0x434>)
				return STATUS_ERR_INVALID_ARG;
     5e0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5e2:	428a      	cmp	r2, r1
     5e4:	d900      	bls.n	5e8 <adc_init+0x404>
     5e6:	e611      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     5e8:	6a32      	ldr	r2, [r6, #32]
     5ea:	4462      	add	r2, ip
     5ec:	490a      	ldr	r1, [pc, #40]	; (618 <adc_init+0x434>)
     5ee:	428a      	cmp	r2, r1
     5f0:	d900      	bls.n	5f4 <adc_init+0x410>
     5f2:	e60b      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     5f4:	4a08      	ldr	r2, [pc, #32]	; (618 <adc_init+0x434>)
				return STATUS_ERR_INVALID_ARG;
     5f6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5f8:	69f1      	ldr	r1, [r6, #28]
     5fa:	4291      	cmp	r1, r2
     5fc:	dd00      	ble.n	600 <adc_init+0x41c>
     5fe:	e605      	b.n	20c <adc_init+0x28>
     600:	6a31      	ldr	r1, [r6, #32]
     602:	4291      	cmp	r1, r2
     604:	dd00      	ble.n	608 <adc_init+0x424>
     606:	e601      	b.n	20c <adc_init+0x28>
     608:	e71c      	b.n	444 <adc_init+0x260>
		return STATUS_ERR_INVALID_ARG;
     60a:	2017      	movs	r0, #23
     60c:	e5fe      	b.n	20c <adc_init+0x28>
     60e:	46c0      	nop			; (mov r8, r8)
     610:	00000fff 	.word	0x00000fff
     614:	000003ff 	.word	0x000003ff
     618:	0000ffff 	.word	0x0000ffff

0000061c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     61c:	b5f0      	push	{r4, r5, r6, r7, lr}
     61e:	46de      	mov	lr, fp
     620:	4657      	mov	r7, sl
     622:	464e      	mov	r6, r9
     624:	4645      	mov	r5, r8
     626:	b5e0      	push	{r5, r6, r7, lr}
     628:	b087      	sub	sp, #28
     62a:	4680      	mov	r8, r0
     62c:	9104      	str	r1, [sp, #16]
     62e:	0016      	movs	r6, r2
     630:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     632:	2200      	movs	r2, #0
     634:	2300      	movs	r3, #0
     636:	2100      	movs	r1, #0
     638:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     63a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     63c:	2001      	movs	r0, #1
     63e:	0021      	movs	r1, r4
     640:	9600      	str	r6, [sp, #0]
     642:	9701      	str	r7, [sp, #4]
     644:	465c      	mov	r4, fp
     646:	9403      	str	r4, [sp, #12]
     648:	4644      	mov	r4, r8
     64a:	9405      	str	r4, [sp, #20]
     64c:	e013      	b.n	676 <long_division+0x5a>
     64e:	2420      	movs	r4, #32
     650:	1a64      	subs	r4, r4, r1
     652:	0005      	movs	r5, r0
     654:	40e5      	lsrs	r5, r4
     656:	46a8      	mov	r8, r5
     658:	e014      	b.n	684 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     65a:	9c00      	ldr	r4, [sp, #0]
     65c:	9d01      	ldr	r5, [sp, #4]
     65e:	1b12      	subs	r2, r2, r4
     660:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     662:	465c      	mov	r4, fp
     664:	464d      	mov	r5, r9
     666:	432c      	orrs	r4, r5
     668:	46a3      	mov	fp, r4
     66a:	9c03      	ldr	r4, [sp, #12]
     66c:	4645      	mov	r5, r8
     66e:	432c      	orrs	r4, r5
     670:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     672:	3901      	subs	r1, #1
     674:	d325      	bcc.n	6c2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     676:	2420      	movs	r4, #32
     678:	4264      	negs	r4, r4
     67a:	190c      	adds	r4, r1, r4
     67c:	d4e7      	bmi.n	64e <long_division+0x32>
     67e:	0005      	movs	r5, r0
     680:	40a5      	lsls	r5, r4
     682:	46a8      	mov	r8, r5
     684:	0004      	movs	r4, r0
     686:	408c      	lsls	r4, r1
     688:	46a1      	mov	r9, r4
		r = r << 1;
     68a:	1892      	adds	r2, r2, r2
     68c:	415b      	adcs	r3, r3
     68e:	0014      	movs	r4, r2
     690:	001d      	movs	r5, r3
		if (n & bit_shift) {
     692:	9e05      	ldr	r6, [sp, #20]
     694:	464f      	mov	r7, r9
     696:	403e      	ands	r6, r7
     698:	46b4      	mov	ip, r6
     69a:	9e04      	ldr	r6, [sp, #16]
     69c:	4647      	mov	r7, r8
     69e:	403e      	ands	r6, r7
     6a0:	46b2      	mov	sl, r6
     6a2:	4666      	mov	r6, ip
     6a4:	4657      	mov	r7, sl
     6a6:	433e      	orrs	r6, r7
     6a8:	d003      	beq.n	6b2 <long_division+0x96>
			r |= 0x01;
     6aa:	0006      	movs	r6, r0
     6ac:	4326      	orrs	r6, r4
     6ae:	0032      	movs	r2, r6
     6b0:	002b      	movs	r3, r5
		if (r >= d) {
     6b2:	9c00      	ldr	r4, [sp, #0]
     6b4:	9d01      	ldr	r5, [sp, #4]
     6b6:	429d      	cmp	r5, r3
     6b8:	d8db      	bhi.n	672 <long_division+0x56>
     6ba:	d1ce      	bne.n	65a <long_division+0x3e>
     6bc:	4294      	cmp	r4, r2
     6be:	d8d8      	bhi.n	672 <long_division+0x56>
     6c0:	e7cb      	b.n	65a <long_division+0x3e>
     6c2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     6c4:	4658      	mov	r0, fp
     6c6:	0019      	movs	r1, r3
     6c8:	b007      	add	sp, #28
     6ca:	bc3c      	pop	{r2, r3, r4, r5}
     6cc:	4690      	mov	r8, r2
     6ce:	4699      	mov	r9, r3
     6d0:	46a2      	mov	sl, r4
     6d2:	46ab      	mov	fp, r5
     6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006d6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     6d6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6d8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6da:	2340      	movs	r3, #64	; 0x40
     6dc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     6de:	4281      	cmp	r1, r0
     6e0:	d202      	bcs.n	6e8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     6e2:	0018      	movs	r0, r3
     6e4:	bd10      	pop	{r4, pc}
		baud_calculated++;
     6e6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     6e8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     6ea:	1c63      	adds	r3, r4, #1
     6ec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     6ee:	4288      	cmp	r0, r1
     6f0:	d9f9      	bls.n	6e6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6f2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     6f4:	2cff      	cmp	r4, #255	; 0xff
     6f6:	d8f4      	bhi.n	6e2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     6f8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     6fa:	2300      	movs	r3, #0
     6fc:	e7f1      	b.n	6e2 <_sercom_get_sync_baud_val+0xc>
	...

00000700 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     700:	b5f0      	push	{r4, r5, r6, r7, lr}
     702:	b083      	sub	sp, #12
     704:	000f      	movs	r7, r1
     706:	0016      	movs	r6, r2
     708:	aa08      	add	r2, sp, #32
     70a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     70c:	0004      	movs	r4, r0
     70e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     710:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     712:	42bc      	cmp	r4, r7
     714:	d902      	bls.n	71c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     716:	0010      	movs	r0, r2
     718:	b003      	add	sp, #12
     71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     71c:	2b00      	cmp	r3, #0
     71e:	d114      	bne.n	74a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     720:	0002      	movs	r2, r0
     722:	0008      	movs	r0, r1
     724:	2100      	movs	r1, #0
     726:	4c19      	ldr	r4, [pc, #100]	; (78c <_sercom_get_async_baud_val+0x8c>)
     728:	47a0      	blx	r4
     72a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     72c:	003a      	movs	r2, r7
     72e:	2300      	movs	r3, #0
     730:	2000      	movs	r0, #0
     732:	4c17      	ldr	r4, [pc, #92]	; (790 <_sercom_get_async_baud_val+0x90>)
     734:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     736:	2200      	movs	r2, #0
     738:	2301      	movs	r3, #1
     73a:	1a12      	subs	r2, r2, r0
     73c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     73e:	0c12      	lsrs	r2, r2, #16
     740:	041b      	lsls	r3, r3, #16
     742:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     744:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     746:	2200      	movs	r2, #0
     748:	e7e5      	b.n	716 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     74a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     74c:	2b01      	cmp	r3, #1
     74e:	d1f9      	bne.n	744 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     750:	000a      	movs	r2, r1
     752:	2300      	movs	r3, #0
     754:	2100      	movs	r1, #0
     756:	4c0d      	ldr	r4, [pc, #52]	; (78c <_sercom_get_async_baud_val+0x8c>)
     758:	47a0      	blx	r4
     75a:	0002      	movs	r2, r0
     75c:	000b      	movs	r3, r1
     75e:	9200      	str	r2, [sp, #0]
     760:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     762:	0038      	movs	r0, r7
     764:	2100      	movs	r1, #0
     766:	4c0a      	ldr	r4, [pc, #40]	; (790 <_sercom_get_async_baud_val+0x90>)
     768:	47a0      	blx	r4
     76a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     76c:	2380      	movs	r3, #128	; 0x80
     76e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     770:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     772:	4298      	cmp	r0, r3
     774:	d8cf      	bhi.n	716 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     776:	0f79      	lsrs	r1, r7, #29
     778:	00f8      	lsls	r0, r7, #3
     77a:	9a00      	ldr	r2, [sp, #0]
     77c:	9b01      	ldr	r3, [sp, #4]
     77e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     780:	00ea      	lsls	r2, r5, #3
     782:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     784:	b2d2      	uxtb	r2, r2
     786:	0352      	lsls	r2, r2, #13
     788:	432a      	orrs	r2, r5
     78a:	e7db      	b.n	744 <_sercom_get_async_baud_val+0x44>
     78c:	00002ab1 	.word	0x00002ab1
     790:	0000061d 	.word	0x0000061d

00000794 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     794:	b510      	push	{r4, lr}
     796:	b082      	sub	sp, #8
     798:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     79a:	4b0e      	ldr	r3, [pc, #56]	; (7d4 <sercom_set_gclk_generator+0x40>)
     79c:	781b      	ldrb	r3, [r3, #0]
     79e:	2b00      	cmp	r3, #0
     7a0:	d007      	beq.n	7b2 <sercom_set_gclk_generator+0x1e>
     7a2:	2900      	cmp	r1, #0
     7a4:	d105      	bne.n	7b2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <sercom_set_gclk_generator+0x40>)
     7a8:	785b      	ldrb	r3, [r3, #1]
     7aa:	4283      	cmp	r3, r0
     7ac:	d010      	beq.n	7d0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7ae:	201d      	movs	r0, #29
     7b0:	e00c      	b.n	7cc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     7b2:	a901      	add	r1, sp, #4
     7b4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7b6:	200c      	movs	r0, #12
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <sercom_set_gclk_generator+0x44>)
     7ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7bc:	200c      	movs	r0, #12
     7be:	4b07      	ldr	r3, [pc, #28]	; (7dc <sercom_set_gclk_generator+0x48>)
     7c0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     7c2:	4b04      	ldr	r3, [pc, #16]	; (7d4 <sercom_set_gclk_generator+0x40>)
     7c4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7c6:	2201      	movs	r2, #1
     7c8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7ca:	2000      	movs	r0, #0
}
     7cc:	b002      	add	sp, #8
     7ce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7d0:	2000      	movs	r0, #0
     7d2:	e7fb      	b.n	7cc <sercom_set_gclk_generator+0x38>
     7d4:	20000048 	.word	0x20000048
     7d8:	00002155 	.word	0x00002155
     7dc:	000020c9 	.word	0x000020c9

000007e0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7e0:	4b40      	ldr	r3, [pc, #256]	; (8e4 <_sercom_get_default_pad+0x104>)
     7e2:	4298      	cmp	r0, r3
     7e4:	d031      	beq.n	84a <_sercom_get_default_pad+0x6a>
     7e6:	d90a      	bls.n	7fe <_sercom_get_default_pad+0x1e>
     7e8:	4b3f      	ldr	r3, [pc, #252]	; (8e8 <_sercom_get_default_pad+0x108>)
     7ea:	4298      	cmp	r0, r3
     7ec:	d04d      	beq.n	88a <_sercom_get_default_pad+0xaa>
     7ee:	4b3f      	ldr	r3, [pc, #252]	; (8ec <_sercom_get_default_pad+0x10c>)
     7f0:	4298      	cmp	r0, r3
     7f2:	d05a      	beq.n	8aa <_sercom_get_default_pad+0xca>
     7f4:	4b3e      	ldr	r3, [pc, #248]	; (8f0 <_sercom_get_default_pad+0x110>)
     7f6:	4298      	cmp	r0, r3
     7f8:	d037      	beq.n	86a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     7fa:	2000      	movs	r0, #0
}
     7fc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     7fe:	4b3d      	ldr	r3, [pc, #244]	; (8f4 <_sercom_get_default_pad+0x114>)
     800:	4298      	cmp	r0, r3
     802:	d00c      	beq.n	81e <_sercom_get_default_pad+0x3e>
     804:	4b3c      	ldr	r3, [pc, #240]	; (8f8 <_sercom_get_default_pad+0x118>)
     806:	4298      	cmp	r0, r3
     808:	d1f7      	bne.n	7fa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     80a:	2901      	cmp	r1, #1
     80c:	d017      	beq.n	83e <_sercom_get_default_pad+0x5e>
     80e:	2900      	cmp	r1, #0
     810:	d05d      	beq.n	8ce <_sercom_get_default_pad+0xee>
     812:	2902      	cmp	r1, #2
     814:	d015      	beq.n	842 <_sercom_get_default_pad+0x62>
     816:	2903      	cmp	r1, #3
     818:	d015      	beq.n	846 <_sercom_get_default_pad+0x66>
	return 0;
     81a:	2000      	movs	r0, #0
     81c:	e7ee      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     81e:	2901      	cmp	r1, #1
     820:	d007      	beq.n	832 <_sercom_get_default_pad+0x52>
     822:	2900      	cmp	r1, #0
     824:	d051      	beq.n	8ca <_sercom_get_default_pad+0xea>
     826:	2902      	cmp	r1, #2
     828:	d005      	beq.n	836 <_sercom_get_default_pad+0x56>
     82a:	2903      	cmp	r1, #3
     82c:	d005      	beq.n	83a <_sercom_get_default_pad+0x5a>
	return 0;
     82e:	2000      	movs	r0, #0
     830:	e7e4      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     832:	4832      	ldr	r0, [pc, #200]	; (8fc <_sercom_get_default_pad+0x11c>)
     834:	e7e2      	b.n	7fc <_sercom_get_default_pad+0x1c>
     836:	4832      	ldr	r0, [pc, #200]	; (900 <_sercom_get_default_pad+0x120>)
     838:	e7e0      	b.n	7fc <_sercom_get_default_pad+0x1c>
     83a:	4832      	ldr	r0, [pc, #200]	; (904 <_sercom_get_default_pad+0x124>)
     83c:	e7de      	b.n	7fc <_sercom_get_default_pad+0x1c>
     83e:	4832      	ldr	r0, [pc, #200]	; (908 <_sercom_get_default_pad+0x128>)
     840:	e7dc      	b.n	7fc <_sercom_get_default_pad+0x1c>
     842:	4832      	ldr	r0, [pc, #200]	; (90c <_sercom_get_default_pad+0x12c>)
     844:	e7da      	b.n	7fc <_sercom_get_default_pad+0x1c>
     846:	4832      	ldr	r0, [pc, #200]	; (910 <_sercom_get_default_pad+0x130>)
     848:	e7d8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     84a:	2901      	cmp	r1, #1
     84c:	d007      	beq.n	85e <_sercom_get_default_pad+0x7e>
     84e:	2900      	cmp	r1, #0
     850:	d03f      	beq.n	8d2 <_sercom_get_default_pad+0xf2>
     852:	2902      	cmp	r1, #2
     854:	d005      	beq.n	862 <_sercom_get_default_pad+0x82>
     856:	2903      	cmp	r1, #3
     858:	d005      	beq.n	866 <_sercom_get_default_pad+0x86>
	return 0;
     85a:	2000      	movs	r0, #0
     85c:	e7ce      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     85e:	482d      	ldr	r0, [pc, #180]	; (914 <_sercom_get_default_pad+0x134>)
     860:	e7cc      	b.n	7fc <_sercom_get_default_pad+0x1c>
     862:	482d      	ldr	r0, [pc, #180]	; (918 <_sercom_get_default_pad+0x138>)
     864:	e7ca      	b.n	7fc <_sercom_get_default_pad+0x1c>
     866:	482d      	ldr	r0, [pc, #180]	; (91c <_sercom_get_default_pad+0x13c>)
     868:	e7c8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     86a:	2901      	cmp	r1, #1
     86c:	d007      	beq.n	87e <_sercom_get_default_pad+0x9e>
     86e:	2900      	cmp	r1, #0
     870:	d031      	beq.n	8d6 <_sercom_get_default_pad+0xf6>
     872:	2902      	cmp	r1, #2
     874:	d005      	beq.n	882 <_sercom_get_default_pad+0xa2>
     876:	2903      	cmp	r1, #3
     878:	d005      	beq.n	886 <_sercom_get_default_pad+0xa6>
	return 0;
     87a:	2000      	movs	r0, #0
     87c:	e7be      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     87e:	4828      	ldr	r0, [pc, #160]	; (920 <_sercom_get_default_pad+0x140>)
     880:	e7bc      	b.n	7fc <_sercom_get_default_pad+0x1c>
     882:	4828      	ldr	r0, [pc, #160]	; (924 <_sercom_get_default_pad+0x144>)
     884:	e7ba      	b.n	7fc <_sercom_get_default_pad+0x1c>
     886:	4828      	ldr	r0, [pc, #160]	; (928 <_sercom_get_default_pad+0x148>)
     888:	e7b8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     88a:	2901      	cmp	r1, #1
     88c:	d007      	beq.n	89e <_sercom_get_default_pad+0xbe>
     88e:	2900      	cmp	r1, #0
     890:	d023      	beq.n	8da <_sercom_get_default_pad+0xfa>
     892:	2902      	cmp	r1, #2
     894:	d005      	beq.n	8a2 <_sercom_get_default_pad+0xc2>
     896:	2903      	cmp	r1, #3
     898:	d005      	beq.n	8a6 <_sercom_get_default_pad+0xc6>
	return 0;
     89a:	2000      	movs	r0, #0
     89c:	e7ae      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     89e:	4823      	ldr	r0, [pc, #140]	; (92c <_sercom_get_default_pad+0x14c>)
     8a0:	e7ac      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8a2:	4823      	ldr	r0, [pc, #140]	; (930 <_sercom_get_default_pad+0x150>)
     8a4:	e7aa      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8a6:	4823      	ldr	r0, [pc, #140]	; (934 <_sercom_get_default_pad+0x154>)
     8a8:	e7a8      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8aa:	2901      	cmp	r1, #1
     8ac:	d007      	beq.n	8be <_sercom_get_default_pad+0xde>
     8ae:	2900      	cmp	r1, #0
     8b0:	d015      	beq.n	8de <_sercom_get_default_pad+0xfe>
     8b2:	2902      	cmp	r1, #2
     8b4:	d005      	beq.n	8c2 <_sercom_get_default_pad+0xe2>
     8b6:	2903      	cmp	r1, #3
     8b8:	d005      	beq.n	8c6 <_sercom_get_default_pad+0xe6>
	return 0;
     8ba:	2000      	movs	r0, #0
     8bc:	e79e      	b.n	7fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8be:	481e      	ldr	r0, [pc, #120]	; (938 <_sercom_get_default_pad+0x158>)
     8c0:	e79c      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8c2:	481e      	ldr	r0, [pc, #120]	; (93c <_sercom_get_default_pad+0x15c>)
     8c4:	e79a      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8c6:	481e      	ldr	r0, [pc, #120]	; (940 <_sercom_get_default_pad+0x160>)
     8c8:	e798      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8ca:	481e      	ldr	r0, [pc, #120]	; (944 <_sercom_get_default_pad+0x164>)
     8cc:	e796      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8ce:	2003      	movs	r0, #3
     8d0:	e794      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8d2:	481d      	ldr	r0, [pc, #116]	; (948 <_sercom_get_default_pad+0x168>)
     8d4:	e792      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8d6:	481d      	ldr	r0, [pc, #116]	; (94c <_sercom_get_default_pad+0x16c>)
     8d8:	e790      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8da:	481d      	ldr	r0, [pc, #116]	; (950 <_sercom_get_default_pad+0x170>)
     8dc:	e78e      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8de:	481d      	ldr	r0, [pc, #116]	; (954 <_sercom_get_default_pad+0x174>)
     8e0:	e78c      	b.n	7fc <_sercom_get_default_pad+0x1c>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	42001000 	.word	0x42001000
     8e8:	42001800 	.word	0x42001800
     8ec:	42001c00 	.word	0x42001c00
     8f0:	42001400 	.word	0x42001400
     8f4:	42000800 	.word	0x42000800
     8f8:	42000c00 	.word	0x42000c00
     8fc:	00050003 	.word	0x00050003
     900:	00060003 	.word	0x00060003
     904:	00070003 	.word	0x00070003
     908:	00010003 	.word	0x00010003
     90c:	001e0003 	.word	0x001e0003
     910:	001f0003 	.word	0x001f0003
     914:	00090003 	.word	0x00090003
     918:	000a0003 	.word	0x000a0003
     91c:	000b0003 	.word	0x000b0003
     920:	00110003 	.word	0x00110003
     924:	00120003 	.word	0x00120003
     928:	00130003 	.word	0x00130003
     92c:	000d0003 	.word	0x000d0003
     930:	000e0003 	.word	0x000e0003
     934:	000f0003 	.word	0x000f0003
     938:	00170003 	.word	0x00170003
     93c:	00180003 	.word	0x00180003
     940:	00190003 	.word	0x00190003
     944:	00040003 	.word	0x00040003
     948:	00080003 	.word	0x00080003
     94c:	00100003 	.word	0x00100003
     950:	000c0003 	.word	0x000c0003
     954:	00160003 	.word	0x00160003

00000958 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     958:	b530      	push	{r4, r5, lr}
     95a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     95c:	4b0b      	ldr	r3, [pc, #44]	; (98c <_sercom_get_sercom_inst_index+0x34>)
     95e:	466a      	mov	r2, sp
     960:	cb32      	ldmia	r3!, {r1, r4, r5}
     962:	c232      	stmia	r2!, {r1, r4, r5}
     964:	cb32      	ldmia	r3!, {r1, r4, r5}
     966:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     968:	9b00      	ldr	r3, [sp, #0]
     96a:	4283      	cmp	r3, r0
     96c:	d00b      	beq.n	986 <_sercom_get_sercom_inst_index+0x2e>
     96e:	2301      	movs	r3, #1
     970:	009a      	lsls	r2, r3, #2
     972:	4669      	mov	r1, sp
     974:	5852      	ldr	r2, [r2, r1]
     976:	4282      	cmp	r2, r0
     978:	d006      	beq.n	988 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     97a:	3301      	adds	r3, #1
     97c:	2b06      	cmp	r3, #6
     97e:	d1f7      	bne.n	970 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     980:	2000      	movs	r0, #0
}
     982:	b007      	add	sp, #28
     984:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     986:	2300      	movs	r3, #0
			return i;
     988:	b2d8      	uxtb	r0, r3
     98a:	e7fa      	b.n	982 <_sercom_get_sercom_inst_index+0x2a>
     98c:	00002c94 	.word	0x00002c94

00000990 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     990:	4770      	bx	lr
	...

00000994 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     994:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     996:	4b0a      	ldr	r3, [pc, #40]	; (9c0 <_sercom_set_handler+0x2c>)
     998:	781b      	ldrb	r3, [r3, #0]
     99a:	2b00      	cmp	r3, #0
     99c:	d10c      	bne.n	9b8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     99e:	4f09      	ldr	r7, [pc, #36]	; (9c4 <_sercom_set_handler+0x30>)
     9a0:	4e09      	ldr	r6, [pc, #36]	; (9c8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     9a2:	4d0a      	ldr	r5, [pc, #40]	; (9cc <_sercom_set_handler+0x38>)
     9a4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     9a6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     9a8:	195a      	adds	r2, r3, r5
     9aa:	6014      	str	r4, [r2, #0]
     9ac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9ae:	2b18      	cmp	r3, #24
     9b0:	d1f9      	bne.n	9a6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     9b2:	2201      	movs	r2, #1
     9b4:	4b02      	ldr	r3, [pc, #8]	; (9c0 <_sercom_set_handler+0x2c>)
     9b6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     9b8:	0080      	lsls	r0, r0, #2
     9ba:	4b02      	ldr	r3, [pc, #8]	; (9c4 <_sercom_set_handler+0x30>)
     9bc:	50c1      	str	r1, [r0, r3]
}
     9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c0:	2000004a 	.word	0x2000004a
     9c4:	2000004c 	.word	0x2000004c
     9c8:	00000991 	.word	0x00000991
     9cc:	200000b8 	.word	0x200000b8

000009d0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     9d0:	b500      	push	{lr}
     9d2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9d4:	2307      	movs	r3, #7
     9d6:	466a      	mov	r2, sp
     9d8:	7013      	strb	r3, [r2, #0]
     9da:	3301      	adds	r3, #1
     9dc:	7053      	strb	r3, [r2, #1]
     9de:	3301      	adds	r3, #1
     9e0:	7093      	strb	r3, [r2, #2]
     9e2:	3301      	adds	r3, #1
     9e4:	70d3      	strb	r3, [r2, #3]
     9e6:	3301      	adds	r3, #1
     9e8:	7113      	strb	r3, [r2, #4]
     9ea:	3301      	adds	r3, #1
     9ec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9ee:	4b03      	ldr	r3, [pc, #12]	; (9fc <_sercom_get_interrupt_vector+0x2c>)
     9f0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9f2:	466b      	mov	r3, sp
     9f4:	5618      	ldrsb	r0, [r3, r0]
}
     9f6:	b003      	add	sp, #12
     9f8:	bd00      	pop	{pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	00000959 	.word	0x00000959

00000a00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a00:	b510      	push	{r4, lr}
     a02:	4b02      	ldr	r3, [pc, #8]	; (a0c <SERCOM0_Handler+0xc>)
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	2000      	movs	r0, #0
     a08:	4798      	blx	r3
     a0a:	bd10      	pop	{r4, pc}
     a0c:	2000004c 	.word	0x2000004c

00000a10 <SERCOM1_Handler>:
     a10:	b510      	push	{r4, lr}
     a12:	4b02      	ldr	r3, [pc, #8]	; (a1c <SERCOM1_Handler+0xc>)
     a14:	685b      	ldr	r3, [r3, #4]
     a16:	2001      	movs	r0, #1
     a18:	4798      	blx	r3
     a1a:	bd10      	pop	{r4, pc}
     a1c:	2000004c 	.word	0x2000004c

00000a20 <SERCOM2_Handler>:
     a20:	b510      	push	{r4, lr}
     a22:	4b02      	ldr	r3, [pc, #8]	; (a2c <SERCOM2_Handler+0xc>)
     a24:	689b      	ldr	r3, [r3, #8]
     a26:	2002      	movs	r0, #2
     a28:	4798      	blx	r3
     a2a:	bd10      	pop	{r4, pc}
     a2c:	2000004c 	.word	0x2000004c

00000a30 <SERCOM3_Handler>:
     a30:	b510      	push	{r4, lr}
     a32:	4b02      	ldr	r3, [pc, #8]	; (a3c <SERCOM3_Handler+0xc>)
     a34:	68db      	ldr	r3, [r3, #12]
     a36:	2003      	movs	r0, #3
     a38:	4798      	blx	r3
     a3a:	bd10      	pop	{r4, pc}
     a3c:	2000004c 	.word	0x2000004c

00000a40 <SERCOM4_Handler>:
     a40:	b510      	push	{r4, lr}
     a42:	4b02      	ldr	r3, [pc, #8]	; (a4c <SERCOM4_Handler+0xc>)
     a44:	691b      	ldr	r3, [r3, #16]
     a46:	2004      	movs	r0, #4
     a48:	4798      	blx	r3
     a4a:	bd10      	pop	{r4, pc}
     a4c:	2000004c 	.word	0x2000004c

00000a50 <SERCOM5_Handler>:
     a50:	b510      	push	{r4, lr}
     a52:	4b02      	ldr	r3, [pc, #8]	; (a5c <SERCOM5_Handler+0xc>)
     a54:	695b      	ldr	r3, [r3, #20]
     a56:	2005      	movs	r0, #5
     a58:	4798      	blx	r3
     a5a:	bd10      	pop	{r4, pc}
     a5c:	2000004c 	.word	0x2000004c

00000a60 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     a60:	b5f0      	push	{r4, r5, r6, r7, lr}
     a62:	46d6      	mov	lr, sl
     a64:	464f      	mov	r7, r9
     a66:	b580      	push	{r7, lr}
     a68:	b08b      	sub	sp, #44	; 0x2c
     a6a:	4681      	mov	r9, r0
     a6c:	000f      	movs	r7, r1
     a6e:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     a70:	0003      	movs	r3, r0
     a72:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     a74:	680b      	ldr	r3, [r1, #0]
     a76:	079b      	lsls	r3, r3, #30
     a78:	d409      	bmi.n	a8e <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     a7a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     a7c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     a7e:	07db      	lsls	r3, r3, #31
     a80:	d400      	bmi.n	a84 <spi_init+0x24>
     a82:	e0a4      	b.n	bce <spi_init+0x16e>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     a84:	b00b      	add	sp, #44	; 0x2c
     a86:	bc0c      	pop	{r2, r3}
     a88:	4691      	mov	r9, r2
     a8a:	469a      	mov	sl, r3
     a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     a8e:	6a53      	ldr	r3, [r2, #36]	; 0x24
     a90:	9305      	str	r3, [sp, #20]
     a92:	6a93      	ldr	r3, [r2, #40]	; 0x28
     a94:	9306      	str	r3, [sp, #24]
     a96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     a98:	9307      	str	r3, [sp, #28]
     a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     a9c:	9308      	str	r3, [sp, #32]
     a9e:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa0:	ab05      	add	r3, sp, #20
     aa2:	9301      	str	r3, [sp, #4]
     aa4:	e00a      	b.n	abc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     aa6:	0038      	movs	r0, r7
     aa8:	4ba1      	ldr	r3, [pc, #644]	; (d30 <spi_init+0x2d0>)
     aaa:	4798      	blx	r3
     aac:	e00c      	b.n	ac8 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     aae:	230f      	movs	r3, #15
     ab0:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     ab2:	4281      	cmp	r1, r0
     ab4:	d12d      	bne.n	b12 <spi_init+0xb2>
     ab6:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ab8:	2e04      	cmp	r6, #4
     aba:	d02f      	beq.n	b1c <spi_init+0xbc>
     abc:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     abe:	00b3      	lsls	r3, r6, #2
     ac0:	9a01      	ldr	r2, [sp, #4]
     ac2:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     ac4:	2800      	cmp	r0, #0
     ac6:	d0ee      	beq.n	aa6 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     ac8:	1c43      	adds	r3, r0, #1
     aca:	d0f4      	beq.n	ab6 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     acc:	0401      	lsls	r1, r0, #16
     ace:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     ad0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     ad2:	b2c3      	uxtb	r3, r0
     ad4:	469c      	mov	ip, r3
		return NULL;
     ad6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ad8:	0602      	lsls	r2, r0, #24
     ada:	d405      	bmi.n	ae8 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     adc:	4663      	mov	r3, ip
     ade:	095b      	lsrs	r3, r3, #5
     ae0:	01db      	lsls	r3, r3, #7
     ae2:	4a94      	ldr	r2, [pc, #592]	; (d34 <spi_init+0x2d4>)
     ae4:	4692      	mov	sl, r2
     ae6:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     ae8:	221f      	movs	r2, #31
     aea:	4660      	mov	r0, ip
     aec:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     aee:	1898      	adds	r0, r3, r2
     af0:	3040      	adds	r0, #64	; 0x40
     af2:	7800      	ldrb	r0, [r0, #0]
     af4:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     af6:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     af8:	4655      	mov	r5, sl
     afa:	07ed      	lsls	r5, r5, #31
     afc:	d5d9      	bpl.n	ab2 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     afe:	0852      	lsrs	r2, r2, #1
     b00:	189b      	adds	r3, r3, r2
     b02:	3330      	adds	r3, #48	; 0x30
     b04:	7818      	ldrb	r0, [r3, #0]
     b06:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     b08:	4663      	mov	r3, ip
     b0a:	07db      	lsls	r3, r3, #31
     b0c:	d5cf      	bpl.n	aae <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     b0e:	0900      	lsrs	r0, r0, #4
     b10:	e7cf      	b.n	ab2 <spi_init+0x52>
			module->hw = NULL;
     b12:	2300      	movs	r3, #0
     b14:	464a      	mov	r2, r9
     b16:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     b18:	201c      	movs	r0, #28
     b1a:	e7b3      	b.n	a84 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     b1c:	200c      	movs	r0, #12
     b1e:	4b86      	ldr	r3, [pc, #536]	; (d38 <spi_init+0x2d8>)
     b20:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     b22:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     b24:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     b26:	2a01      	cmp	r2, #1
     b28:	d015      	beq.n	b56 <spi_init+0xf6>
	if (config->mode == SPI_MODE_SLAVE) {
     b2a:	7821      	ldrb	r1, [r4, #0]
     b2c:	2900      	cmp	r1, #0
     b2e:	d126      	bne.n	b7e <spi_init+0x11e>
		if (spi_module->CTRLA.reg != addr) {
     b30:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     b32:	7ee2      	ldrb	r2, [r4, #27]
     b34:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     b36:	7ea0      	ldrb	r0, [r4, #26]
     b38:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
     b3a:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
     b3c:	429a      	cmp	r2, r3
     b3e:	d1a1      	bne.n	a84 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
     b40:	6963      	ldr	r3, [r4, #20]
		ctrlb |= config->mode_specific.slave.address_mode;
     b42:	8b22      	ldrh	r2, [r4, #24]
		if (config->mode_specific.slave.preload_enable) {
     b44:	7f20      	ldrb	r0, [r4, #28]
     b46:	2800      	cmp	r0, #0
     b48:	d001      	beq.n	b4e <spi_init+0xee>
     b4a:	2040      	movs	r0, #64	; 0x40
     b4c:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     b4e:	2008      	movs	r0, #8
     b50:	4303      	orrs	r3, r0
     b52:	431d      	orrs	r5, r3
     b54:	e014      	b.n	b80 <spi_init+0x120>
		enum status_code error_code = _sercom_get_sync_baud_val(
     b56:	aa04      	add	r2, sp, #16
     b58:	0001      	movs	r1, r0
     b5a:	6960      	ldr	r0, [r4, #20]
     b5c:	4b77      	ldr	r3, [pc, #476]	; (d3c <spi_init+0x2dc>)
     b5e:	4798      	blx	r3
     b60:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     b62:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     b64:	2b00      	cmp	r3, #0
     b66:	d000      	beq.n	b6a <spi_init+0x10a>
     b68:	e78c      	b.n	a84 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     b6a:	7abb      	ldrb	r3, [r7, #10]
     b6c:	b2db      	uxtb	r3, r3
     b6e:	aa04      	add	r2, sp, #16
     b70:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     b72:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     b74:	429a      	cmp	r2, r3
     b76:	d000      	beq.n	b7a <spi_init+0x11a>
     b78:	e784      	b.n	a84 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     b7a:	350c      	adds	r5, #12
     b7c:	e7d5      	b.n	b2a <spi_init+0xca>
	uint32_t ctrlb = 0;
     b7e:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
     b80:	6863      	ldr	r3, [r4, #4]
     b82:	68a0      	ldr	r0, [r4, #8]
     b84:	4303      	orrs	r3, r0
     b86:	68e0      	ldr	r0, [r4, #12]
     b88:	4303      	orrs	r3, r0
     b8a:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     b8c:	7c20      	ldrb	r0, [r4, #16]
     b8e:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
     b90:	7c60      	ldrb	r0, [r4, #17]
     b92:	2800      	cmp	r0, #0
     b94:	d001      	beq.n	b9a <spi_init+0x13a>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b96:	2080      	movs	r0, #128	; 0x80
     b98:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
     b9a:	7ca0      	ldrb	r0, [r4, #18]
     b9c:	2800      	cmp	r0, #0
     b9e:	d002      	beq.n	ba6 <spi_init+0x146>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ba0:	2080      	movs	r0, #128	; 0x80
     ba2:	0280      	lsls	r0, r0, #10
     ba4:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
     ba6:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     ba8:	2502      	movs	r5, #2
     baa:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
     bac:	4283      	cmp	r3, r0
     bae:	d004      	beq.n	bba <spi_init+0x15a>
	module->hw = NULL;
     bb0:	2300      	movs	r3, #0
     bb2:	464a      	mov	r2, r9
     bb4:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     bb6:	201c      	movs	r0, #28
     bb8:	e764      	b.n	a84 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
     bba:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     bbc:	4293      	cmp	r3, r2
     bbe:	d1f7      	bne.n	bb0 <spi_init+0x150>
		module->mode           = config->mode;
     bc0:	464b      	mov	r3, r9
     bc2:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
     bc4:	7c23      	ldrb	r3, [r4, #16]
     bc6:	464a      	mov	r2, r9
     bc8:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     bca:	2000      	movs	r0, #0
     bcc:	e75a      	b.n	a84 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bce:	0008      	movs	r0, r1
     bd0:	4b5b      	ldr	r3, [pc, #364]	; (d40 <spi_init+0x2e0>)
     bd2:	4798      	blx	r3
     bd4:	4a5b      	ldr	r2, [pc, #364]	; (d44 <spi_init+0x2e4>)
     bd6:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     bd8:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bda:	2301      	movs	r3, #1
     bdc:	40ab      	lsls	r3, r5
     bde:	430b      	orrs	r3, r1
     be0:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     be2:	a909      	add	r1, sp, #36	; 0x24
     be4:	2620      	movs	r6, #32
     be6:	5da3      	ldrb	r3, [r4, r6]
     be8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bea:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     bec:	b2c5      	uxtb	r5, r0
     bee:	0028      	movs	r0, r5
     bf0:	4b55      	ldr	r3, [pc, #340]	; (d48 <spi_init+0x2e8>)
     bf2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bf4:	0028      	movs	r0, r5
     bf6:	4b55      	ldr	r3, [pc, #340]	; (d4c <spi_init+0x2ec>)
     bf8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bfa:	5da0      	ldrb	r0, [r4, r6]
     bfc:	2100      	movs	r1, #0
     bfe:	4b54      	ldr	r3, [pc, #336]	; (d50 <spi_init+0x2f0>)
     c00:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     c02:	7823      	ldrb	r3, [r4, #0]
     c04:	2b01      	cmp	r3, #1
     c06:	d020      	beq.n	c4a <spi_init+0x1ea>
	if (config->mode == SPI_MODE_SLAVE) {
     c08:	7823      	ldrb	r3, [r4, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d103      	bne.n	c16 <spi_init+0x1b6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     c0e:	683b      	ldr	r3, [r7, #0]
     c10:	2208      	movs	r2, #8
     c12:	4313      	orrs	r3, r2
     c14:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     c16:	464b      	mov	r3, r9
     c18:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c1a:	ab04      	add	r3, sp, #16
     c1c:	2280      	movs	r2, #128	; 0x80
     c1e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c20:	2200      	movs	r2, #0
     c22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c24:	2101      	movs	r1, #1
     c26:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     c28:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     c2a:	7823      	ldrb	r3, [r4, #0]
     c2c:	2b00      	cmp	r3, #0
     c2e:	d101      	bne.n	c34 <spi_init+0x1d4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c30:	ab04      	add	r3, sp, #16
     c32:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c36:	9305      	str	r3, [sp, #20]
     c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c3a:	9306      	str	r3, [sp, #24]
     c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     c3e:	9307      	str	r3, [sp, #28]
     c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
     c42:	9308      	str	r3, [sp, #32]
     c44:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c46:	ad05      	add	r5, sp, #20
     c48:	e011      	b.n	c6e <spi_init+0x20e>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c4a:	683b      	ldr	r3, [r7, #0]
     c4c:	220c      	movs	r2, #12
     c4e:	4313      	orrs	r3, r2
     c50:	603b      	str	r3, [r7, #0]
     c52:	e7d9      	b.n	c08 <spi_init+0x1a8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c54:	0030      	movs	r0, r6
     c56:	4b36      	ldr	r3, [pc, #216]	; (d30 <spi_init+0x2d0>)
     c58:	4798      	blx	r3
     c5a:	e00d      	b.n	c78 <spi_init+0x218>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c5c:	a904      	add	r1, sp, #16
     c5e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c60:	0c00      	lsrs	r0, r0, #16
     c62:	b2c0      	uxtb	r0, r0
     c64:	4b3b      	ldr	r3, [pc, #236]	; (d54 <spi_init+0x2f4>)
     c66:	4798      	blx	r3
     c68:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     c6a:	2f04      	cmp	r7, #4
     c6c:	d007      	beq.n	c7e <spi_init+0x21e>
     c6e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c70:	00bb      	lsls	r3, r7, #2
     c72:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     c74:	2800      	cmp	r0, #0
     c76:	d0ed      	beq.n	c54 <spi_init+0x1f4>
		if (current_pinmux != PINMUX_UNUSED) {
     c78:	1c43      	adds	r3, r0, #1
     c7a:	d1ef      	bne.n	c5c <spi_init+0x1fc>
     c7c:	e7f4      	b.n	c68 <spi_init+0x208>
	module->mode             = config->mode;
     c7e:	7823      	ldrb	r3, [r4, #0]
     c80:	464a      	mov	r2, r9
     c82:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     c84:	7c23      	ldrb	r3, [r4, #16]
     c86:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     c88:	7ca3      	ldrb	r3, [r4, #18]
     c8a:	71d3      	strb	r3, [r2, #7]
	uint16_t baud = 0;
     c8c:	2200      	movs	r2, #0
     c8e:	ab02      	add	r3, sp, #8
     c90:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     c92:	7823      	ldrb	r3, [r4, #0]
     c94:	2b01      	cmp	r3, #1
     c96:	d012      	beq.n	cbe <spi_init+0x25e>
	if (config->mode == SPI_MODE_SLAVE) {
     c98:	7823      	ldrb	r3, [r4, #0]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d127      	bne.n	cee <spi_init+0x28e>
		ctrla = config->mode_specific.slave.frame_format;
     c9e:	6960      	ldr	r0, [r4, #20]
		ctrlb = config->mode_specific.slave.address_mode;
     ca0:	8b22      	ldrh	r2, [r4, #24]
		spi_module->ADDR.reg |=
     ca2:	6973      	ldr	r3, [r6, #20]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     ca4:	7ee1      	ldrb	r1, [r4, #27]
     ca6:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     ca8:	7ea5      	ldrb	r5, [r4, #26]
     caa:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     cac:	4319      	orrs	r1, r3
     cae:	6171      	str	r1, [r6, #20]
		if (config->mode_specific.slave.preload_enable) {
     cb0:	7f23      	ldrb	r3, [r4, #28]
		ctrlb = config->mode_specific.slave.address_mode;
     cb2:	0011      	movs	r1, r2
		if (config->mode_specific.slave.preload_enable) {
     cb4:	2b00      	cmp	r3, #0
     cb6:	d01c      	beq.n	cf2 <spi_init+0x292>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     cb8:	2140      	movs	r1, #64	; 0x40
     cba:	4311      	orrs	r1, r2
     cbc:	e019      	b.n	cf2 <spi_init+0x292>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cbe:	464b      	mov	r3, r9
     cc0:	6818      	ldr	r0, [r3, #0]
     cc2:	4b1f      	ldr	r3, [pc, #124]	; (d40 <spi_init+0x2e0>)
     cc4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cc6:	300d      	adds	r0, #13
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     cc8:	b2c0      	uxtb	r0, r0
     cca:	4b1b      	ldr	r3, [pc, #108]	; (d38 <spi_init+0x2d8>)
     ccc:	4798      	blx	r3
     cce:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     cd0:	ab02      	add	r3, sp, #8
     cd2:	1d9a      	adds	r2, r3, #6
     cd4:	6960      	ldr	r0, [r4, #20]
     cd6:	4b19      	ldr	r3, [pc, #100]	; (d3c <spi_init+0x2dc>)
     cd8:	4798      	blx	r3
     cda:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     cdc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     cde:	2b00      	cmp	r3, #0
     ce0:	d000      	beq.n	ce4 <spi_init+0x284>
     ce2:	e6cf      	b.n	a84 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     ce4:	ab02      	add	r3, sp, #8
     ce6:	3306      	adds	r3, #6
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	72b3      	strb	r3, [r6, #10]
     cec:	e7d4      	b.n	c98 <spi_init+0x238>
	uint32_t ctrlb = 0;
     cee:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     cf0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     cf2:	6863      	ldr	r3, [r4, #4]
     cf4:	68a2      	ldr	r2, [r4, #8]
     cf6:	4313      	orrs	r3, r2
     cf8:	68e2      	ldr	r2, [r4, #12]
     cfa:	4313      	orrs	r3, r2
     cfc:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     cfe:	7c22      	ldrb	r2, [r4, #16]
     d00:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     d02:	7c61      	ldrb	r1, [r4, #17]
     d04:	2900      	cmp	r1, #0
     d06:	d103      	bne.n	d10 <spi_init+0x2b0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d08:	4913      	ldr	r1, [pc, #76]	; (d58 <spi_init+0x2f8>)
     d0a:	7889      	ldrb	r1, [r1, #2]
     d0c:	0789      	lsls	r1, r1, #30
     d0e:	d501      	bpl.n	d14 <spi_init+0x2b4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     d10:	2180      	movs	r1, #128	; 0x80
     d12:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     d14:	7ca1      	ldrb	r1, [r4, #18]
     d16:	2900      	cmp	r1, #0
     d18:	d002      	beq.n	d20 <spi_init+0x2c0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     d1a:	2180      	movs	r1, #128	; 0x80
     d1c:	0289      	lsls	r1, r1, #10
     d1e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     d20:	6831      	ldr	r1, [r6, #0]
     d22:	430b      	orrs	r3, r1
     d24:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     d26:	6873      	ldr	r3, [r6, #4]
     d28:	431a      	orrs	r2, r3
     d2a:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
     d2c:	2000      	movs	r0, #0
     d2e:	e6a9      	b.n	a84 <spi_init+0x24>
     d30:	000007e1 	.word	0x000007e1
     d34:	41004400 	.word	0x41004400
     d38:	00002171 	.word	0x00002171
     d3c:	000006d7 	.word	0x000006d7
     d40:	00000959 	.word	0x00000959
     d44:	40000400 	.word	0x40000400
     d48:	00002155 	.word	0x00002155
     d4c:	000020c9 	.word	0x000020c9
     d50:	00000795 	.word	0x00000795
     d54:	0000224d 	.word	0x0000224d
     d58:	41002000 	.word	0x41002000

00000d5c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5e:	46de      	mov	lr, fp
     d60:	4657      	mov	r7, sl
     d62:	464e      	mov	r6, r9
     d64:	4645      	mov	r5, r8
     d66:	b5e0      	push	{r5, r6, r7, lr}
     d68:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     d6a:	2317      	movs	r3, #23
	if (length == 0) {
     d6c:	2a00      	cmp	r2, #0
     d6e:	d107      	bne.n	d80 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     d70:	0018      	movs	r0, r3
     d72:	b003      	add	sp, #12
     d74:	bc3c      	pop	{r2, r3, r4, r5}
     d76:	4690      	mov	r8, r2
     d78:	4699      	mov	r9, r3
     d7a:	46a2      	mov	sl, r4
     d7c:	46ab      	mov	fp, r5
     d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     d80:	7943      	ldrb	r3, [r0, #5]
     d82:	2b00      	cmp	r3, #0
     d84:	d103      	bne.n	d8e <spi_write_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d86:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     d88:	7b9c      	ldrb	r4, [r3, #14]
     d8a:	07a4      	lsls	r4, r4, #30
     d8c:	d40a      	bmi.n	da4 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
     d8e:	4693      	mov	fp, r2
     d90:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
     d92:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
     d94:	2502      	movs	r5, #2
     d96:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
     d98:	3502      	adds	r5, #2
     d9a:	46a8      	mov	r8, r5
     d9c:	3a01      	subs	r2, #1
     d9e:	b292      	uxth	r2, r2
     da0:	468a      	mov	sl, r1
     da2:	e023      	b.n	dec <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     da4:	2402      	movs	r4, #2
     da6:	739c      	strb	r4, [r3, #14]
     da8:	e7f1      	b.n	d8e <spi_write_buffer_wait+0x32>
     daa:	7bb5      	ldrb	r5, [r6, #14]
			if (spi_is_write_complete(module)) {
     dac:	4661      	mov	r1, ip
     dae:	420d      	tst	r5, r1
     db0:	d12e      	bne.n	e10 <spi_write_buffer_wait+0xb4>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     db2:	7bb5      	ldrb	r5, [r6, #14]
			if (!spi_is_ready_to_write(module)) {
     db4:	421d      	tst	r5, r3
     db6:	d100      	bne.n	dba <spi_write_buffer_wait+0x5e>
     db8:	e0c2      	b.n	f40 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     dba:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dbc:	7bb5      	ldrb	r5, [r6, #14]
		while (!spi_is_ready_to_write(module)) {
     dbe:	421d      	tst	r5, r3
     dc0:	d0fc      	beq.n	dbc <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
     dc2:	1c67      	adds	r7, r4, #1
     dc4:	b2bf      	uxth	r7, r7
     dc6:	4651      	mov	r1, sl
     dc8:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dca:	7981      	ldrb	r1, [r0, #6]
     dcc:	2901      	cmp	r1, #1
     dce:	d023      	beq.n	e18 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
     dd0:	b2ad      	uxth	r5, r5
     dd2:	003c      	movs	r4, r7
     dd4:	7bb7      	ldrb	r7, [r6, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     dd6:	421f      	tst	r7, r3
     dd8:	d002      	beq.n	de0 <spi_write_buffer_wait+0x84>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     dda:	05ed      	lsls	r5, r5, #23
     ddc:	0ded      	lsrs	r5, r5, #23
     dde:	8335      	strh	r5, [r6, #24]
     de0:	1e55      	subs	r5, r2, #1
     de2:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
     de4:	79c6      	ldrb	r6, [r0, #7]
     de6:	2e00      	cmp	r6, #0
     de8:	d11d      	bne.n	e26 <spi_write_buffer_wait+0xca>
     dea:	002a      	movs	r2, r5
	while (length--) {
     dec:	4d59      	ldr	r5, [pc, #356]	; (f54 <spi_write_buffer_wait+0x1f8>)
     dee:	42aa      	cmp	r2, r5
     df0:	d070      	beq.n	ed4 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
     df2:	7945      	ldrb	r5, [r0, #5]
     df4:	2d00      	cmp	r5, #0
     df6:	d1e0      	bne.n	dba <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     df8:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dfa:	7bb5      	ldrb	r5, [r6, #14]
				if (spi_is_ready_to_write(module)) {
     dfc:	421d      	tst	r5, r3
     dfe:	d1d4      	bne.n	daa <spi_write_buffer_wait+0x4e>
     e00:	4d55      	ldr	r5, [pc, #340]	; (f58 <spi_write_buffer_wait+0x1fc>)
     e02:	7bb7      	ldrb	r7, [r6, #14]
     e04:	421f      	tst	r7, r3
     e06:	d1d0      	bne.n	daa <spi_write_buffer_wait+0x4e>
     e08:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e0a:	2d00      	cmp	r5, #0
     e0c:	d1f9      	bne.n	e02 <spi_write_buffer_wait+0xa6>
     e0e:	e7cc      	b.n	daa <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e10:	2302      	movs	r3, #2
     e12:	73b3      	strb	r3, [r6, #14]
				return STATUS_ABORTED;
     e14:	3302      	adds	r3, #2
     e16:	e7ab      	b.n	d70 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
     e18:	3402      	adds	r4, #2
     e1a:	b2a4      	uxth	r4, r4
     e1c:	4651      	mov	r1, sl
     e1e:	5dcf      	ldrb	r7, [r1, r7]
     e20:	023f      	lsls	r7, r7, #8
     e22:	433d      	orrs	r5, r7
     e24:	e7d6      	b.n	dd4 <spi_write_buffer_wait+0x78>
     e26:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
     e28:	7945      	ldrb	r5, [r0, #5]
     e2a:	2d00      	cmp	r5, #0
     e2c:	d137      	bne.n	e9e <spi_write_buffer_wait+0x142>
     e2e:	4d4b      	ldr	r5, [pc, #300]	; (f5c <spi_write_buffer_wait+0x200>)
     e30:	9101      	str	r1, [sp, #4]
     e32:	e012      	b.n	e5a <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
     e34:	3402      	adds	r4, #2
     e36:	b2a4      	uxth	r4, r4
     e38:	4649      	mov	r1, r9
     e3a:	9f01      	ldr	r7, [sp, #4]
     e3c:	5c79      	ldrb	r1, [r7, r1]
     e3e:	0209      	lsls	r1, r1, #8
     e40:	9f00      	ldr	r7, [sp, #0]
     e42:	430f      	orrs	r7, r1
     e44:	e01b      	b.n	e7e <spi_write_buffer_wait+0x122>
						length--;
     e46:	3a01      	subs	r2, #1
     e48:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
     e4a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e4c:	7bb7      	ldrb	r7, [r6, #14]
					if (spi_is_ready_to_read(module)) {
     e4e:	4641      	mov	r1, r8
     e50:	420f      	tst	r7, r1
     e52:	d11b      	bne.n	e8c <spi_write_buffer_wait+0x130>
     e54:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e56:	2d00      	cmp	r5, #0
     e58:	d018      	beq.n	e8c <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
     e5a:	2a00      	cmp	r2, #0
     e5c:	d0f5      	beq.n	e4a <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e5e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e60:	7bb7      	ldrb	r7, [r6, #14]
     e62:	421f      	tst	r7, r3
     e64:	d0f1      	beq.n	e4a <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
     e66:	1c67      	adds	r7, r4, #1
     e68:	b2b9      	uxth	r1, r7
     e6a:	4689      	mov	r9, r1
     e6c:	9901      	ldr	r1, [sp, #4]
     e6e:	5d09      	ldrb	r1, [r1, r4]
     e70:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e72:	7981      	ldrb	r1, [r0, #6]
     e74:	2901      	cmp	r1, #1
     e76:	d0dd      	beq.n	e34 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
     e78:	4669      	mov	r1, sp
     e7a:	880f      	ldrh	r7, [r1, #0]
     e7c:	464c      	mov	r4, r9
     e7e:	7bb1      	ldrb	r1, [r6, #14]
	if (!spi_is_ready_to_write(module)) {
     e80:	4219      	tst	r1, r3
     e82:	d0e0      	beq.n	e46 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e84:	05ff      	lsls	r7, r7, #23
     e86:	0dff      	lsrs	r7, r7, #23
     e88:	8337      	strh	r7, [r6, #24]
     e8a:	e7dc      	b.n	e46 <spi_write_buffer_wait+0xea>
     e8c:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e8e:	7bb5      	ldrb	r5, [r6, #14]
				if (spi_is_write_complete(module)) {
     e90:	4667      	mov	r7, ip
     e92:	423d      	tst	r5, r7
     e94:	d118      	bne.n	ec8 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e96:	7bb5      	ldrb	r5, [r6, #14]
				if (!spi_is_ready_to_read(module)) {
     e98:	4646      	mov	r6, r8
     e9a:	4235      	tst	r5, r6
     e9c:	d052      	beq.n	f44 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e9e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ea0:	7bb5      	ldrb	r5, [r6, #14]
			while (!spi_is_ready_to_read(module)) {
     ea2:	4647      	mov	r7, r8
     ea4:	423d      	tst	r5, r7
     ea6:	d0fb      	beq.n	ea0 <spi_write_buffer_wait+0x144>
     ea8:	7bb5      	ldrb	r5, [r6, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     eaa:	423d      	tst	r5, r7
     eac:	d007      	beq.n	ebe <spi_write_buffer_wait+0x162>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     eae:	8a35      	ldrh	r5, [r6, #16]
     eb0:	423d      	tst	r5, r7
     eb2:	d000      	beq.n	eb6 <spi_write_buffer_wait+0x15a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     eb4:	8237      	strh	r7, [r6, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb6:	7985      	ldrb	r5, [r0, #6]
     eb8:	2d01      	cmp	r5, #1
     eba:	d009      	beq.n	ed0 <spi_write_buffer_wait+0x174>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ebc:	8b35      	ldrh	r5, [r6, #24]
			flush_length--;
     ebe:	465d      	mov	r5, fp
     ec0:	3d01      	subs	r5, #1
     ec2:	b2ad      	uxth	r5, r5
     ec4:	46ab      	mov	fp, r5
     ec6:	e769      	b.n	d9c <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ec8:	2302      	movs	r3, #2
     eca:	73b3      	strb	r3, [r6, #14]
					return STATUS_ABORTED;
     ecc:	3302      	adds	r3, #2
     ece:	e74f      	b.n	d70 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ed0:	8b35      	ldrh	r5, [r6, #24]
     ed2:	e7f4      	b.n	ebe <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
     ed4:	7943      	ldrb	r3, [r0, #5]
     ed6:	2b01      	cmp	r3, #1
     ed8:	d00b      	beq.n	ef2 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
     eda:	2b00      	cmp	r3, #0
     edc:	d134      	bne.n	f48 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
     ede:	79c2      	ldrb	r2, [r0, #7]
     ee0:	2a00      	cmp	r2, #0
     ee2:	d100      	bne.n	ee6 <spi_write_buffer_wait+0x18a>
     ee4:	e744      	b.n	d70 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
     ee6:	2404      	movs	r4, #4
			while (flush_length) {
     ee8:	465b      	mov	r3, fp
     eea:	465d      	mov	r5, fp
     eec:	2b00      	cmp	r3, #0
     eee:	d119      	bne.n	f24 <spi_write_buffer_wait+0x1c8>
     ef0:	e73e      	b.n	d70 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ef2:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
     ef4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ef6:	7b8b      	ldrb	r3, [r1, #14]
     ef8:	4213      	tst	r3, r2
     efa:	d0fc      	beq.n	ef6 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
     efc:	2300      	movs	r3, #0
     efe:	e737      	b.n	d70 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f00:	7b8b      	ldrb	r3, [r1, #14]
				if (!spi_is_ready_to_read(module)) {
     f02:	4223      	tst	r3, r4
     f04:	d022      	beq.n	f4c <spi_write_buffer_wait+0x1f0>
     f06:	7b8b      	ldrb	r3, [r1, #14]
	if (!spi_is_ready_to_read(module)) {
     f08:	4223      	tst	r3, r4
     f0a:	d007      	beq.n	f1c <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f0c:	8a0b      	ldrh	r3, [r1, #16]
     f0e:	4223      	tst	r3, r4
     f10:	d000      	beq.n	f14 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f12:	820c      	strh	r4, [r1, #16]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f14:	7983      	ldrb	r3, [r0, #6]
     f16:	2b01      	cmp	r3, #1
     f18:	d010      	beq.n	f3c <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f1a:	8b0b      	ldrh	r3, [r1, #24]
				flush_length--;
     f1c:	3d01      	subs	r5, #1
     f1e:	b2ad      	uxth	r5, r5
			while (flush_length) {
     f20:	2d00      	cmp	r5, #0
     f22:	d015      	beq.n	f50 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f24:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f26:	7b8b      	ldrb	r3, [r1, #14]
					if (spi_is_ready_to_read(module)) {
     f28:	4223      	tst	r3, r4
     f2a:	d1e9      	bne.n	f00 <spi_write_buffer_wait+0x1a4>
     f2c:	4b0a      	ldr	r3, [pc, #40]	; (f58 <spi_write_buffer_wait+0x1fc>)
     f2e:	7b8a      	ldrb	r2, [r1, #14]
     f30:	4222      	tst	r2, r4
     f32:	d1e5      	bne.n	f00 <spi_write_buffer_wait+0x1a4>
     f34:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f36:	2b00      	cmp	r3, #0
     f38:	d1f9      	bne.n	f2e <spi_write_buffer_wait+0x1d2>
     f3a:	e7e1      	b.n	f00 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f3c:	8b0b      	ldrh	r3, [r1, #24]
     f3e:	e7ed      	b.n	f1c <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
     f40:	2312      	movs	r3, #18
     f42:	e715      	b.n	d70 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
     f44:	2312      	movs	r3, #18
     f46:	e713      	b.n	d70 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
     f48:	2300      	movs	r3, #0
     f4a:	e711      	b.n	d70 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
     f4c:	2312      	movs	r3, #18
     f4e:	e70f      	b.n	d70 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
     f50:	2300      	movs	r3, #0
     f52:	e70d      	b.n	d70 <spi_write_buffer_wait+0x14>
     f54:	0000ffff 	.word	0x0000ffff
     f58:	00002710 	.word	0x00002710
     f5c:	00002711 	.word	0x00002711

00000f60 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     f60:	b5f0      	push	{r4, r5, r6, r7, lr}
     f62:	46de      	mov	lr, fp
     f64:	4657      	mov	r7, sl
     f66:	464e      	mov	r6, r9
     f68:	4645      	mov	r5, r8
     f6a:	b5e0      	push	{r5, r6, r7, lr}
     f6c:	b08d      	sub	sp, #52	; 0x34
     f6e:	0005      	movs	r5, r0
     f70:	000c      	movs	r4, r1
     f72:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     f74:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f76:	0008      	movs	r0, r1
     f78:	4b7e      	ldr	r3, [pc, #504]	; (1174 <usart_init+0x214>)
     f7a:	4798      	blx	r3
     f7c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f7e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     f80:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f82:	07db      	lsls	r3, r3, #31
     f84:	d506      	bpl.n	f94 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     f86:	b00d      	add	sp, #52	; 0x34
     f88:	bc3c      	pop	{r2, r3, r4, r5}
     f8a:	4690      	mov	r8, r2
     f8c:	4699      	mov	r9, r3
     f8e:	46a2      	mov	sl, r4
     f90:	46ab      	mov	fp, r5
     f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f94:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     f96:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f98:	079b      	lsls	r3, r3, #30
     f9a:	d4f4      	bmi.n	f86 <usart_init+0x26>
     f9c:	4976      	ldr	r1, [pc, #472]	; (1178 <usart_init+0x218>)
     f9e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     fa0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     fa2:	2301      	movs	r3, #1
     fa4:	40bb      	lsls	r3, r7
     fa6:	4303      	orrs	r3, r0
     fa8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     faa:	a90b      	add	r1, sp, #44	; 0x2c
     fac:	7f73      	ldrb	r3, [r6, #29]
     fae:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fb0:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     fb2:	b2d7      	uxtb	r7, r2
     fb4:	0038      	movs	r0, r7
     fb6:	4b71      	ldr	r3, [pc, #452]	; (117c <usart_init+0x21c>)
     fb8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     fba:	0038      	movs	r0, r7
     fbc:	4b70      	ldr	r3, [pc, #448]	; (1180 <usart_init+0x220>)
     fbe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     fc0:	7f70      	ldrb	r0, [r6, #29]
     fc2:	2100      	movs	r1, #0
     fc4:	4b6f      	ldr	r3, [pc, #444]	; (1184 <usart_init+0x224>)
     fc6:	4798      	blx	r3
	module->character_size = config->character_size;
     fc8:	7af3      	ldrb	r3, [r6, #11]
     fca:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     fcc:	7d33      	ldrb	r3, [r6, #20]
     fce:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     fd0:	7d73      	ldrb	r3, [r6, #21]
     fd2:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     fd4:	682b      	ldr	r3, [r5, #0]
     fd6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fd8:	0018      	movs	r0, r3
     fda:	4b66      	ldr	r3, [pc, #408]	; (1174 <usart_init+0x214>)
     fdc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fde:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     fe0:	2200      	movs	r2, #0
     fe2:	230e      	movs	r3, #14
     fe4:	a902      	add	r1, sp, #8
     fe6:	468c      	mov	ip, r1
     fe8:	4463      	add	r3, ip
     fea:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     fec:	6833      	ldr	r3, [r6, #0]
     fee:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     ff0:	68f3      	ldr	r3, [r6, #12]
     ff2:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ff4:	7db3      	ldrb	r3, [r6, #22]
     ff6:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     ff8:	6873      	ldr	r3, [r6, #4]
     ffa:	4699      	mov	r9, r3
	switch (transfer_mode)
     ffc:	2b00      	cmp	r3, #0
     ffe:	d014      	beq.n	102a <usart_init+0xca>
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	055b      	lsls	r3, r3, #21
    1004:	4599      	cmp	r9, r3
    1006:	d130      	bne.n	106a <usart_init+0x10a>
			if (!config->use_external_clock) {
    1008:	7df3      	ldrb	r3, [r6, #23]
    100a:	2b00      	cmp	r3, #0
    100c:	d131      	bne.n	1072 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    100e:	6933      	ldr	r3, [r6, #16]
    1010:	001f      	movs	r7, r3
    1012:	b2c0      	uxtb	r0, r0
    1014:	4b5c      	ldr	r3, [pc, #368]	; (1188 <usart_init+0x228>)
    1016:	4798      	blx	r3
    1018:	0001      	movs	r1, r0
    101a:	220e      	movs	r2, #14
    101c:	ab02      	add	r3, sp, #8
    101e:	469c      	mov	ip, r3
    1020:	4462      	add	r2, ip
    1022:	0038      	movs	r0, r7
    1024:	4b59      	ldr	r3, [pc, #356]	; (118c <usart_init+0x22c>)
    1026:	4798      	blx	r3
    1028:	e020      	b.n	106c <usart_init+0x10c>
			if (config->use_external_clock) {
    102a:	7df3      	ldrb	r3, [r6, #23]
    102c:	2b00      	cmp	r3, #0
    102e:	d00b      	beq.n	1048 <usart_init+0xe8>
				status_code =
    1030:	2310      	movs	r3, #16
    1032:	9300      	str	r3, [sp, #0]
    1034:	2300      	movs	r3, #0
    1036:	220e      	movs	r2, #14
    1038:	a902      	add	r1, sp, #8
    103a:	468c      	mov	ip, r1
    103c:	4462      	add	r2, ip
    103e:	69b1      	ldr	r1, [r6, #24]
    1040:	6930      	ldr	r0, [r6, #16]
    1042:	4f53      	ldr	r7, [pc, #332]	; (1190 <usart_init+0x230>)
    1044:	47b8      	blx	r7
    1046:	e011      	b.n	106c <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
    1048:	6933      	ldr	r3, [r6, #16]
    104a:	001f      	movs	r7, r3
    104c:	b2c0      	uxtb	r0, r0
    104e:	4b4e      	ldr	r3, [pc, #312]	; (1188 <usart_init+0x228>)
    1050:	4798      	blx	r3
    1052:	0001      	movs	r1, r0
				status_code =
    1054:	2310      	movs	r3, #16
    1056:	9300      	str	r3, [sp, #0]
    1058:	2300      	movs	r3, #0
    105a:	220e      	movs	r2, #14
    105c:	a802      	add	r0, sp, #8
    105e:	4684      	mov	ip, r0
    1060:	4462      	add	r2, ip
    1062:	0038      	movs	r0, r7
    1064:	4f4a      	ldr	r7, [pc, #296]	; (1190 <usart_init+0x230>)
    1066:	47b8      	blx	r7
    1068:	e000      	b.n	106c <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
    106a:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
    106c:	2800      	cmp	r0, #0
    106e:	d000      	beq.n	1072 <usart_init+0x112>
    1070:	e789      	b.n	f86 <usart_init+0x26>
	usart_hw->BAUD.reg = baud;
    1072:	230e      	movs	r3, #14
    1074:	aa02      	add	r2, sp, #8
    1076:	4694      	mov	ip, r2
    1078:	4463      	add	r3, ip
    107a:	881b      	ldrh	r3, [r3, #0]
    107c:	4642      	mov	r2, r8
    107e:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
    1080:	4653      	mov	r3, sl
    1082:	9f03      	ldr	r7, [sp, #12]
    1084:	431f      	orrs	r7, r3
    1086:	464b      	mov	r3, r9
    1088:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    108a:	465b      	mov	r3, fp
    108c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    108e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1090:	7df3      	ldrb	r3, [r6, #23]
    1092:	2b00      	cmp	r3, #0
    1094:	d101      	bne.n	109a <usart_init+0x13a>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1096:	3304      	adds	r3, #4
    1098:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    109a:	7d31      	ldrb	r1, [r6, #20]
    109c:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    109e:	7d73      	ldrb	r3, [r6, #21]
    10a0:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    10a2:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    10a4:	7ab1      	ldrb	r1, [r6, #10]
    10a6:	7af2      	ldrb	r2, [r6, #11]
    10a8:	4311      	orrs	r1, r2
    10aa:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    10ac:	8933      	ldrh	r3, [r6, #8]
    10ae:	2bff      	cmp	r3, #255	; 0xff
    10b0:	d003      	beq.n	10ba <usart_init+0x15a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    10b2:	2280      	movs	r2, #128	; 0x80
    10b4:	0452      	lsls	r2, r2, #17
    10b6:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    10b8:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    10ba:	7f33      	ldrb	r3, [r6, #28]
    10bc:	2b00      	cmp	r3, #0
    10be:	d103      	bne.n	10c8 <usart_init+0x168>
    10c0:	4b34      	ldr	r3, [pc, #208]	; (1194 <usart_init+0x234>)
    10c2:	789b      	ldrb	r3, [r3, #2]
    10c4:	079b      	lsls	r3, r3, #30
    10c6:	d501      	bpl.n	10cc <usart_init+0x16c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    10c8:	2380      	movs	r3, #128	; 0x80
    10ca:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    10cc:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    10ce:	8a13      	ldrh	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10d0:	b21b      	sxth	r3, r3
    10d2:	2b00      	cmp	r3, #0
    10d4:	dbfb      	blt.n	10ce <usart_init+0x16e>
	usart_hw->CTRLB.reg = ctrlb;
    10d6:	4643      	mov	r3, r8
    10d8:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    10da:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    10dc:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    10de:	b21b      	sxth	r3, r3
    10e0:	2b00      	cmp	r3, #0
    10e2:	dbfb      	blt.n	10dc <usart_init+0x17c>
	usart_hw->CTRLA.reg = ctrla;
    10e4:	4643      	mov	r3, r8
    10e6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10e8:	ab0a      	add	r3, sp, #40	; 0x28
    10ea:	2280      	movs	r2, #128	; 0x80
    10ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10ee:	2200      	movs	r2, #0
    10f0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    10f2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10f4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    10f6:	6a33      	ldr	r3, [r6, #32]
    10f8:	9306      	str	r3, [sp, #24]
    10fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
    10fc:	9307      	str	r3, [sp, #28]
    10fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1100:	9308      	str	r3, [sp, #32]
    1102:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1104:	9303      	str	r3, [sp, #12]
    1106:	9309      	str	r3, [sp, #36]	; 0x24
    1108:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    110a:	ae06      	add	r6, sp, #24
    110c:	e006      	b.n	111c <usart_init+0x1bc>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    110e:	0020      	movs	r0, r4
    1110:	4b21      	ldr	r3, [pc, #132]	; (1198 <usart_init+0x238>)
    1112:	4798      	blx	r3
    1114:	e007      	b.n	1126 <usart_init+0x1c6>
    1116:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1118:	2f04      	cmp	r7, #4
    111a:	d00d      	beq.n	1138 <usart_init+0x1d8>
    111c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    111e:	00bb      	lsls	r3, r7, #2
    1120:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1122:	2800      	cmp	r0, #0
    1124:	d0f3      	beq.n	110e <usart_init+0x1ae>
		if (current_pinmux != PINMUX_UNUSED) {
    1126:	1c43      	adds	r3, r0, #1
    1128:	d0f5      	beq.n	1116 <usart_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    112a:	a90a      	add	r1, sp, #40	; 0x28
    112c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    112e:	0c00      	lsrs	r0, r0, #16
    1130:	b2c0      	uxtb	r0, r0
    1132:	4b1a      	ldr	r3, [pc, #104]	; (119c <usart_init+0x23c>)
    1134:	4798      	blx	r3
    1136:	e7ee      	b.n	1116 <usart_init+0x1b6>
		module->callback[i]            = NULL;
    1138:	2300      	movs	r3, #0
    113a:	60ab      	str	r3, [r5, #8]
    113c:	60eb      	str	r3, [r5, #12]
    113e:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
    1140:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    1142:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    1144:	2200      	movs	r2, #0
    1146:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    1148:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    114a:	3320      	adds	r3, #32
    114c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    114e:	3301      	adds	r3, #1
    1150:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1152:	3301      	adds	r3, #1
    1154:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1156:	3301      	adds	r3, #1
    1158:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    115a:	6828      	ldr	r0, [r5, #0]
    115c:	4b05      	ldr	r3, [pc, #20]	; (1174 <usart_init+0x214>)
    115e:	4798      	blx	r3
    1160:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1162:	490f      	ldr	r1, [pc, #60]	; (11a0 <usart_init+0x240>)
    1164:	4b0f      	ldr	r3, [pc, #60]	; (11a4 <usart_init+0x244>)
    1166:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1168:	00a4      	lsls	r4, r4, #2
    116a:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <usart_init+0x248>)
    116c:	50e5      	str	r5, [r4, r3]
	return status_code;
    116e:	2000      	movs	r0, #0
    1170:	e709      	b.n	f86 <usart_init+0x26>
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	00000959 	.word	0x00000959
    1178:	40000400 	.word	0x40000400
    117c:	00002155 	.word	0x00002155
    1180:	000020c9 	.word	0x000020c9
    1184:	00000795 	.word	0x00000795
    1188:	00002171 	.word	0x00002171
    118c:	000006d7 	.word	0x000006d7
    1190:	00000701 	.word	0x00000701
    1194:	41002000 	.word	0x41002000
    1198:	000007e1 	.word	0x000007e1
    119c:	0000224d 	.word	0x0000224d
    11a0:	000012f5 	.word	0x000012f5
    11a4:	00000995 	.word	0x00000995
    11a8:	200000b8 	.word	0x200000b8

000011ac <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11ac:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    11ae:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    11b0:	2a00      	cmp	r2, #0
    11b2:	d101      	bne.n	11b8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    11b4:	0018      	movs	r0, r3
    11b6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    11b8:	8bc2      	ldrh	r2, [r0, #30]
    11ba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11bc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    11be:	2a00      	cmp	r2, #0
    11c0:	d1f8      	bne.n	11b4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11c2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    11c4:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11c6:	2102      	movs	r1, #2
    11c8:	7b93      	ldrb	r3, [r2, #14]
    11ca:	420b      	tst	r3, r1
    11cc:	d0fc      	beq.n	11c8 <usart_write_wait+0x1c>
	return STATUS_OK;
    11ce:	2300      	movs	r3, #0
    11d0:	e7f0      	b.n	11b4 <usart_write_wait+0x8>
	...

000011d4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    11d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11d6:	46ce      	mov	lr, r9
    11d8:	4647      	mov	r7, r8
    11da:	b580      	push	{r7, lr}
    11dc:	b083      	sub	sp, #12
    11de:	0005      	movs	r5, r0
    11e0:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11e2:	2017      	movs	r0, #23
	if (length == 0) {
    11e4:	2a00      	cmp	r2, #0
    11e6:	d104      	bne.n	11f2 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    11e8:	b003      	add	sp, #12
    11ea:	bc0c      	pop	{r2, r3}
    11ec:	4690      	mov	r8, r2
    11ee:	4699      	mov	r9, r3
    11f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    11f2:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    11f4:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    11f6:	2b00      	cmp	r3, #0
    11f8:	d0f6      	beq.n	11e8 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11fa:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    11fc:	3a01      	subs	r2, #1
    11fe:	b293      	uxth	r3, r2
    1200:	4699      	mov	r9, r3
    1202:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1204:	2701      	movs	r7, #1
	while (length--) {
    1206:	4b20      	ldr	r3, [pc, #128]	; (1288 <usart_write_buffer_wait+0xb4>)
    1208:	4698      	mov	r8, r3
    120a:	e011      	b.n	1230 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    120c:	1c73      	adds	r3, r6, #1
    120e:	b29b      	uxth	r3, r3
    1210:	9a01      	ldr	r2, [sp, #4]
    1212:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1214:	796a      	ldrb	r2, [r5, #5]
    1216:	2a01      	cmp	r2, #1
    1218:	d017      	beq.n	124a <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    121a:	b289      	uxth	r1, r1
    121c:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    121e:	0028      	movs	r0, r5
    1220:	4b1a      	ldr	r3, [pc, #104]	; (128c <usart_write_buffer_wait+0xb8>)
    1222:	4798      	blx	r3
	while (length--) {
    1224:	464b      	mov	r3, r9
    1226:	3b01      	subs	r3, #1
    1228:	b29b      	uxth	r3, r3
    122a:	4699      	mov	r9, r3
    122c:	4543      	cmp	r3, r8
    122e:	d013      	beq.n	1258 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1230:	7ba3      	ldrb	r3, [r4, #14]
    1232:	423b      	tst	r3, r7
    1234:	d1ea      	bne.n	120c <usart_write_buffer_wait+0x38>
    1236:	4b14      	ldr	r3, [pc, #80]	; (1288 <usart_write_buffer_wait+0xb4>)
    1238:	7ba2      	ldrb	r2, [r4, #14]
    123a:	423a      	tst	r2, r7
    123c:	d1e6      	bne.n	120c <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    123e:	2b01      	cmp	r3, #1
    1240:	d019      	beq.n	1276 <usart_write_buffer_wait+0xa2>
    1242:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1244:	2b00      	cmp	r3, #0
    1246:	d1f7      	bne.n	1238 <usart_write_buffer_wait+0x64>
    1248:	e7e0      	b.n	120c <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    124a:	3602      	adds	r6, #2
    124c:	b2b6      	uxth	r6, r6
    124e:	9a01      	ldr	r2, [sp, #4]
    1250:	5cd3      	ldrb	r3, [r2, r3]
    1252:	021b      	lsls	r3, r3, #8
    1254:	4319      	orrs	r1, r3
    1256:	e7e2      	b.n	121e <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1258:	7ba3      	ldrb	r3, [r4, #14]
    125a:	079b      	lsls	r3, r3, #30
    125c:	d40d      	bmi.n	127a <usart_write_buffer_wait+0xa6>
    125e:	4b0a      	ldr	r3, [pc, #40]	; (1288 <usart_write_buffer_wait+0xb4>)
    1260:	2102      	movs	r1, #2
    1262:	7ba2      	ldrb	r2, [r4, #14]
    1264:	420a      	tst	r2, r1
    1266:	d10a      	bne.n	127e <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    1268:	2b01      	cmp	r3, #1
    126a:	d00a      	beq.n	1282 <usart_write_buffer_wait+0xae>
    126c:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    126e:	2b00      	cmp	r3, #0
    1270:	d1f7      	bne.n	1262 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    1272:	2000      	movs	r0, #0
    1274:	e7b8      	b.n	11e8 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1276:	2012      	movs	r0, #18
    1278:	e7b6      	b.n	11e8 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    127a:	2000      	movs	r0, #0
    127c:	e7b4      	b.n	11e8 <usart_write_buffer_wait+0x14>
    127e:	2000      	movs	r0, #0
    1280:	e7b2      	b.n	11e8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    1282:	2012      	movs	r0, #18
    1284:	e7b0      	b.n	11e8 <usart_write_buffer_wait+0x14>
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	0000ffff 	.word	0x0000ffff
    128c:	000011ad 	.word	0x000011ad

00001290 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1292:	0006      	movs	r6, r0
    1294:	000c      	movs	r4, r1
    1296:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1298:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    129a:	4b0a      	ldr	r3, [pc, #40]	; (12c4 <_usart_read_buffer+0x34>)
    129c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    129e:	8bb3      	ldrh	r3, [r6, #28]
    12a0:	b29b      	uxth	r3, r3
    12a2:	2b00      	cmp	r3, #0
    12a4:	d003      	beq.n	12ae <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12a6:	4b08      	ldr	r3, [pc, #32]	; (12c8 <_usart_read_buffer+0x38>)
    12a8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    12aa:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    12ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    12ae:	83b5      	strh	r5, [r6, #28]
    12b0:	4b05      	ldr	r3, [pc, #20]	; (12c8 <_usart_read_buffer+0x38>)
    12b2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    12b4:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
    12b6:	2205      	movs	r2, #5
    12b8:	2322      	movs	r3, #34	; 0x22
    12ba:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    12bc:	3b1e      	subs	r3, #30
    12be:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
    12c0:	2000      	movs	r0, #0
    12c2:	e7f3      	b.n	12ac <_usart_read_buffer+0x1c>
    12c4:	00001c71 	.word	0x00001c71
    12c8:	00001cb1 	.word	0x00001cb1

000012cc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    12cc:	1c93      	adds	r3, r2, #2
    12ce:	009b      	lsls	r3, r3, #2
    12d0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    12d2:	2120      	movs	r1, #32
    12d4:	2301      	movs	r3, #1
    12d6:	4093      	lsls	r3, r2
    12d8:	001a      	movs	r2, r3
    12da:	5c43      	ldrb	r3, [r0, r1]
    12dc:	4313      	orrs	r3, r2
    12de:	5443      	strb	r3, [r0, r1]
}
    12e0:	4770      	bx	lr
	...

000012e4 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    12e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    12e6:	2201      	movs	r2, #1
    12e8:	4b01      	ldr	r3, [pc, #4]	; (12f0 <usart_read_job+0xc>)
    12ea:	4798      	blx	r3
}
    12ec:	bd10      	pop	{r4, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	00001291 	.word	0x00001291

000012f4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    12f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    12f6:	0080      	lsls	r0, r0, #2
    12f8:	4b46      	ldr	r3, [pc, #280]	; (1414 <_usart_interrupt_handler+0x120>)
    12fa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    12fc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    12fe:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
    1300:	b21b      	sxth	r3, r3
    1302:	2b00      	cmp	r3, #0
    1304:	dbfb      	blt.n	12fe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1306:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    1308:	7b66      	ldrb	r6, [r4, #13]
    130a:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    130c:	2320      	movs	r3, #32
    130e:	5ceb      	ldrb	r3, [r5, r3]
    1310:	2221      	movs	r2, #33	; 0x21
    1312:	5caf      	ldrb	r7, [r5, r2]
    1314:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1316:	07f3      	lsls	r3, r6, #31
    1318:	d522      	bpl.n	1360 <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
    131a:	8beb      	ldrh	r3, [r5, #30]
    131c:	b29b      	uxth	r3, r3
    131e:	2b00      	cmp	r3, #0
    1320:	d01c      	beq.n	135c <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1322:	69aa      	ldr	r2, [r5, #24]
    1324:	7813      	ldrb	r3, [r2, #0]
    1326:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1328:	1c51      	adds	r1, r2, #1
    132a:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    132c:	7969      	ldrb	r1, [r5, #5]
    132e:	2901      	cmp	r1, #1
    1330:	d00e      	beq.n	1350 <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1332:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1334:	05db      	lsls	r3, r3, #23
    1336:	0ddb      	lsrs	r3, r3, #23
    1338:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    133a:	8beb      	ldrh	r3, [r5, #30]
    133c:	3b01      	subs	r3, #1
    133e:	b29b      	uxth	r3, r3
    1340:	83eb      	strh	r3, [r5, #30]
    1342:	2b00      	cmp	r3, #0
    1344:	d10c      	bne.n	1360 <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1346:	3301      	adds	r3, #1
    1348:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    134a:	3301      	adds	r3, #1
    134c:	7363      	strb	r3, [r4, #13]
    134e:	e007      	b.n	1360 <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1350:	7851      	ldrb	r1, [r2, #1]
    1352:	0209      	lsls	r1, r1, #8
    1354:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1356:	3202      	adds	r2, #2
    1358:	61aa      	str	r2, [r5, #24]
    135a:	e7eb      	b.n	1334 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    135c:	2301      	movs	r3, #1
    135e:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1360:	07b3      	lsls	r3, r6, #30
    1362:	d506      	bpl.n	1372 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1364:	2302      	movs	r3, #2
    1366:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    1368:	2200      	movs	r2, #0
    136a:	3321      	adds	r3, #33	; 0x21
    136c:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    136e:	07fb      	lsls	r3, r7, #31
    1370:	d416      	bmi.n	13a0 <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1372:	0773      	lsls	r3, r6, #29
    1374:	d54d      	bpl.n	1412 <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
    1376:	8bab      	ldrh	r3, [r5, #28]
    1378:	b29b      	uxth	r3, r3
    137a:	2b00      	cmp	r3, #0
    137c:	d047      	beq.n	140e <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    137e:	8a23      	ldrh	r3, [r4, #16]
    1380:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1382:	075a      	lsls	r2, r3, #29
    1384:	d020      	beq.n	13c8 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1386:	079a      	lsls	r2, r3, #30
    1388:	d50e      	bpl.n	13a8 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    138a:	221a      	movs	r2, #26
    138c:	2322      	movs	r3, #34	; 0x22
    138e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1390:	3b20      	subs	r3, #32
    1392:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1394:	077b      	lsls	r3, r7, #29
    1396:	d53c      	bpl.n	1412 <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1398:	692b      	ldr	r3, [r5, #16]
    139a:	0028      	movs	r0, r5
    139c:	4798      	blx	r3
    139e:	e038      	b.n	1412 <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    13a0:	0028      	movs	r0, r5
    13a2:	68ab      	ldr	r3, [r5, #8]
    13a4:	4798      	blx	r3
    13a6:	e7e4      	b.n	1372 <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    13a8:	075a      	lsls	r2, r3, #29
    13aa:	d505      	bpl.n	13b8 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
    13ac:	221e      	movs	r2, #30
    13ae:	2322      	movs	r3, #34	; 0x22
    13b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    13b2:	3b1e      	subs	r3, #30
    13b4:	8223      	strh	r3, [r4, #16]
    13b6:	e7ed      	b.n	1394 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13b8:	07db      	lsls	r3, r3, #31
    13ba:	d5eb      	bpl.n	1394 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    13bc:	2213      	movs	r2, #19
    13be:	2322      	movs	r3, #34	; 0x22
    13c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    13c2:	3b21      	subs	r3, #33	; 0x21
    13c4:	8223      	strh	r3, [r4, #16]
    13c6:	e7e5      	b.n	1394 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    13c8:	8b23      	ldrh	r3, [r4, #24]
    13ca:	05db      	lsls	r3, r3, #23
    13cc:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    13ce:	b2da      	uxtb	r2, r3
    13d0:	6969      	ldr	r1, [r5, #20]
    13d2:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    13d4:	696a      	ldr	r2, [r5, #20]
    13d6:	1c51      	adds	r1, r2, #1
    13d8:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13da:	7969      	ldrb	r1, [r5, #5]
    13dc:	2901      	cmp	r1, #1
    13de:	d010      	beq.n	1402 <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    13e0:	8bab      	ldrh	r3, [r5, #28]
    13e2:	3b01      	subs	r3, #1
    13e4:	b29b      	uxth	r3, r3
    13e6:	83ab      	strh	r3, [r5, #28]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d112      	bne.n	1412 <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13ec:	3304      	adds	r3, #4
    13ee:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    13f0:	2200      	movs	r2, #0
    13f2:	331e      	adds	r3, #30
    13f4:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    13f6:	07bb      	lsls	r3, r7, #30
    13f8:	d50b      	bpl.n	1412 <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    13fa:	68eb      	ldr	r3, [r5, #12]
    13fc:	0028      	movs	r0, r5
    13fe:	4798      	blx	r3
    1400:	e007      	b.n	1412 <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1402:	0a1b      	lsrs	r3, r3, #8
    1404:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1406:	696b      	ldr	r3, [r5, #20]
    1408:	3301      	adds	r3, #1
    140a:	616b      	str	r3, [r5, #20]
    140c:	e7e8      	b.n	13e0 <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    140e:	2304      	movs	r3, #4
    1410:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1414:	200000b8 	.word	0x200000b8

00001418 <drv_ctrl_write_cmd>:
    /* 
	 * @brief: Pure SPI write function.
     * @param: register adress size = one byte
     * @param: data size = two byte
	 */
static void drv_ctrl_write_cmd(uint8_t adress, uint16_t data) {
    1418:	b530      	push	{r4, r5, lr}
    141a:	b083      	sub	sp, #12

    #if LOGS == 2
    rprintf("LOG: transmit: %x to adress: %x", data, adress);
    #endif
	
	uint8_t transfer_data_buffer[] = {((adress << 4)|(data >> 8)), (data & 0xFF)};
    141c:	ab01      	add	r3, sp, #4
    141e:	0102      	lsls	r2, r0, #4
    1420:	0a08      	lsrs	r0, r1, #8
    1422:	4310      	orrs	r0, r2
    1424:	7018      	strb	r0, [r3, #0]
    1426:	7059      	strb	r1, [r3, #1]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1428:	4c05      	ldr	r4, [pc, #20]	; (1440 <drv_ctrl_write_cmd+0x28>)
    142a:	2540      	movs	r5, #64	; 0x40
    142c:	61a5      	str	r5, [r4, #24]
	
	port_pin_set_output_level(MOTOR_CONTROLLER_SS_PIN, true);
	spi_write_buffer_wait(&gSpiMasterInstance, transfer_data_buffer, 2);
    142e:	2202      	movs	r2, #2
    1430:	0019      	movs	r1, r3
    1432:	4804      	ldr	r0, [pc, #16]	; (1444 <drv_ctrl_write_cmd+0x2c>)
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <drv_ctrl_write_cmd+0x30>)
    1436:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1438:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(MOTOR_CONTROLLER_SS_PIN, false);
}
    143a:	b003      	add	sp, #12
    143c:	bd30      	pop	{r4, r5, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	41004480 	.word	0x41004480
    1444:	2000011c 	.word	0x2000011c
    1448:	00000d5d 	.word	0x00000d5d

0000144c <drv_ctrl_write_ctrl>:
    /*
	 * Following private functions writes to one designated register. The functions are using the local configuration struct
	 * to prevent overwriting of previous values.
	 */

static void drv_ctrl_write_ctrl(){
    144c:	b510      	push	{r4, lr}
	
	drv_ctrl_write_cmd(CTRL_REG,
	sDrvConfig.direction_set |
    144e:	4b08      	ldr	r3, [pc, #32]	; (1470 <drv_ctrl_write_ctrl+0x24>)
	sDrvConfig.enable |
	sDrvConfig.step_mode |
	sDrvConfig.stall_detect |
    1450:	7899      	ldrb	r1, [r3, #2]
    1452:	781a      	ldrb	r2, [r3, #0]
    1454:	4311      	orrs	r1, r2
    1456:	78da      	ldrb	r2, [r3, #3]
    1458:	4311      	orrs	r1, r2
    145a:	791a      	ldrb	r2, [r3, #4]
    145c:	4311      	orrs	r1, r2
    145e:	88da      	ldrh	r2, [r3, #6]
    1460:	4311      	orrs	r1, r2
	sDrvConfig.isense_gain |
    1462:	891b      	ldrh	r3, [r3, #8]
	drv_ctrl_write_cmd(CTRL_REG,
    1464:	4319      	orrs	r1, r3
    1466:	2000      	movs	r0, #0
    1468:	4b02      	ldr	r3, [pc, #8]	; (1474 <drv_ctrl_write_ctrl+0x28>)
    146a:	4798      	blx	r3
	sDrvConfig.dead_time_insert);
	
}
    146c:	bd10      	pop	{r4, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	20000064 	.word	0x20000064
    1474:	00001419 	.word	0x00001419

00001478 <drv_ctrl_init>:

    /*
	 * @brief: Initialize the stepper driver
     * @param: new config struct as Driver_Instance_t
	 */
void drv_ctrl_init(Driver_Instance_t * const new_config) {
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	0001      	movs	r1, r0
	
	sDrvConfig = *new_config;
    147c:	4c18      	ldr	r4, [pc, #96]	; (14e0 <drv_ctrl_init+0x68>)
    147e:	2226      	movs	r2, #38	; 0x26
    1480:	0020      	movs	r0, r4
    1482:	4b18      	ldr	r3, [pc, #96]	; (14e4 <drv_ctrl_init+0x6c>)
    1484:	4798      	blx	r3
	
	drv_ctrl_write_ctrl();			
    1486:	4b18      	ldr	r3, [pc, #96]	; (14e8 <drv_ctrl_init+0x70>)
    1488:	4798      	blx	r3
	sDrvConfig.drv_torque |
    148a:	7aa1      	ldrb	r1, [r4, #10]
	drv_ctrl_write_cmd(TORQUE_REG,
    148c:	89a3      	ldrh	r3, [r4, #12]
    148e:	4319      	orrs	r1, r3
    1490:	2001      	movs	r0, #1
    1492:	4d16      	ldr	r5, [pc, #88]	; (14ec <drv_ctrl_init+0x74>)
    1494:	47a8      	blx	r5
    sDrvConfig.drv_toff |
    1496:	7ba1      	ldrb	r1, [r4, #14]
    drv_ctrl_write_cmd(OFF_REG,
    1498:	8a23      	ldrh	r3, [r4, #16]
    149a:	4319      	orrs	r1, r3
    149c:	2002      	movs	r0, #2
    149e:	47a8      	blx	r5
	sDrvConfig.drv_tblank |
    14a0:	7ca1      	ldrb	r1, [r4, #18]
	drv_ctrl_write_cmd(BLANK_REG,
    14a2:	8aa3      	ldrh	r3, [r4, #20]
    14a4:	4319      	orrs	r1, r3
    14a6:	2003      	movs	r0, #3
    14a8:	47a8      	blx	r5
	drv_ctrl_write_cmd(DECAY_REG,
    14aa:	7da1      	ldrb	r1, [r4, #22]
    14ac:	7de3      	ldrb	r3, [r4, #23]
    14ae:	4319      	orrs	r1, r3
    14b0:	2004      	movs	r0, #4
    14b2:	47a8      	blx	r5
	sDrvConfig.drv_sdthr |
    14b4:	7e21      	ldrb	r1, [r4, #24]
    14b6:	8b63      	ldrh	r3, [r4, #26]
    14b8:	4319      	orrs	r1, r3
	sDrvConfig.stall_count |
    14ba:	8ba3      	ldrh	r3, [r4, #28]
	drv_ctrl_write_cmd(STALL_REG,
    14bc:	4319      	orrs	r1, r3
    14be:	2005      	movs	r0, #5
    14c0:	47a8      	blx	r5
	sDrvConfig.hs_drive_time |
    14c2:	7fa1      	ldrb	r1, [r4, #30]
    14c4:	2320      	movs	r3, #32
    14c6:	5ce3      	ldrb	r3, [r4, r3]
    14c8:	4319      	orrs	r1, r3
    14ca:	2321      	movs	r3, #33	; 0x21
    14cc:	5ce3      	ldrb	r3, [r4, r3]
    14ce:	4319      	orrs	r1, r3
    14d0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    14d2:	4319      	orrs	r1, r3
	sDrvConfig.ls_current |
    14d4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	drv_ctrl_write_cmd(DRIVE_REG,
    14d6:	4319      	orrs	r1, r3
    14d8:	2006      	movs	r0, #6
    14da:	47a8      	blx	r5
    drv_ctrl_write_off();			
	drv_ctrl_write_blank();			
	drv_ctrl_write_decay();			
	drv_ctrl_write_stall();			
	drv_ctrl_write_drive();	
}
    14dc:	bd70      	pop	{r4, r5, r6, pc}
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	20000064 	.word	0x20000064
    14e4:	00002b4d 	.word	0x00002b4d
    14e8:	0000144d 	.word	0x0000144d
    14ec:	00001419 	.word	0x00001419

000014f0 <drv_ctrl_enable>:

    /* 
     * @brief: Enable the motor driver. This has to be done prior to all move fuctions!
     */
void drv_ctrl_enable(){
    14f0:	b510      	push	{r4, lr}

    #if LOGS == 2
    rprintf("LOG: enable driver");
    #endif
	
	sDrvConfig.enable = DRV_ENABLE;
    14f2:	2201      	movs	r2, #1
    14f4:	4b02      	ldr	r3, [pc, #8]	; (1500 <drv_ctrl_enable+0x10>)
    14f6:	701a      	strb	r2, [r3, #0]
	drv_ctrl_write_ctrl();
    14f8:	4b02      	ldr	r3, [pc, #8]	; (1504 <drv_ctrl_enable+0x14>)
    14fa:	4798      	blx	r3
}
    14fc:	bd10      	pop	{r4, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	20000064 	.word	0x20000064
    1504:	0000144d 	.word	0x0000144d

00001508 <drv_ctrl_set_microsteps>:

    /*
     * @brief: Set the microstep mode. Changes also the step divider for converting mm to steps.
     * @param: micro step mode as drv_mode
     */
void drv_ctrl_set_microsteps(enum drv_mode steps) {
    1508:	b510      	push	{r4, lr}
    150a:	0004      	movs	r4, r0
	
	sDrvConfig.step_mode = steps;
    150c:	4b17      	ldr	r3, [pc, #92]	; (156c <drv_ctrl_set_microsteps+0x64>)
    150e:	70d8      	strb	r0, [r3, #3]
	drv_ctrl_write_ctrl();
    1510:	4b17      	ldr	r3, [pc, #92]	; (1570 <drv_ctrl_set_microsteps+0x68>)
    1512:	4798      	blx	r3
	
	switch(steps) {
    1514:	2c40      	cmp	r4, #64	; 0x40
    1516:	d806      	bhi.n	1526 <drv_ctrl_set_microsteps+0x1e>
    1518:	00a4      	lsls	r4, r4, #2
    151a:	4b16      	ldr	r3, [pc, #88]	; (1574 <drv_ctrl_set_microsteps+0x6c>)
    151c:	591b      	ldr	r3, [r3, r4]
    151e:	469f      	mov	pc, r3
		case(DRV_MODE_1):
		    sStepDivider = 1;
    1520:	2201      	movs	r2, #1
    1522:	4b15      	ldr	r3, [pc, #84]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    1524:	801a      	strh	r2, [r3, #0]

        #if LOGS == 2
        rprintf("LOG: set micro steps to: %d", sStepDivider);
        #endif
	}
}
    1526:	bd10      	pop	{r4, pc}
		    sStepDivider = 2;
    1528:	2202      	movs	r2, #2
    152a:	4b13      	ldr	r3, [pc, #76]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    152c:	801a      	strh	r2, [r3, #0]
		    break;
    152e:	e7fa      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
		    sStepDivider = 4;
    1530:	2204      	movs	r2, #4
    1532:	4b11      	ldr	r3, [pc, #68]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    1534:	801a      	strh	r2, [r3, #0]
			break;
    1536:	e7f6      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
		    sStepDivider = 8;
    1538:	2208      	movs	r2, #8
    153a:	4b0f      	ldr	r3, [pc, #60]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    153c:	801a      	strh	r2, [r3, #0]
		    break;
    153e:	e7f2      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
		    sStepDivider = 16;
    1540:	2210      	movs	r2, #16
    1542:	4b0d      	ldr	r3, [pc, #52]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    1544:	801a      	strh	r2, [r3, #0]
		    break;
    1546:	e7ee      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
		    sStepDivider = 32;
    1548:	2220      	movs	r2, #32
    154a:	4b0b      	ldr	r3, [pc, #44]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    154c:	801a      	strh	r2, [r3, #0]
		    break;
    154e:	e7ea      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
		    sStepDivider = 64;
    1550:	2240      	movs	r2, #64	; 0x40
    1552:	4b09      	ldr	r3, [pc, #36]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    1554:	801a      	strh	r2, [r3, #0]
		    break;
    1556:	e7e6      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
		    sStepDivider = 128;
    1558:	2280      	movs	r2, #128	; 0x80
    155a:	4b07      	ldr	r3, [pc, #28]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    155c:	801a      	strh	r2, [r3, #0]
			break;
    155e:	e7e2      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
		    sStepDivider = 256;
    1560:	2280      	movs	r2, #128	; 0x80
    1562:	0052      	lsls	r2, r2, #1
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <drv_ctrl_set_microsteps+0x70>)
    1566:	801a      	strh	r2, [r3, #0]
}
    1568:	e7dd      	b.n	1526 <drv_ctrl_set_microsteps+0x1e>
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	20000064 	.word	0x20000064
    1570:	0000144d 	.word	0x0000144d
    1574:	00002cac 	.word	0x00002cac
    1578:	2000008a 	.word	0x2000008a

0000157c <force_sense_read_sense>:
static void force_sense_read_sense(void);

    /* 
	 * Reads the voltage from the INA via ADC, save the raw value in memory.
	 */
static void force_sense_read_sense() {
    157c:	b530      	push	{r4, r5, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    157e:	4b1c      	ldr	r3, [pc, #112]	; (15f0 <force_sense_read_sense+0x74>)
    1580:	6819      	ldr	r1, [r3, #0]
    1582:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    1584:	b25b      	sxtb	r3, r3
    1586:	2b00      	cmp	r3, #0
    1588:	dbfb      	blt.n	1582 <force_sense_read_sense+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    158a:	7b0b      	ldrb	r3, [r1, #12]
    158c:	2202      	movs	r2, #2
    158e:	4313      	orrs	r3, r2
    1590:	730b      	strb	r3, [r1, #12]
    1592:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    1594:	b25b      	sxtb	r3, r3
    1596:	2b00      	cmp	r3, #0
    1598:	dbfb      	blt.n	1592 <force_sense_read_sense+0x16>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    159a:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    159c:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    159e:	2402      	movs	r4, #2
    15a0:	e001      	b.n	15a6 <force_sense_read_sense+0x2a>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    15a2:	4210      	tst	r0, r2
    15a4:	d10a      	bne.n	15bc <force_sense_read_sense+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    15a6:	7e0b      	ldrb	r3, [r1, #24]
    15a8:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    15aa:	0002      	movs	r2, r0
    15ac:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    15ae:	421d      	tst	r5, r3
    15b0:	d000      	beq.n	15b4 <force_sense_read_sense+0x38>
		status_flags |= ADC_STATUS_WINDOW;
    15b2:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    15b4:	421c      	tst	r4, r3
    15b6:	d0f4      	beq.n	15a2 <force_sense_read_sense+0x26>
		status_flags |= ADC_STATUS_OVERRUN;
    15b8:	432a      	orrs	r2, r5
    15ba:	e7f2      	b.n	15a2 <force_sense_read_sense+0x26>
    15bc:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    15be:	b25b      	sxtb	r3, r3
    15c0:	2b00      	cmp	r3, #0
    15c2:	dbfb      	blt.n	15bc <force_sense_read_sense+0x40>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    15c4:	8b4a      	ldrh	r2, [r1, #26]
    15c6:	4b0b      	ldr	r3, [pc, #44]	; (15f4 <force_sense_read_sense+0x78>)
    15c8:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    15ca:	2301      	movs	r3, #1
    15cc:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    15ce:	7e0a      	ldrb	r2, [r1, #24]
    15d0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    15d2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    15d4:	0750      	lsls	r0, r2, #29
    15d6:	d501      	bpl.n	15dc <force_sense_read_sense+0x60>
		status_flags |= ADC_STATUS_WINDOW;
    15d8:	2002      	movs	r0, #2
    15da:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    15dc:	0792      	lsls	r2, r2, #30
    15de:	d501      	bpl.n	15e4 <force_sense_read_sense+0x68>
		status_flags |= ADC_STATUS_OVERRUN;
    15e0:	2204      	movs	r2, #4
    15e2:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    15e4:	075b      	lsls	r3, r3, #29
    15e6:	d501      	bpl.n	15ec <force_sense_read_sense+0x70>
	adc_module->INTFLAG.reg = int_flags;
    15e8:	2302      	movs	r3, #2
    15ea:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&gAdcInstance);
	
	while(adc_read(&gAdcInstance, &sForceSenseLastReadout) == STATUS_BUSY){
		//Wait till conversion is finished
	}
}
    15ec:	bd30      	pop	{r4, r5, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	20000124 	.word	0x20000124
    15f4:	2000008c 	.word	0x2000008c

000015f8 <force_sense_get_millinewton>:
}

    /* 
	 * Trigger a force sensor readout and converts the value to millinewton and returns it.
	 */
int16_t force_sense_get_millinewton() {
    15f8:	b510      	push	{r4, lr}
	
	force_sense_read_sense();
    15fa:	4b06      	ldr	r3, [pc, #24]	; (1614 <force_sense_get_millinewton+0x1c>)
    15fc:	4798      	blx	r3
	int16_t force_mN = (sForceSenseLastReadout - sForceSenseZeroValue) / FORCE_SENSE_mN_PER_COUNT;
    15fe:	4b06      	ldr	r3, [pc, #24]	; (1618 <force_sense_get_millinewton+0x20>)
    1600:	8818      	ldrh	r0, [r3, #0]
    1602:	4b06      	ldr	r3, [pc, #24]	; (161c <force_sense_get_millinewton+0x24>)
    1604:	881b      	ldrh	r3, [r3, #0]
    1606:	1ac0      	subs	r0, r0, r3
    1608:	210a      	movs	r1, #10
    160a:	4b05      	ldr	r3, [pc, #20]	; (1620 <force_sense_get_millinewton+0x28>)
    160c:	4798      	blx	r3
	
	return force_mN;
    160e:	b200      	sxth	r0, r0
}
    1610:	bd10      	pop	{r4, pc}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	0000157d 	.word	0x0000157d
    1618:	2000008c 	.word	0x2000008c
    161c:	2000008e 	.word	0x2000008e
    1620:	000028d9 	.word	0x000028d9

00001624 <plc_com_transmit_status>:
}
    
/*
 * This fu
 */
static void plc_com_transmit_status(Plc_State_t status, Error_Code_t code) {
    1624:	b500      	push	{lr}
    1626:	b083      	sub	sp, #12

    uint8_t txBuffer[4];
    uint8_t len = 3;

    if(status == s_error) len = 4;
    1628:	2865      	cmp	r0, #101	; 0x65
    162a:	d00f      	beq.n	164c <plc_com_transmit_status+0x28>
	
	txBuffer[0] = 'S';
    162c:	ab01      	add	r3, sp, #4
    162e:	2253      	movs	r2, #83	; 0x53
    1630:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = status;
    1632:	7058      	strb	r0, [r3, #1]
	(status == s_error) ? (txBuffer[2] = code) : (txBuffer[2] = cTerminator);
    1634:	3205      	adds	r2, #5
    1636:	709a      	strb	r2, [r3, #2]
    uint8_t len = 3;
    1638:	3a55      	subs	r2, #85	; 0x55
	txBuffer[3] = cTerminator;
    163a:	a901      	add	r1, sp, #4
    163c:	2358      	movs	r3, #88	; 0x58
    163e:	70cb      	strb	r3, [r1, #3]
		
	usart_write_buffer_wait(&gUsartInstance, txBuffer, len);
    1640:	b292      	uxth	r2, r2
    1642:	4806      	ldr	r0, [pc, #24]	; (165c <plc_com_transmit_status+0x38>)
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <plc_com_transmit_status+0x3c>)
    1646:	4798      	blx	r3
}
    1648:	b003      	add	sp, #12
    164a:	bd00      	pop	{pc}
	txBuffer[0] = 'S';
    164c:	ab01      	add	r3, sp, #4
    164e:	2253      	movs	r2, #83	; 0x53
    1650:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = status;
    1652:	3212      	adds	r2, #18
    1654:	705a      	strb	r2, [r3, #1]
	(status == s_error) ? (txBuffer[2] = code) : (txBuffer[2] = cTerminator);
    1656:	7099      	strb	r1, [r3, #2]
    if(status == s_error) len = 4;
    1658:	3a61      	subs	r2, #97	; 0x61
    165a:	e7ee      	b.n	163a <plc_com_transmit_status+0x16>
    165c:	200000f4 	.word	0x200000f4
    1660:	000011d5 	.word	0x000011d5

00001664 <plc_com_success>:

	/*
	 * Returns success message to PLC.
	 */
void plc_com_success() {
    1664:	b510      	push	{r4, lr}
	
	plc_com_transmit_status(s_success, 0);
    1666:	2100      	movs	r1, #0
    1668:	2073      	movs	r0, #115	; 0x73
    166a:	4b03      	ldr	r3, [pc, #12]	; (1678 <plc_com_success+0x14>)
    166c:	4798      	blx	r3
	set_state(idle);
    166e:	2001      	movs	r0, #1
    1670:	4b02      	ldr	r3, [pc, #8]	; (167c <plc_com_success+0x18>)
    1672:	4798      	blx	r3
	
}
    1674:	bd10      	pop	{r4, pc}
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	00001625 	.word	0x00001625
    167c:	00002349 	.word	0x00002349

00001680 <plc_com_transmit_force>:
}

    /*
	 * Returns the force value to the PLC.
	 */
void plc_com_transmit_force(int16_t force) {
    1680:	b570      	push	{r4, r5, r6, lr}
    1682:	b082      	sub	sp, #8
    1684:	1e05      	subs	r5, r0, #0
     * The functions put the ASCII characters at designated places in the array which is privided by caller function.
     * + or - sign on second place of array, numbers on place 3 to 7.
     */
static void plc_com_itoa(int16_t number, uint8_t * buffer) {
    
    if(number < 0) {
    1686:	db3f      	blt.n	1708 <plc_com_transmit_force+0x88>
        buffer[1] = '-';
    } else {
        buffer[1] = '+';
    1688:	232b      	movs	r3, #43	; 0x2b
    168a:	466a      	mov	r2, sp
    168c:	7053      	strb	r3, [r2, #1]
    }

    buffer[2] = '0' + (number / 10000);
    168e:	4e20      	ldr	r6, [pc, #128]	; (1710 <plc_com_transmit_force+0x90>)
    1690:	4920      	ldr	r1, [pc, #128]	; (1714 <plc_com_transmit_force+0x94>)
    1692:	0028      	movs	r0, r5
    1694:	47b0      	blx	r6
    1696:	3030      	adds	r0, #48	; 0x30
    1698:	466b      	mov	r3, sp
    169a:	7098      	strb	r0, [r3, #2]
    number %= 10000;
    169c:	4c1e      	ldr	r4, [pc, #120]	; (1718 <plc_com_transmit_force+0x98>)
    169e:	491d      	ldr	r1, [pc, #116]	; (1714 <plc_com_transmit_force+0x94>)
    16a0:	0028      	movs	r0, r5
    16a2:	47a0      	blx	r4
    16a4:	b20d      	sxth	r5, r1
    buffer[3] = '0' + (number / 1000);
    16a6:	21fa      	movs	r1, #250	; 0xfa
    16a8:	0089      	lsls	r1, r1, #2
    16aa:	0028      	movs	r0, r5
    16ac:	47b0      	blx	r6
    16ae:	3030      	adds	r0, #48	; 0x30
    16b0:	466b      	mov	r3, sp
    16b2:	70d8      	strb	r0, [r3, #3]
    number %= 1000;
    16b4:	21fa      	movs	r1, #250	; 0xfa
    16b6:	0089      	lsls	r1, r1, #2
    16b8:	0028      	movs	r0, r5
    16ba:	47a0      	blx	r4
    16bc:	b20d      	sxth	r5, r1
    buffer[4] = '0' + (number / 100);
    16be:	2164      	movs	r1, #100	; 0x64
    16c0:	0028      	movs	r0, r5
    16c2:	47b0      	blx	r6
    16c4:	3030      	adds	r0, #48	; 0x30
    16c6:	466b      	mov	r3, sp
    16c8:	7118      	strb	r0, [r3, #4]
    number %= 100;
    16ca:	2164      	movs	r1, #100	; 0x64
    16cc:	0028      	movs	r0, r5
    16ce:	47a0      	blx	r4
    16d0:	b20d      	sxth	r5, r1
    buffer[5] = '0' + (number / 10);
    16d2:	210a      	movs	r1, #10
    16d4:	0028      	movs	r0, r5
    16d6:	47b0      	blx	r6
    16d8:	3030      	adds	r0, #48	; 0x30
    16da:	466b      	mov	r3, sp
    16dc:	7158      	strb	r0, [r3, #5]
    number %= 10;
    16de:	210a      	movs	r1, #10
    16e0:	0028      	movs	r0, r5
    16e2:	47a0      	blx	r4
    buffer[6] = '0' + number;
    16e4:	3130      	adds	r1, #48	; 0x30
    16e6:	466b      	mov	r3, sp
    16e8:	7199      	strb	r1, [r3, #6]
	txBuffer[0] = 'F';
    16ea:	2346      	movs	r3, #70	; 0x46
    16ec:	466a      	mov	r2, sp
    16ee:	7013      	strb	r3, [r2, #0]
	txBuffer[7] = cTerminator;
    16f0:	3312      	adds	r3, #18
    16f2:	71d3      	strb	r3, [r2, #7]
	usart_write_buffer_wait(&gUsartInstance, txBuffer, 8);
    16f4:	2208      	movs	r2, #8
    16f6:	4669      	mov	r1, sp
    16f8:	4808      	ldr	r0, [pc, #32]	; (171c <plc_com_transmit_force+0x9c>)
    16fa:	4b09      	ldr	r3, [pc, #36]	; (1720 <plc_com_transmit_force+0xa0>)
    16fc:	4798      	blx	r3
	set_state(idle);
    16fe:	2001      	movs	r0, #1
    1700:	4b08      	ldr	r3, [pc, #32]	; (1724 <plc_com_transmit_force+0xa4>)
    1702:	4798      	blx	r3
}
    1704:	b002      	add	sp, #8
    1706:	bd70      	pop	{r4, r5, r6, pc}
        buffer[1] = '-';
    1708:	232d      	movs	r3, #45	; 0x2d
    170a:	466a      	mov	r2, sp
    170c:	7053      	strb	r3, [r2, #1]
    170e:	e7be      	b.n	168e <plc_com_transmit_force+0xe>
    1710:	000028d9 	.word	0x000028d9
    1714:	00002710 	.word	0x00002710
    1718:	00002aa5 	.word	0x00002aa5
    171c:	200000f4 	.word	0x200000f4
    1720:	000011d5 	.word	0x000011d5
    1724:	00002349 	.word	0x00002349

00001728 <plc_com_arm_receiver>:
void plc_com_arm_receiver() {
    1728:	b510      	push	{r4, lr}
	usart_read_job(&gUsartInstance, &sRxBuffer);
    172a:	4902      	ldr	r1, [pc, #8]	; (1734 <plc_com_arm_receiver+0xc>)
    172c:	4802      	ldr	r0, [pc, #8]	; (1738 <plc_com_arm_receiver+0x10>)
    172e:	4b03      	ldr	r3, [pc, #12]	; (173c <plc_com_arm_receiver+0x14>)
    1730:	4798      	blx	r3
}
    1732:	bd10      	pop	{r4, pc}
    1734:	20000092 	.word	0x20000092
    1738:	200000f4 	.word	0x200000f4
    173c:	000012e5 	.word	0x000012e5

00001740 <plc_com_receive_callback>:
void plc_com_receive_callback() {
    1740:	b510      	push	{r4, lr}
	if(get_state() != idle && get_state() != start) {
    1742:	4b78      	ldr	r3, [pc, #480]	; (1924 <plc_com_receive_callback+0x1e4>)
    1744:	4798      	blx	r3
    1746:	2801      	cmp	r0, #1
    1748:	d003      	beq.n	1752 <plc_com_receive_callback+0x12>
    174a:	4b76      	ldr	r3, [pc, #472]	; (1924 <plc_com_receive_callback+0x1e4>)
    174c:	4798      	blx	r3
    174e:	2800      	cmp	r0, #0
    1750:	d127      	bne.n	17a2 <plc_com_receive_callback+0x62>
	if(sSymbolCounter == 0) {
    1752:	4b75      	ldr	r3, [pc, #468]	; (1928 <plc_com_receive_callback+0x1e8>)
    1754:	781a      	ldrb	r2, [r3, #0]
    1756:	2a00      	cmp	r2, #0
    1758:	d12a      	bne.n	17b0 <plc_com_receive_callback+0x70>
		command = 0;
    175a:	2300      	movs	r3, #0
    175c:	4a73      	ldr	r2, [pc, #460]	; (192c <plc_com_receive_callback+0x1ec>)
    175e:	7013      	strb	r3, [r2, #0]
		specifier = 0;
    1760:	4a73      	ldr	r2, [pc, #460]	; (1930 <plc_com_receive_callback+0x1f0>)
    1762:	7013      	strb	r3, [r2, #0]
	if(((sRxBuffer == cTerminator) != awaitEtx) || sSymbolCounter > 2 ) {
    1764:	4b73      	ldr	r3, [pc, #460]	; (1934 <plc_com_receive_callback+0x1f4>)
    1766:	881a      	ldrh	r2, [r3, #0]
    1768:	4b73      	ldr	r3, [pc, #460]	; (1938 <plc_com_receive_callback+0x1f8>)
    176a:	7819      	ldrb	r1, [r3, #0]
    176c:	0013      	movs	r3, r2
    176e:	3b58      	subs	r3, #88	; 0x58
    1770:	4258      	negs	r0, r3
    1772:	4143      	adcs	r3, r0
    1774:	b2db      	uxtb	r3, r3
    1776:	428b      	cmp	r3, r1
    1778:	d128      	bne.n	17cc <plc_com_receive_callback+0x8c>
	if(sRxBuffer == cTerminator) {
    177a:	2900      	cmp	r1, #0
    177c:	d130      	bne.n	17e0 <plc_com_receive_callback+0xa0>
	    switch(sRxBuffer) {
    177e:	2a49      	cmp	r2, #73	; 0x49
    1780:	d100      	bne.n	1784 <plc_com_receive_callback+0x44>
    1782:	e08d      	b.n	18a0 <plc_com_receive_callback+0x160>
    1784:	d800      	bhi.n	1788 <plc_com_receive_callback+0x48>
    1786:	e082      	b.n	188e <plc_com_receive_callback+0x14e>
    1788:	2a4d      	cmp	r2, #77	; 0x4d
    178a:	d100      	bne.n	178e <plc_com_receive_callback+0x4e>
    178c:	e095      	b.n	18ba <plc_com_receive_callback+0x17a>
    178e:	2a54      	cmp	r2, #84	; 0x54
    1790:	d000      	beq.n	1794 <plc_com_receive_callback+0x54>
    1792:	e099      	b.n	18c8 <plc_com_receive_callback+0x188>
			    command = c_tool;
    1794:	2254      	movs	r2, #84	; 0x54
    1796:	4b65      	ldr	r3, [pc, #404]	; (192c <plc_com_receive_callback+0x1ec>)
    1798:	701a      	strb	r2, [r3, #0]
				awaitEtx = true;
    179a:	3a53      	subs	r2, #83	; 0x53
    179c:	4b66      	ldr	r3, [pc, #408]	; (1938 <plc_com_receive_callback+0x1f8>)
    179e:	701a      	strb	r2, [r3, #0]
				break;
    17a0:	e084      	b.n	18ac <plc_com_receive_callback+0x16c>
		plc_com_transmit_status(s_busy, 0);
    17a2:	2100      	movs	r1, #0
    17a4:	2062      	movs	r0, #98	; 0x62
    17a6:	4b65      	ldr	r3, [pc, #404]	; (193c <plc_com_receive_callback+0x1fc>)
    17a8:	4798      	blx	r3
		plc_com_arm_receiver();
    17aa:	4b65      	ldr	r3, [pc, #404]	; (1940 <plc_com_receive_callback+0x200>)
    17ac:	4798      	blx	r3
		return;
    17ae:	e016      	b.n	17de <plc_com_receive_callback+0x9e>
	if(((sRxBuffer == cTerminator) != awaitEtx) || sSymbolCounter > 2 ) {
    17b0:	4b60      	ldr	r3, [pc, #384]	; (1934 <plc_com_receive_callback+0x1f4>)
    17b2:	8819      	ldrh	r1, [r3, #0]
    17b4:	000b      	movs	r3, r1
    17b6:	3b58      	subs	r3, #88	; 0x58
    17b8:	4258      	negs	r0, r3
    17ba:	4143      	adcs	r3, r0
    17bc:	b2db      	uxtb	r3, r3
    17be:	485e      	ldr	r0, [pc, #376]	; (1938 <plc_com_receive_callback+0x1f8>)
    17c0:	7800      	ldrb	r0, [r0, #0]
    17c2:	4283      	cmp	r3, r0
    17c4:	d102      	bne.n	17cc <plc_com_receive_callback+0x8c>
    17c6:	2a02      	cmp	r2, #2
    17c8:	d800      	bhi.n	17cc <plc_com_receive_callback+0x8c>
    17ca:	e09c      	b.n	1906 <plc_com_receive_callback+0x1c6>
		plc_com_transmit_status(s_unknown, 0);
    17cc:	2100      	movs	r1, #0
    17ce:	2075      	movs	r0, #117	; 0x75
    17d0:	4b5a      	ldr	r3, [pc, #360]	; (193c <plc_com_receive_callback+0x1fc>)
    17d2:	4798      	blx	r3
		sSymbolCounter = 0;
    17d4:	2200      	movs	r2, #0
    17d6:	4b54      	ldr	r3, [pc, #336]	; (1928 <plc_com_receive_callback+0x1e8>)
    17d8:	701a      	strb	r2, [r3, #0]
		plc_com_arm_receiver();
    17da:	4b59      	ldr	r3, [pc, #356]	; (1940 <plc_com_receive_callback+0x200>)
    17dc:	4798      	blx	r3
}
    17de:	bd10      	pop	{r4, pc}
		set_state(busy);
    17e0:	2002      	movs	r0, #2
    17e2:	4b58      	ldr	r3, [pc, #352]	; (1944 <plc_com_receive_callback+0x204>)
    17e4:	4798      	blx	r3
		plc_com_plc_to_state(command, specifier);
    17e6:	4b51      	ldr	r3, [pc, #324]	; (192c <plc_com_receive_callback+0x1ec>)
	switch(command){
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	2b49      	cmp	r3, #73	; 0x49
    17ec:	d010      	beq.n	1810 <plc_com_receive_callback+0xd0>
    17ee:	b2da      	uxtb	r2, r3
    17f0:	2a49      	cmp	r2, #73	; 0x49
    17f2:	d907      	bls.n	1804 <plc_com_receive_callback+0xc4>
    17f4:	2b4d      	cmp	r3, #77	; 0x4d
    17f6:	d01f      	beq.n	1838 <plc_com_receive_callback+0xf8>
    17f8:	2b54      	cmp	r3, #84	; 0x54
    17fa:	d13f      	bne.n	187c <plc_com_receive_callback+0x13c>
		    acknowledge = set_state(change_tool);
    17fc:	2006      	movs	r0, #6
    17fe:	4b51      	ldr	r3, [pc, #324]	; (1944 <plc_com_receive_callback+0x204>)
    1800:	4798      	blx	r3
    1802:	e008      	b.n	1816 <plc_com_receive_callback+0xd6>
	switch(command){
    1804:	2b46      	cmp	r3, #70	; 0x46
    1806:	d139      	bne.n	187c <plc_com_receive_callback+0x13c>
			acknowledge = set_state(get_force);
    1808:	200a      	movs	r0, #10
    180a:	4b4e      	ldr	r3, [pc, #312]	; (1944 <plc_com_receive_callback+0x204>)
    180c:	4798      	blx	r3
    180e:	e002      	b.n	1816 <plc_com_receive_callback+0xd6>
			acknowledge = set_state(init);
    1810:	2003      	movs	r0, #3
    1812:	4b4c      	ldr	r3, [pc, #304]	; (1944 <plc_com_receive_callback+0x204>)
    1814:	4798      	blx	r3
	if(acknowledge == EXIT_SUCCESS) {
    1816:	2800      	cmp	r0, #0
    1818:	d034      	beq.n	1884 <plc_com_receive_callback+0x144>
		plc_com_transmit_status(s_error, e_not_init);
    181a:	2131      	movs	r1, #49	; 0x31
    181c:	2065      	movs	r0, #101	; 0x65
    181e:	4b47      	ldr	r3, [pc, #284]	; (193c <plc_com_receive_callback+0x1fc>)
    1820:	4798      	blx	r3
		set_state(idle);
    1822:	2001      	movs	r0, #1
    1824:	4b47      	ldr	r3, [pc, #284]	; (1944 <plc_com_receive_callback+0x204>)
    1826:	4798      	blx	r3
		sSymbolCounter = 0;
    1828:	2300      	movs	r3, #0
    182a:	4a3f      	ldr	r2, [pc, #252]	; (1928 <plc_com_receive_callback+0x1e8>)
    182c:	7013      	strb	r3, [r2, #0]
		awaitEtx = false;
    182e:	4a42      	ldr	r2, [pc, #264]	; (1938 <plc_com_receive_callback+0x1f8>)
    1830:	7013      	strb	r3, [r2, #0]
		plc_com_arm_receiver();
    1832:	4b43      	ldr	r3, [pc, #268]	; (1940 <plc_com_receive_callback+0x200>)
    1834:	4798      	blx	r3
		return;
    1836:	e7d2      	b.n	17de <plc_com_receive_callback+0x9e>
		plc_com_plc_to_state(command, specifier);
    1838:	4b3d      	ldr	r3, [pc, #244]	; (1930 <plc_com_receive_callback+0x1f0>)
		    switch(specifier) {
    183a:	781b      	ldrb	r3, [r3, #0]
    183c:	3b63      	subs	r3, #99	; 0x63
    183e:	b2da      	uxtb	r2, r3
    1840:	2a12      	cmp	r2, #18
    1842:	d81d      	bhi.n	1880 <plc_com_receive_callback+0x140>
    1844:	0093      	lsls	r3, r2, #2
    1846:	4a40      	ldr	r2, [pc, #256]	; (1948 <plc_com_receive_callback+0x208>)
    1848:	58d3      	ldr	r3, [r2, r3]
    184a:	469f      	mov	pc, r3
				    acknowledge = set_state(pick);
    184c:	2004      	movs	r0, #4
    184e:	4b3d      	ldr	r3, [pc, #244]	; (1944 <plc_com_receive_callback+0x204>)
    1850:	4798      	blx	r3
    1852:	e7e0      	b.n	1816 <plc_com_receive_callback+0xd6>
				    acknowledge = set_state(place);
    1854:	2005      	movs	r0, #5
    1856:	4b3b      	ldr	r3, [pc, #236]	; (1944 <plc_com_receive_callback+0x204>)
    1858:	4798      	blx	r3
    185a:	e7dc      	b.n	1816 <plc_com_receive_callback+0xd6>
				    acknowledge = set_state(close_lid);
    185c:	2009      	movs	r0, #9
    185e:	4b39      	ldr	r3, [pc, #228]	; (1944 <plc_com_receive_callback+0x204>)
    1860:	4798      	blx	r3
    1862:	e7d8      	b.n	1816 <plc_com_receive_callback+0xd6>
				    acknowledge = set_state(stamp);
    1864:	2007      	movs	r0, #7
    1866:	4b37      	ldr	r3, [pc, #220]	; (1944 <plc_com_receive_callback+0x204>)
    1868:	4798      	blx	r3
    186a:	e7d4      	b.n	1816 <plc_com_receive_callback+0xd6>
				    acknowledge = set_state(soak);
    186c:	2008      	movs	r0, #8
    186e:	4b35      	ldr	r3, [pc, #212]	; (1944 <plc_com_receive_callback+0x204>)
    1870:	4798      	blx	r3
    1872:	e7d0      	b.n	1816 <plc_com_receive_callback+0xd6>
				    acknowledge = set_state(music);
    1874:	200b      	movs	r0, #11
    1876:	4b33      	ldr	r3, [pc, #204]	; (1944 <plc_com_receive_callback+0x204>)
    1878:	4798      	blx	r3
    187a:	e7cc      	b.n	1816 <plc_com_receive_callback+0xd6>
	int acknowledge = 0;
    187c:	2000      	movs	r0, #0
    187e:	e7ca      	b.n	1816 <plc_com_receive_callback+0xd6>
    1880:	2000      	movs	r0, #0
    1882:	e7c8      	b.n	1816 <plc_com_receive_callback+0xd6>
		plc_com_transmit_status(s_acknowledge, 0);
    1884:	2100      	movs	r1, #0
    1886:	3061      	adds	r0, #97	; 0x61
    1888:	4b2c      	ldr	r3, [pc, #176]	; (193c <plc_com_receive_callback+0x1fc>)
    188a:	4798      	blx	r3
    188c:	e7cc      	b.n	1828 <plc_com_receive_callback+0xe8>
	    switch(sRxBuffer) {
    188e:	2a46      	cmp	r2, #70	; 0x46
    1890:	d11a      	bne.n	18c8 <plc_com_receive_callback+0x188>
			    command = c_force;
    1892:	2246      	movs	r2, #70	; 0x46
    1894:	4b25      	ldr	r3, [pc, #148]	; (192c <plc_com_receive_callback+0x1ec>)
    1896:	701a      	strb	r2, [r3, #0]
				awaitEtx = true;
    1898:	3a45      	subs	r2, #69	; 0x45
    189a:	4b27      	ldr	r3, [pc, #156]	; (1938 <plc_com_receive_callback+0x1f8>)
    189c:	701a      	strb	r2, [r3, #0]
				break;
    189e:	e005      	b.n	18ac <plc_com_receive_callback+0x16c>
			    command = c_init;
    18a0:	2249      	movs	r2, #73	; 0x49
    18a2:	4b22      	ldr	r3, [pc, #136]	; (192c <plc_com_receive_callback+0x1ec>)
    18a4:	701a      	strb	r2, [r3, #0]
				awaitEtx = true;
    18a6:	3a48      	subs	r2, #72	; 0x48
    18a8:	4b23      	ldr	r3, [pc, #140]	; (1938 <plc_com_receive_callback+0x1f8>)
    18aa:	701a      	strb	r2, [r3, #0]
		sSymbolCounter++;
    18ac:	4a1e      	ldr	r2, [pc, #120]	; (1928 <plc_com_receive_callback+0x1e8>)
    18ae:	7813      	ldrb	r3, [r2, #0]
    18b0:	3301      	adds	r3, #1
    18b2:	7013      	strb	r3, [r2, #0]
		plc_com_arm_receiver();
    18b4:	4b22      	ldr	r3, [pc, #136]	; (1940 <plc_com_receive_callback+0x200>)
    18b6:	4798      	blx	r3
		return;
    18b8:	e791      	b.n	17de <plc_com_receive_callback+0x9e>
			    command = c_move;
    18ba:	224d      	movs	r2, #77	; 0x4d
    18bc:	4b1b      	ldr	r3, [pc, #108]	; (192c <plc_com_receive_callback+0x1ec>)
    18be:	701a      	strb	r2, [r3, #0]
				awaitEtx = false;
    18c0:	2200      	movs	r2, #0
    18c2:	4b1d      	ldr	r3, [pc, #116]	; (1938 <plc_com_receive_callback+0x1f8>)
    18c4:	701a      	strb	r2, [r3, #0]
				break;
    18c6:	e7f1      	b.n	18ac <plc_com_receive_callback+0x16c>
			    plc_com_transmit_status(s_unknown, 0);
    18c8:	2100      	movs	r1, #0
    18ca:	2075      	movs	r0, #117	; 0x75
    18cc:	4b1b      	ldr	r3, [pc, #108]	; (193c <plc_com_receive_callback+0x1fc>)
    18ce:	4798      	blx	r3
				sSymbolCounter = 0;
    18d0:	2200      	movs	r2, #0
    18d2:	4b15      	ldr	r3, [pc, #84]	; (1928 <plc_com_receive_callback+0x1e8>)
    18d4:	701a      	strb	r2, [r3, #0]
				plc_com_arm_receiver();
    18d6:	4b1a      	ldr	r3, [pc, #104]	; (1940 <plc_com_receive_callback+0x200>)
    18d8:	4798      	blx	r3
				return;
    18da:	e780      	b.n	17de <plc_com_receive_callback+0x9e>
			    specifier = sRxBuffer;
    18dc:	4b14      	ldr	r3, [pc, #80]	; (1930 <plc_com_receive_callback+0x1f0>)
    18de:	7019      	strb	r1, [r3, #0]
		sSymbolCounter++;
    18e0:	2202      	movs	r2, #2
    18e2:	4b11      	ldr	r3, [pc, #68]	; (1928 <plc_com_receive_callback+0x1e8>)
    18e4:	701a      	strb	r2, [r3, #0]
		awaitEtx = true;
    18e6:	3a01      	subs	r2, #1
    18e8:	4b13      	ldr	r3, [pc, #76]	; (1938 <plc_com_receive_callback+0x1f8>)
    18ea:	701a      	strb	r2, [r3, #0]
		plc_com_arm_receiver();
    18ec:	4b14      	ldr	r3, [pc, #80]	; (1940 <plc_com_receive_callback+0x200>)
    18ee:	4798      	blx	r3
		return;
    18f0:	e775      	b.n	17de <plc_com_receive_callback+0x9e>
				plc_com_transmit_status(s_unknown, 0);
    18f2:	2100      	movs	r1, #0
    18f4:	2075      	movs	r0, #117	; 0x75
    18f6:	4b11      	ldr	r3, [pc, #68]	; (193c <plc_com_receive_callback+0x1fc>)
    18f8:	4798      	blx	r3
				sSymbolCounter = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	4b0a      	ldr	r3, [pc, #40]	; (1928 <plc_com_receive_callback+0x1e8>)
    18fe:	701a      	strb	r2, [r3, #0]
				plc_com_arm_receiver();
    1900:	4b0f      	ldr	r3, [pc, #60]	; (1940 <plc_com_receive_callback+0x200>)
    1902:	4798      	blx	r3
				return;
    1904:	e76b      	b.n	17de <plc_com_receive_callback+0x9e>
	if(sRxBuffer == cTerminator) {
    1906:	2958      	cmp	r1, #88	; 0x58
    1908:	d100      	bne.n	190c <plc_com_receive_callback+0x1cc>
    190a:	e769      	b.n	17e0 <plc_com_receive_callback+0xa0>
	if(sSymbolCounter == 1){
    190c:	2a01      	cmp	r2, #1
    190e:	d000      	beq.n	1912 <plc_com_receive_callback+0x1d2>
    1910:	e765      	b.n	17de <plc_com_receive_callback+0x9e>
		switch(sRxBuffer) {
    1912:	000b      	movs	r3, r1
    1914:	3b63      	subs	r3, #99	; 0x63
    1916:	b29a      	uxth	r2, r3
    1918:	2a12      	cmp	r2, #18
    191a:	d8ea      	bhi.n	18f2 <plc_com_receive_callback+0x1b2>
    191c:	0093      	lsls	r3, r2, #2
    191e:	4a0b      	ldr	r2, [pc, #44]	; (194c <plc_com_receive_callback+0x20c>)
    1920:	58d3      	ldr	r3, [r2, r3]
    1922:	469f      	mov	pc, r3
    1924:	00002381 	.word	0x00002381
    1928:	20000094 	.word	0x20000094
    192c:	20000091 	.word	0x20000091
    1930:	20000095 	.word	0x20000095
    1934:	20000092 	.word	0x20000092
    1938:	20000090 	.word	0x20000090
    193c:	00001625 	.word	0x00001625
    1940:	00001729 	.word	0x00001729
    1944:	00002349 	.word	0x00002349
    1948:	00002db0 	.word	0x00002db0
    194c:	00002dfc 	.word	0x00002dfc

00001950 <iputc>:
#include "rprintf.h"

struct usart_module my_usart_instance;

static void iputc(uint8_t ch)
{
    1950:	b570      	push	{r4, r5, r6, lr}
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
	while(STATUS_OK !=usart_write_wait(module, c));
    1952:	b284      	uxth	r4, r0
    1954:	4e03      	ldr	r6, [pc, #12]	; (1964 <iputc+0x14>)
    1956:	4d04      	ldr	r5, [pc, #16]	; (1968 <iputc+0x18>)
    1958:	0021      	movs	r1, r4
    195a:	0030      	movs	r0, r6
    195c:	47a8      	blx	r5
    195e:	2800      	cmp	r0, #0
    1960:	d1fa      	bne.n	1958 <iputc+0x8>
	/*This function has to be replaced by user*/	
	usart_serial_putchar(&my_usart_instance, ch);
}
    1962:	bd70      	pop	{r4, r5, r6, pc}
    1964:	200000d0 	.word	0x200000d0
    1968:	000011ad 	.word	0x000011ad

0000196c <rprintf_init>:
static uint8_t* change(uint32_t Index)
{
    return (uint8_t*)("0123456789abcdef"+Index);
}

void rprintf_init() {
    196c:	b570      	push	{r4, r5, r6, lr}
    196e:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1970:	2380      	movs	r3, #128	; 0x80
    1972:	05db      	lsls	r3, r3, #23
    1974:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1976:	2300      	movs	r3, #0
    1978:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    197a:	22ff      	movs	r2, #255	; 0xff
    197c:	4669      	mov	r1, sp
    197e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1980:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1982:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1984:	2296      	movs	r2, #150	; 0x96
    1986:	0192      	lsls	r2, r2, #6
    1988:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    198a:	2401      	movs	r4, #1
    198c:	466a      	mov	r2, sp
    198e:	750c      	strb	r4, [r1, #20]
	config->transmitter_enable = true;
    1990:	754c      	strb	r4, [r1, #21]
	config->clock_polarity_inverted = false;
    1992:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1994:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1996:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1998:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    199a:	774b      	strb	r3, [r1, #29]
    struct usart_config my_config_usart;

    usart_get_config_defaults(&my_config_usart);

    my_config_usart.baudrate    = 9600;
	my_config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    199c:	23c4      	movs	r3, #196	; 0xc4
    199e:	039b      	lsls	r3, r3, #14
    19a0:	9303      	str	r3, [sp, #12]
    my_config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    19a2:	2301      	movs	r3, #1
    19a4:	425b      	negs	r3, r3
    19a6:	9308      	str	r3, [sp, #32]
    my_config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    19a8:	9309      	str	r3, [sp, #36]	; 0x24
    my_config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    19aa:	4b0e      	ldr	r3, [pc, #56]	; (19e4 <rprintf_init+0x78>)
    19ac:	930a      	str	r3, [sp, #40]	; 0x28
    my_config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    19ae:	4b0e      	ldr	r3, [pc, #56]	; (19e8 <rprintf_init+0x7c>)
    19b0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (usart_init(module, hw, config) == STATUS_OK) {
    19b2:	4e0e      	ldr	r6, [pc, #56]	; (19ec <rprintf_init+0x80>)
    19b4:	490e      	ldr	r1, [pc, #56]	; (19f0 <rprintf_init+0x84>)
    19b6:	0030      	movs	r0, r6
    19b8:	4b0e      	ldr	r3, [pc, #56]	; (19f4 <rprintf_init+0x88>)
    19ba:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    19bc:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    19be:	0028      	movs	r0, r5
    19c0:	4b0d      	ldr	r3, [pc, #52]	; (19f8 <rprintf_init+0x8c>)
    19c2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19c4:	231f      	movs	r3, #31
    19c6:	4018      	ands	r0, r3
    19c8:	4084      	lsls	r4, r0
    19ca:	4b0c      	ldr	r3, [pc, #48]	; (19fc <rprintf_init+0x90>)
    19cc:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    19ce:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    19d0:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    19d2:	b21b      	sxth	r3, r3
    19d4:	2b00      	cmp	r3, #0
    19d6:	dbfb      	blt.n	19d0 <rprintf_init+0x64>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    19d8:	682b      	ldr	r3, [r5, #0]
    19da:	2202      	movs	r2, #2
    19dc:	4313      	orrs	r3, r2
    19de:	602b      	str	r3, [r5, #0]

    usart_serial_init(&my_usart_instance, EDBG_CDC_MODULE,&my_config_usart);
    usart_enable(&my_usart_instance);
}
    19e0:	b00c      	add	sp, #48	; 0x30
    19e2:	bd70      	pop	{r4, r5, r6, pc}
    19e4:	00180002 	.word	0x00180002
    19e8:	00190002 	.word	0x00190002
    19ec:	200000d0 	.word	0x200000d0
    19f0:	42001400 	.word	0x42001400
    19f4:	00000f61 	.word	0x00000f61
    19f8:	000009d1 	.word	0x000009d1
    19fc:	e000e100 	.word	0xe000e100

00001a00 <rprintf>:

void rprintf(const uint8_t *pszFmt,...)
{
    1a00:	b40f      	push	{r0, r1, r2, r3}
    1a02:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a04:	46de      	mov	lr, fp
    1a06:	4657      	mov	r7, sl
    1a08:	464e      	mov	r6, r9
    1a0a:	4645      	mov	r5, r8
    1a0c:	b5e0      	push	{r5, r6, r7, lr}
    1a0e:	b08f      	sub	sp, #60	; 0x3c
    uint8_t *pszVal;
    uint32_t iVal, xVal, i = 0, buffer[12], index = 1;
    1a10:	2401      	movs	r4, #1
                buffer[i++]=0;

            while(i > 0)
            {
                i--;
                iputc(*change(buffer[i]));
    1a12:	4b56      	ldr	r3, [pc, #344]	; (1b6c <rprintf+0x16c>)
    1a14:	469b      	mov	fp, r3
    while(*pszFmt)
    1a16:	e00d      	b.n	1a34 <rprintf+0x34>
        pszFmt++;
    1a18:	1c6a      	adds	r2, r5, #1
    1a1a:	9218      	str	r2, [sp, #96]	; 0x60
        if(*pszFmt == 's')
    1a1c:	786b      	ldrb	r3, [r5, #1]
    1a1e:	2b73      	cmp	r3, #115	; 0x73
    1a20:	d014      	beq.n	1a4c <rprintf+0x4c>
        if(*pszFmt == 'd')
    1a22:	2b64      	cmp	r3, #100	; 0x64
    1a24:	d025      	beq.n	1a72 <rprintf+0x72>
        if(*pszFmt == 'c')
    1a26:	2b63      	cmp	r3, #99	; 0x63
    1a28:	d054      	beq.n	1ad4 <rprintf+0xd4>
        if(*pszFmt == 'x')
    1a2a:	2b78      	cmp	r3, #120	; 0x78
    1a2c:	d05e      	beq.n	1aec <rprintf+0xec>
            }
            pszFmt++;
            continue;
        }
        if(pszFmt == '\0')
    1a2e:	2a00      	cmp	r2, #0
    1a30:	d100      	bne.n	1a34 <rprintf+0x34>
    1a32:	e090      	b.n	1b56 <rprintf+0x156>
    while(*pszFmt)
    1a34:	9d18      	ldr	r5, [sp, #96]	; 0x60
    1a36:	7828      	ldrb	r0, [r5, #0]
    1a38:	2800      	cmp	r0, #0
    1a3a:	d100      	bne.n	1a3e <rprintf+0x3e>
    1a3c:	e08b      	b.n	1b56 <rprintf+0x156>
        if('%' != *pszFmt)
    1a3e:	2825      	cmp	r0, #37	; 0x25
    1a40:	d0ea      	beq.n	1a18 <rprintf+0x18>
            iputc(*pszFmt);
    1a42:	4b4b      	ldr	r3, [pc, #300]	; (1b70 <rprintf+0x170>)
    1a44:	4798      	blx	r3
            pszFmt++;
    1a46:	3501      	adds	r5, #1
    1a48:	9518      	str	r5, [sp, #96]	; 0x60
            continue;
    1a4a:	e7f3      	b.n	1a34 <rprintf+0x34>
            pszVal = (uint8_t*)pArg[index++];
    1a4c:	1c67      	adds	r7, r4, #1
    1a4e:	00a4      	lsls	r4, r4, #2
    1a50:	ab18      	add	r3, sp, #96	; 0x60
    1a52:	469c      	mov	ip, r3
    1a54:	4464      	add	r4, ip
    1a56:	6824      	ldr	r4, [r4, #0]
            for(; *pszVal != '\0'; pszVal++)
    1a58:	7820      	ldrb	r0, [r4, #0]
    1a5a:	2800      	cmp	r0, #0
    1a5c:	d005      	beq.n	1a6a <rprintf+0x6a>
                iputc(*pszVal);
    1a5e:	4e44      	ldr	r6, [pc, #272]	; (1b70 <rprintf+0x170>)
    1a60:	47b0      	blx	r6
            for(; *pszVal != '\0'; pszVal++)
    1a62:	3401      	adds	r4, #1
    1a64:	7820      	ldrb	r0, [r4, #0]
    1a66:	2800      	cmp	r0, #0
    1a68:	d1fa      	bne.n	1a60 <rprintf+0x60>
            pszFmt++;
    1a6a:	3502      	adds	r5, #2
    1a6c:	9518      	str	r5, [sp, #96]	; 0x60
            pszVal = (uint8_t*)pArg[index++];
    1a6e:	003c      	movs	r4, r7
            continue;
    1a70:	e7e0      	b.n	1a34 <rprintf+0x34>
            iVal = pArg[index++];
    1a72:	1c63      	adds	r3, r4, #1
    1a74:	9301      	str	r3, [sp, #4]
    1a76:	00a4      	lsls	r4, r4, #2
    1a78:	ab18      	add	r3, sp, #96	; 0x60
    1a7a:	469c      	mov	ip, r3
    1a7c:	4464      	add	r4, ip
    1a7e:	6826      	ldr	r6, [r4, #0]
    1a80:	ab02      	add	r3, sp, #8
    1a82:	4698      	mov	r8, r3
            i = 0;
    1a84:	2700      	movs	r7, #0
                buffer[i++] = iVal % 10;
    1a86:	4b3b      	ldr	r3, [pc, #236]	; (1b74 <rprintf+0x174>)
    1a88:	469a      	mov	sl, r3
                iVal /= 10;
    1a8a:	4b3b      	ldr	r3, [pc, #236]	; (1b78 <rprintf+0x178>)
    1a8c:	4699      	mov	r9, r3
    1a8e:	e000      	b.n	1a92 <rprintf+0x92>
                buffer[i++] = iVal % 10;
    1a90:	0027      	movs	r7, r4
    1a92:	1c7c      	adds	r4, r7, #1
    1a94:	210a      	movs	r1, #10
    1a96:	0030      	movs	r0, r6
    1a98:	47d0      	blx	sl
    1a9a:	4643      	mov	r3, r8
    1a9c:	c302      	stmia	r3!, {r1}
    1a9e:	4698      	mov	r8, r3
                iVal /= 10;
    1aa0:	210a      	movs	r1, #10
    1aa2:	0030      	movs	r0, r6
    1aa4:	47c8      	blx	r9
    1aa6:	1e06      	subs	r6, r0, #0
            }while(iVal);
    1aa8:	d1f2      	bne.n	1a90 <rprintf+0x90>
            while(i > 0)
    1aaa:	2c00      	cmp	r4, #0
    1aac:	d00e      	beq.n	1acc <rprintf+0xcc>
    1aae:	00bf      	lsls	r7, r7, #2
    1ab0:	ab02      	add	r3, sp, #8
    1ab2:	469c      	mov	ip, r3
    1ab4:	4467      	add	r7, ip
                iputc(*change(buffer[i]));
    1ab6:	4b2d      	ldr	r3, [pc, #180]	; (1b6c <rprintf+0x16c>)
    1ab8:	4698      	mov	r8, r3
    1aba:	4e2d      	ldr	r6, [pc, #180]	; (1b70 <rprintf+0x170>)
                i--;
    1abc:	3c01      	subs	r4, #1
                iputc(*change(buffer[i]));
    1abe:	4643      	mov	r3, r8
    1ac0:	683a      	ldr	r2, [r7, #0]
    1ac2:	5c98      	ldrb	r0, [r3, r2]
    1ac4:	47b0      	blx	r6
    1ac6:	3f04      	subs	r7, #4
            while(i > 0)
    1ac8:	2c00      	cmp	r4, #0
    1aca:	d1f7      	bne.n	1abc <rprintf+0xbc>
            pszFmt++;
    1acc:	3502      	adds	r5, #2
    1ace:	9518      	str	r5, [sp, #96]	; 0x60
            iVal = pArg[index++];
    1ad0:	9c01      	ldr	r4, [sp, #4]
            continue;
    1ad2:	e7af      	b.n	1a34 <rprintf+0x34>
            cVal = (uint8_t)pArg[index++];
    1ad4:	1c66      	adds	r6, r4, #1
    1ad6:	00a4      	lsls	r4, r4, #2
    1ad8:	ab18      	add	r3, sp, #96	; 0x60
    1ada:	469c      	mov	ip, r3
    1adc:	4464      	add	r4, ip
            iputc(cVal);
    1ade:	7820      	ldrb	r0, [r4, #0]
    1ae0:	4b23      	ldr	r3, [pc, #140]	; (1b70 <rprintf+0x170>)
    1ae2:	4798      	blx	r3
            pszFmt++;
    1ae4:	3502      	adds	r5, #2
    1ae6:	9518      	str	r5, [sp, #96]	; 0x60
            cVal = (uint8_t)pArg[index++];
    1ae8:	0034      	movs	r4, r6
            continue;
    1aea:	e7a3      	b.n	1a34 <rprintf+0x34>
            xVal = pArg[index++];
    1aec:	1c67      	adds	r7, r4, #1
    1aee:	00a4      	lsls	r4, r4, #2
    1af0:	ab18      	add	r3, sp, #96	; 0x60
    1af2:	469c      	mov	ip, r3
    1af4:	4464      	add	r4, ip
    1af6:	6823      	ldr	r3, [r4, #0]
    1af8:	aa02      	add	r2, sp, #8
            i = 0;
    1afa:	2100      	movs	r1, #0
                buffer[i++] = xVal % 16;
    1afc:	260f      	movs	r6, #15
    1afe:	e000      	b.n	1b02 <rprintf+0x102>
    1b00:	0021      	movs	r1, r4
    1b02:	1c4c      	adds	r4, r1, #1
    1b04:	0030      	movs	r0, r6
    1b06:	4018      	ands	r0, r3
    1b08:	c201      	stmia	r2!, {r0}
                xVal /= 16;
    1b0a:	091b      	lsrs	r3, r3, #4
            }while(xVal);
    1b0c:	d1f8      	bne.n	1b00 <rprintf+0x100>
            if(i%2!=0)
    1b0e:	07e3      	lsls	r3, r4, #31
    1b10:	d504      	bpl.n	1b1c <rprintf+0x11c>
                buffer[i++]=0;
    1b12:	00a4      	lsls	r4, r4, #2
    1b14:	2300      	movs	r3, #0
    1b16:	aa02      	add	r2, sp, #8
    1b18:	50a3      	str	r3, [r4, r2]
    1b1a:	1c8c      	adds	r4, r1, #2
            if(i<2)
    1b1c:	2c01      	cmp	r4, #1
    1b1e:	d914      	bls.n	1b4a <rprintf+0x14a>
            while(i > 0)
    1b20:	2c00      	cmp	r4, #0
    1b22:	d00e      	beq.n	1b42 <rprintf+0x142>
    1b24:	4b15      	ldr	r3, [pc, #84]	; (1b7c <rprintf+0x17c>)
    1b26:	18e6      	adds	r6, r4, r3
    1b28:	00b6      	lsls	r6, r6, #2
    1b2a:	ab02      	add	r3, sp, #8
    1b2c:	469c      	mov	ip, r3
    1b2e:	4466      	add	r6, ip
                i--;
    1b30:	3c01      	subs	r4, #1
                iputc(*change(buffer[i]));
    1b32:	465b      	mov	r3, fp
    1b34:	6832      	ldr	r2, [r6, #0]
    1b36:	5c98      	ldrb	r0, [r3, r2]
    1b38:	4b0d      	ldr	r3, [pc, #52]	; (1b70 <rprintf+0x170>)
    1b3a:	4798      	blx	r3
    1b3c:	3e04      	subs	r6, #4
            while(i > 0)
    1b3e:	2c00      	cmp	r4, #0
    1b40:	d1f6      	bne.n	1b30 <rprintf+0x130>
            pszFmt++;
    1b42:	3502      	adds	r5, #2
    1b44:	9518      	str	r5, [sp, #96]	; 0x60
            xVal = pArg[index++];
    1b46:	003c      	movs	r4, r7
            continue;
    1b48:	e774      	b.n	1a34 <rprintf+0x34>
                buffer[i++]=0;
    1b4a:	00a3      	lsls	r3, r4, #2
    1b4c:	2200      	movs	r2, #0
    1b4e:	a902      	add	r1, sp, #8
    1b50:	505a      	str	r2, [r3, r1]
    1b52:	3401      	adds	r4, #1
    1b54:	e7e4      	b.n	1b20 <rprintf+0x120>
        {
            break;
        }

    }
    1b56:	b00f      	add	sp, #60	; 0x3c
    1b58:	bc3c      	pop	{r2, r3, r4, r5}
    1b5a:	4690      	mov	r8, r2
    1b5c:	4699      	mov	r9, r3
    1b5e:	46a2      	mov	sl, r4
    1b60:	46ab      	mov	fp, r5
    1b62:	bcf0      	pop	{r4, r5, r6, r7}
    1b64:	bc08      	pop	{r3}
    1b66:	b004      	add	sp, #16
    1b68:	4718      	bx	r3
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	00002e48 	.word	0x00002e48
    1b70:	00001951 	.word	0x00001951
    1b74:	000028d1 	.word	0x000028d1
    1b78:	000027c5 	.word	0x000027c5
    1b7c:	3fffffff 	.word	0x3fffffff

00001b80 <stepper_music_play>:
#include "drv_ctrl.h"

const uint32_t cDuration_ms = 200;
const uint16_t cDurationPause_ms = 500;

void stepper_music_play(uint16_t * notes, uint16_t len){
    1b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b82:	46de      	mov	lr, fp
    1b84:	4657      	mov	r7, sl
    1b86:	464e      	mov	r6, r9
    1b88:	4645      	mov	r5, r8
    1b8a:	b5e0      	push	{r5, r6, r7, lr}
    1b8c:	b083      	sub	sp, #12
    1b8e:	0005      	movs	r5, r0
    1b90:	000c      	movs	r4, r1
	
	uint16_t del = 0;
	uint16_t count = 0;
	
	drv_ctrl_set_microsteps(DRV_MODE_1_2);
    1b92:	2008      	movs	r0, #8
    1b94:	4b2d      	ldr	r3, [pc, #180]	; (1c4c <stepper_music_play+0xcc>)
    1b96:	4798      	blx	r3
	
	for(uint16_t i = 0; i < len; i++){
    1b98:	2c00      	cmp	r4, #0
    1b9a:	d04d      	beq.n	1c38 <stepper_music_play+0xb8>
    1b9c:	1cab      	adds	r3, r5, #2
    1b9e:	469b      	mov	fp, r3
    1ba0:	3c01      	subs	r4, #1
    1ba2:	b2a3      	uxth	r3, r4
    1ba4:	3302      	adds	r3, #2
    1ba6:	005b      	lsls	r3, r3, #1
    1ba8:	18eb      	adds	r3, r5, r3
    1baa:	9301      	str	r3, [sp, #4]
		del = 1000000 / note;
		count = (cDuration_ms * 1000) / del;
		for(int x = 0; x < count; x++) {
			port_pin_toggle_output_level(MOTOR_CONTROLLER_DIR_PIN);
			port_pin_set_output_level(MOTOR_CONTROLLER_STP_PIN, true);
			delay_us(del/2);
    1bac:	4b28      	ldr	r3, [pc, #160]	; (1c50 <stepper_music_play+0xd0>)
    1bae:	469a      	mov	sl, r3
    1bb0:	e009      	b.n	1bc6 <stepper_music_play+0x46>
			delay_ms(cDurationPause_ms);
    1bb2:	20fa      	movs	r0, #250	; 0xfa
    1bb4:	0040      	lsls	r0, r0, #1
    1bb6:	4b27      	ldr	r3, [pc, #156]	; (1c54 <stepper_music_play+0xd4>)
    1bb8:	4798      	blx	r3
    1bba:	2302      	movs	r3, #2
    1bbc:	469c      	mov	ip, r3
    1bbe:	44e3      	add	fp, ip
	for(uint16_t i = 0; i < len; i++){
    1bc0:	9b01      	ldr	r3, [sp, #4]
    1bc2:	459b      	cmp	fp, r3
    1bc4:	d038      	beq.n	1c38 <stepper_music_play+0xb8>
		uint16_t note = *notes;
    1bc6:	465b      	mov	r3, fp
    1bc8:	3b02      	subs	r3, #2
    1bca:	8819      	ldrh	r1, [r3, #0]
		if(note == 0) {
    1bcc:	2900      	cmp	r1, #0
    1bce:	d0f0      	beq.n	1bb2 <stepper_music_play+0x32>
		del = 1000000 / note;
    1bd0:	4821      	ldr	r0, [pc, #132]	; (1c58 <stepper_music_play+0xd8>)
    1bd2:	4b22      	ldr	r3, [pc, #136]	; (1c5c <stepper_music_play+0xdc>)
    1bd4:	4798      	blx	r3
    1bd6:	b283      	uxth	r3, r0
    1bd8:	4698      	mov	r8, r3
		count = (cDuration_ms * 1000) / del;
    1bda:	0400      	lsls	r0, r0, #16
    1bdc:	0c01      	lsrs	r1, r0, #16
    1bde:	4820      	ldr	r0, [pc, #128]	; (1c60 <stepper_music_play+0xe0>)
    1be0:	4b20      	ldr	r3, [pc, #128]	; (1c64 <stepper_music_play+0xe4>)
    1be2:	4798      	blx	r3
		for(int x = 0; x < count; x++) {
    1be4:	0407      	lsls	r7, r0, #16
    1be6:	0c3f      	lsrs	r7, r7, #16
    1be8:	2f00      	cmp	r7, #0
    1bea:	dde6      	ble.n	1bba <stepper_music_play+0x3a>
			delay_us(del/2);
    1bec:	4643      	mov	r3, r8
    1bee:	085b      	lsrs	r3, r3, #1
    1bf0:	9300      	str	r3, [sp, #0]
    1bf2:	2400      	movs	r4, #0
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1bf4:	4d1c      	ldr	r5, [pc, #112]	; (1c68 <stepper_music_play+0xe8>)
    1bf6:	2380      	movs	r3, #128	; 0x80
    1bf8:	035b      	lsls	r3, r3, #13
    1bfa:	4699      	mov	r9, r3
    1bfc:	003b      	movs	r3, r7
    1bfe:	4647      	mov	r7, r8
    1c00:	4698      	mov	r8, r3
    1c02:	e009      	b.n	1c18 <stepper_music_play+0x98>
    1c04:	2001      	movs	r0, #1
    1c06:	47d0      	blx	sl
		port_base->OUTCLR.reg = pin_mask;
    1c08:	2380      	movs	r3, #128	; 0x80
    1c0a:	039b      	lsls	r3, r3, #14
    1c0c:	616b      	str	r3, [r5, #20]
			port_pin_set_output_level(MOTOR_CONTROLLER_STP_PIN, false);
			delay_us(del/2);
    1c0e:	2001      	movs	r0, #1
    1c10:	47d0      	blx	sl
		for(int x = 0; x < count; x++) {
    1c12:	3401      	adds	r4, #1
    1c14:	4544      	cmp	r4, r8
    1c16:	d0d0      	beq.n	1bba <stepper_music_play+0x3a>
	port_base->OUTTGL.reg = pin_mask;
    1c18:	464b      	mov	r3, r9
    1c1a:	61eb      	str	r3, [r5, #28]
		port_base->OUTSET.reg = pin_mask;
    1c1c:	2380      	movs	r3, #128	; 0x80
    1c1e:	039b      	lsls	r3, r3, #14
    1c20:	61ab      	str	r3, [r5, #24]
			delay_us(del/2);
    1c22:	2f01      	cmp	r7, #1
    1c24:	d9ee      	bls.n	1c04 <stepper_music_play+0x84>
    1c26:	9800      	ldr	r0, [sp, #0]
    1c28:	4e09      	ldr	r6, [pc, #36]	; (1c50 <stepper_music_play+0xd0>)
    1c2a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1c2c:	2380      	movs	r3, #128	; 0x80
    1c2e:	039b      	lsls	r3, r3, #14
    1c30:	616b      	str	r3, [r5, #20]
			delay_us(del/2);
    1c32:	9800      	ldr	r0, [sp, #0]
    1c34:	47b0      	blx	r6
    1c36:	e7ec      	b.n	1c12 <stepper_music_play+0x92>
		}
		
		notes++;
	}
	set_state(success);
    1c38:	200c      	movs	r0, #12
    1c3a:	4b0c      	ldr	r3, [pc, #48]	; (1c6c <stepper_music_play+0xec>)
    1c3c:	4798      	blx	r3
    1c3e:	b003      	add	sp, #12
    1c40:	bc3c      	pop	{r2, r3, r4, r5}
    1c42:	4690      	mov	r8, r2
    1c44:	4699      	mov	r9, r3
    1c46:	46a2      	mov	sl, r4
    1c48:	46ab      	mov	fp, r5
    1c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c4c:	00001509 	.word	0x00001509
    1c50:	00000145 	.word	0x00000145
    1c54:	00000171 	.word	0x00000171
    1c58:	000f4240 	.word	0x000f4240
    1c5c:	000028d9 	.word	0x000028d9
    1c60:	00030d40 	.word	0x00030d40
    1c64:	000027c5 	.word	0x000027c5
    1c68:	41004400 	.word	0x41004400
    1c6c:	00002349 	.word	0x00002349

00001c70 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1c70:	4b0c      	ldr	r3, [pc, #48]	; (1ca4 <cpu_irq_enter_critical+0x34>)
    1c72:	681b      	ldr	r3, [r3, #0]
    1c74:	2b00      	cmp	r3, #0
    1c76:	d106      	bne.n	1c86 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c78:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d007      	beq.n	1c90 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c80:	2200      	movs	r2, #0
    1c82:	4b09      	ldr	r3, [pc, #36]	; (1ca8 <cpu_irq_enter_critical+0x38>)
    1c84:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1c86:	4a07      	ldr	r2, [pc, #28]	; (1ca4 <cpu_irq_enter_critical+0x34>)
    1c88:	6813      	ldr	r3, [r2, #0]
    1c8a:	3301      	adds	r3, #1
    1c8c:	6013      	str	r3, [r2, #0]
}
    1c8e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c90:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1c92:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c96:	2200      	movs	r2, #0
    1c98:	4b04      	ldr	r3, [pc, #16]	; (1cac <cpu_irq_enter_critical+0x3c>)
    1c9a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c9c:	3201      	adds	r2, #1
    1c9e:	4b02      	ldr	r3, [pc, #8]	; (1ca8 <cpu_irq_enter_critical+0x38>)
    1ca0:	701a      	strb	r2, [r3, #0]
    1ca2:	e7f0      	b.n	1c86 <cpu_irq_enter_critical+0x16>
    1ca4:	20000098 	.word	0x20000098
    1ca8:	2000009c 	.word	0x2000009c
    1cac:	20000008 	.word	0x20000008

00001cb0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1cb0:	4b08      	ldr	r3, [pc, #32]	; (1cd4 <cpu_irq_leave_critical+0x24>)
    1cb2:	681a      	ldr	r2, [r3, #0]
    1cb4:	3a01      	subs	r2, #1
    1cb6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d109      	bne.n	1cd2 <cpu_irq_leave_critical+0x22>
    1cbe:	4b06      	ldr	r3, [pc, #24]	; (1cd8 <cpu_irq_leave_critical+0x28>)
    1cc0:	781b      	ldrb	r3, [r3, #0]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d005      	beq.n	1cd2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1cc6:	2201      	movs	r2, #1
    1cc8:	4b04      	ldr	r3, [pc, #16]	; (1cdc <cpu_irq_leave_critical+0x2c>)
    1cca:	701a      	strb	r2, [r3, #0]
    1ccc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1cd0:	b662      	cpsie	i
	}
}
    1cd2:	4770      	bx	lr
    1cd4:	20000098 	.word	0x20000098
    1cd8:	2000009c 	.word	0x2000009c
    1cdc:	20000008 	.word	0x20000008

00001ce0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1ce4:	ac01      	add	r4, sp, #4
    1ce6:	2501      	movs	r5, #1
    1ce8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1cea:	2700      	movs	r7, #0
    1cec:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1cee:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1cf0:	0021      	movs	r1, r4
    1cf2:	200e      	movs	r0, #14
    1cf4:	4e06      	ldr	r6, [pc, #24]	; (1d10 <system_board_init+0x30>)
    1cf6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1cf8:	2280      	movs	r2, #128	; 0x80
    1cfa:	01d2      	lsls	r2, r2, #7
    1cfc:	4b05      	ldr	r3, [pc, #20]	; (1d14 <system_board_init+0x34>)
    1cfe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1d00:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1d02:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1d04:	0021      	movs	r1, r4
    1d06:	200f      	movs	r0, #15
    1d08:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
    1d0a:	b003      	add	sp, #12
    1d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00001d19 	.word	0x00001d19
    1d14:	41004400 	.word	0x41004400

00001d18 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1d18:	b500      	push	{lr}
    1d1a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1d1c:	ab01      	add	r3, sp, #4
    1d1e:	2280      	movs	r2, #128	; 0x80
    1d20:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1d22:	780a      	ldrb	r2, [r1, #0]
    1d24:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1d26:	784a      	ldrb	r2, [r1, #1]
    1d28:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1d2a:	788a      	ldrb	r2, [r1, #2]
    1d2c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1d2e:	0019      	movs	r1, r3
    1d30:	4b01      	ldr	r3, [pc, #4]	; (1d38 <port_pin_set_config+0x20>)
    1d32:	4798      	blx	r3
}
    1d34:	b003      	add	sp, #12
    1d36:	bd00      	pop	{pc}
    1d38:	0000224d 	.word	0x0000224d

00001d3c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1d3c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1d3e:	2807      	cmp	r0, #7
    1d40:	d803      	bhi.n	1d4a <system_clock_source_get_hz+0xe>
    1d42:	0080      	lsls	r0, r0, #2
    1d44:	4b16      	ldr	r3, [pc, #88]	; (1da0 <system_clock_source_get_hz+0x64>)
    1d46:	581b      	ldr	r3, [r3, r0]
    1d48:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    1d4a:	2000      	movs	r0, #0
    1d4c:	e027      	b.n	1d9e <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    1d4e:	4b15      	ldr	r3, [pc, #84]	; (1da4 <system_clock_source_get_hz+0x68>)
    1d50:	68d8      	ldr	r0, [r3, #12]
    1d52:	e024      	b.n	1d9e <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1d54:	4b14      	ldr	r3, [pc, #80]	; (1da8 <system_clock_source_get_hz+0x6c>)
    1d56:	6a1b      	ldr	r3, [r3, #32]
    1d58:	059b      	lsls	r3, r3, #22
    1d5a:	0f9b      	lsrs	r3, r3, #30
    1d5c:	4813      	ldr	r0, [pc, #76]	; (1dac <system_clock_source_get_hz+0x70>)
    1d5e:	40d8      	lsrs	r0, r3
    1d60:	e01d      	b.n	1d9e <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    1d62:	4b10      	ldr	r3, [pc, #64]	; (1da4 <system_clock_source_get_hz+0x68>)
    1d64:	6918      	ldr	r0, [r3, #16]
    1d66:	e01a      	b.n	1d9e <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1d68:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <system_clock_source_get_hz+0x68>)
    1d6a:	681b      	ldr	r3, [r3, #0]
			return 0;
    1d6c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1d6e:	079b      	lsls	r3, r3, #30
    1d70:	d515      	bpl.n	1d9e <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d72:	490d      	ldr	r1, [pc, #52]	; (1da8 <system_clock_source_get_hz+0x6c>)
    1d74:	2210      	movs	r2, #16
    1d76:	68cb      	ldr	r3, [r1, #12]
    1d78:	421a      	tst	r2, r3
    1d7a:	d0fc      	beq.n	1d76 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1d7c:	4b09      	ldr	r3, [pc, #36]	; (1da4 <system_clock_source_get_hz+0x68>)
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	075b      	lsls	r3, r3, #29
    1d82:	d401      	bmi.n	1d88 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1d84:	480a      	ldr	r0, [pc, #40]	; (1db0 <system_clock_source_get_hz+0x74>)
    1d86:	e00a      	b.n	1d9e <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d88:	2000      	movs	r0, #0
    1d8a:	4b0a      	ldr	r3, [pc, #40]	; (1db4 <system_clock_source_get_hz+0x78>)
    1d8c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1d8e:	4b05      	ldr	r3, [pc, #20]	; (1da4 <system_clock_source_get_hz+0x68>)
    1d90:	689b      	ldr	r3, [r3, #8]
    1d92:	041b      	lsls	r3, r3, #16
    1d94:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d96:	4358      	muls	r0, r3
    1d98:	e001      	b.n	1d9e <system_clock_source_get_hz+0x62>
		return 32768UL;
    1d9a:	2080      	movs	r0, #128	; 0x80
    1d9c:	0200      	lsls	r0, r0, #8
	}
}
    1d9e:	bd10      	pop	{r4, pc}
    1da0:	00002e5c 	.word	0x00002e5c
    1da4:	200000a0 	.word	0x200000a0
    1da8:	40000800 	.word	0x40000800
    1dac:	007a1200 	.word	0x007a1200
    1db0:	02dc6c00 	.word	0x02dc6c00
    1db4:	00002171 	.word	0x00002171

00001db8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1db8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1dba:	490c      	ldr	r1, [pc, #48]	; (1dec <system_clock_source_osc8m_set_config+0x34>)
    1dbc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1dbe:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1dc0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1dc2:	7840      	ldrb	r0, [r0, #1]
    1dc4:	2201      	movs	r2, #1
    1dc6:	4010      	ands	r0, r2
    1dc8:	0180      	lsls	r0, r0, #6
    1dca:	2640      	movs	r6, #64	; 0x40
    1dcc:	43b3      	bics	r3, r6
    1dce:	4303      	orrs	r3, r0
    1dd0:	402a      	ands	r2, r5
    1dd2:	01d2      	lsls	r2, r2, #7
    1dd4:	2080      	movs	r0, #128	; 0x80
    1dd6:	4383      	bics	r3, r0
    1dd8:	4313      	orrs	r3, r2
    1dda:	2203      	movs	r2, #3
    1ddc:	4022      	ands	r2, r4
    1dde:	0212      	lsls	r2, r2, #8
    1de0:	4803      	ldr	r0, [pc, #12]	; (1df0 <system_clock_source_osc8m_set_config+0x38>)
    1de2:	4003      	ands	r3, r0
    1de4:	4313      	orrs	r3, r2
    1de6:	620b      	str	r3, [r1, #32]
}
    1de8:	bd70      	pop	{r4, r5, r6, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	40000800 	.word	0x40000800
    1df0:	fffffcff 	.word	0xfffffcff

00001df4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1df4:	2807      	cmp	r0, #7
    1df6:	d803      	bhi.n	1e00 <system_clock_source_enable+0xc>
    1df8:	0080      	lsls	r0, r0, #2
    1dfa:	4b1e      	ldr	r3, [pc, #120]	; (1e74 <system_clock_source_enable+0x80>)
    1dfc:	581b      	ldr	r3, [r3, r0]
    1dfe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e00:	2017      	movs	r0, #23
    1e02:	e036      	b.n	1e72 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1e04:	4a1c      	ldr	r2, [pc, #112]	; (1e78 <system_clock_source_enable+0x84>)
    1e06:	6a13      	ldr	r3, [r2, #32]
    1e08:	2102      	movs	r1, #2
    1e0a:	430b      	orrs	r3, r1
    1e0c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1e0e:	2000      	movs	r0, #0
    1e10:	e02f      	b.n	1e72 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1e12:	4a19      	ldr	r2, [pc, #100]	; (1e78 <system_clock_source_enable+0x84>)
    1e14:	6993      	ldr	r3, [r2, #24]
    1e16:	2102      	movs	r1, #2
    1e18:	430b      	orrs	r3, r1
    1e1a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1e1c:	2000      	movs	r0, #0
		break;
    1e1e:	e028      	b.n	1e72 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1e20:	4a15      	ldr	r2, [pc, #84]	; (1e78 <system_clock_source_enable+0x84>)
    1e22:	8a13      	ldrh	r3, [r2, #16]
    1e24:	2102      	movs	r1, #2
    1e26:	430b      	orrs	r3, r1
    1e28:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1e2a:	2000      	movs	r0, #0
		break;
    1e2c:	e021      	b.n	1e72 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1e2e:	4a12      	ldr	r2, [pc, #72]	; (1e78 <system_clock_source_enable+0x84>)
    1e30:	8a93      	ldrh	r3, [r2, #20]
    1e32:	2102      	movs	r1, #2
    1e34:	430b      	orrs	r3, r1
    1e36:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1e38:	2000      	movs	r0, #0
		break;
    1e3a:	e01a      	b.n	1e72 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1e3c:	4b0f      	ldr	r3, [pc, #60]	; (1e7c <system_clock_source_enable+0x88>)
    1e3e:	681a      	ldr	r2, [r3, #0]
    1e40:	2102      	movs	r1, #2
    1e42:	430a      	orrs	r2, r1
    1e44:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1e46:	681b      	ldr	r3, [r3, #0]
    1e48:	4a0d      	ldr	r2, [pc, #52]	; (1e80 <system_clock_source_enable+0x8c>)
    1e4a:	4013      	ands	r3, r2
    1e4c:	4a0a      	ldr	r2, [pc, #40]	; (1e78 <system_clock_source_enable+0x84>)
    1e4e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e50:	0011      	movs	r1, r2
    1e52:	2210      	movs	r2, #16
    1e54:	68cb      	ldr	r3, [r1, #12]
    1e56:	421a      	tst	r2, r3
    1e58:	d0fc      	beq.n	1e54 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1e5a:	4a08      	ldr	r2, [pc, #32]	; (1e7c <system_clock_source_enable+0x88>)
    1e5c:	6891      	ldr	r1, [r2, #8]
    1e5e:	4b06      	ldr	r3, [pc, #24]	; (1e78 <system_clock_source_enable+0x84>)
    1e60:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1e62:	6851      	ldr	r1, [r2, #4]
    1e64:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1e66:	6812      	ldr	r2, [r2, #0]
    1e68:	b292      	uxth	r2, r2
    1e6a:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    1e6c:	2000      	movs	r0, #0
    1e6e:	e000      	b.n	1e72 <system_clock_source_enable+0x7e>
		return STATUS_OK;
    1e70:	2000      	movs	r0, #0
}
    1e72:	4770      	bx	lr
    1e74:	00002e7c 	.word	0x00002e7c
    1e78:	40000800 	.word	0x40000800
    1e7c:	200000a0 	.word	0x200000a0
    1e80:	0000ff7f 	.word	0x0000ff7f

00001e84 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1e84:	b530      	push	{r4, r5, lr}
    1e86:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1e88:	22c2      	movs	r2, #194	; 0xc2
    1e8a:	00d2      	lsls	r2, r2, #3
    1e8c:	4b1a      	ldr	r3, [pc, #104]	; (1ef8 <system_clock_init+0x74>)
    1e8e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1e90:	4a1a      	ldr	r2, [pc, #104]	; (1efc <system_clock_init+0x78>)
    1e92:	6853      	ldr	r3, [r2, #4]
    1e94:	211e      	movs	r1, #30
    1e96:	438b      	bics	r3, r1
    1e98:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1e9a:	2301      	movs	r3, #1
    1e9c:	466a      	mov	r2, sp
    1e9e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ea0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1ea2:	4d17      	ldr	r5, [pc, #92]	; (1f00 <system_clock_init+0x7c>)
    1ea4:	b2e0      	uxtb	r0, r4
    1ea6:	4669      	mov	r1, sp
    1ea8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1eaa:	3401      	adds	r4, #1
    1eac:	2c1c      	cmp	r4, #28
    1eae:	d1f9      	bne.n	1ea4 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1eb0:	a803      	add	r0, sp, #12
    1eb2:	2400      	movs	r4, #0
    1eb4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1eb6:	2501      	movs	r5, #1
    1eb8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1eba:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1ebc:	4b11      	ldr	r3, [pc, #68]	; (1f04 <system_clock_init+0x80>)
    1ebe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1ec0:	2006      	movs	r0, #6
    1ec2:	4b11      	ldr	r3, [pc, #68]	; (1f08 <system_clock_init+0x84>)
    1ec4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1ec6:	4b11      	ldr	r3, [pc, #68]	; (1f0c <system_clock_init+0x88>)
    1ec8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1eca:	4b11      	ldr	r3, [pc, #68]	; (1f10 <system_clock_init+0x8c>)
    1ecc:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1ece:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1ed0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1ed2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1ed4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1ed6:	466b      	mov	r3, sp
    1ed8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1eda:	2306      	movs	r3, #6
    1edc:	466a      	mov	r2, sp
    1ede:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1ee0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1ee2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ee4:	4669      	mov	r1, sp
    1ee6:	2000      	movs	r0, #0
    1ee8:	4b0a      	ldr	r3, [pc, #40]	; (1f14 <system_clock_init+0x90>)
    1eea:	4798      	blx	r3
    1eec:	2000      	movs	r0, #0
    1eee:	4b0a      	ldr	r3, [pc, #40]	; (1f18 <system_clock_init+0x94>)
    1ef0:	4798      	blx	r3
#endif
}
    1ef2:	b005      	add	sp, #20
    1ef4:	bd30      	pop	{r4, r5, pc}
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	40000800 	.word	0x40000800
    1efc:	41004000 	.word	0x41004000
    1f00:	00002155 	.word	0x00002155
    1f04:	00001db9 	.word	0x00001db9
    1f08:	00001df5 	.word	0x00001df5
    1f0c:	00001f1d 	.word	0x00001f1d
    1f10:	40000400 	.word	0x40000400
    1f14:	00001f41 	.word	0x00001f41
    1f18:	00001ff9 	.word	0x00001ff9

00001f1c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1f1c:	4a06      	ldr	r2, [pc, #24]	; (1f38 <system_gclk_init+0x1c>)
    1f1e:	6993      	ldr	r3, [r2, #24]
    1f20:	2108      	movs	r1, #8
    1f22:	430b      	orrs	r3, r1
    1f24:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f26:	2201      	movs	r2, #1
    1f28:	4b04      	ldr	r3, [pc, #16]	; (1f3c <system_gclk_init+0x20>)
    1f2a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f2c:	0019      	movs	r1, r3
    1f2e:	780b      	ldrb	r3, [r1, #0]
    1f30:	4213      	tst	r3, r2
    1f32:	d1fc      	bne.n	1f2e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f34:	4770      	bx	lr
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	40000400 	.word	0x40000400
    1f3c:	40000c00 	.word	0x40000c00

00001f40 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f40:	b570      	push	{r4, r5, r6, lr}
    1f42:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f44:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f46:	780d      	ldrb	r5, [r1, #0]
    1f48:	022d      	lsls	r5, r5, #8
    1f4a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f4c:	784b      	ldrb	r3, [r1, #1]
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d002      	beq.n	1f58 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1f52:	2380      	movs	r3, #128	; 0x80
    1f54:	02db      	lsls	r3, r3, #11
    1f56:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f58:	7a4b      	ldrb	r3, [r1, #9]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d002      	beq.n	1f64 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f5e:	2380      	movs	r3, #128	; 0x80
    1f60:	031b      	lsls	r3, r3, #12
    1f62:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f64:	6848      	ldr	r0, [r1, #4]
    1f66:	2801      	cmp	r0, #1
    1f68:	d910      	bls.n	1f8c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f6a:	1e43      	subs	r3, r0, #1
    1f6c:	4218      	tst	r0, r3
    1f6e:	d134      	bne.n	1fda <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1f70:	2802      	cmp	r0, #2
    1f72:	d930      	bls.n	1fd6 <system_gclk_gen_set_config+0x96>
    1f74:	2302      	movs	r3, #2
    1f76:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1f78:	3201      	adds	r2, #1
						mask <<= 1) {
    1f7a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1f7c:	4298      	cmp	r0, r3
    1f7e:	d8fb      	bhi.n	1f78 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1f80:	0212      	lsls	r2, r2, #8
    1f82:	4332      	orrs	r2, r6
    1f84:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1f86:	2380      	movs	r3, #128	; 0x80
    1f88:	035b      	lsls	r3, r3, #13
    1f8a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1f8c:	7a0b      	ldrb	r3, [r1, #8]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d002      	beq.n	1f98 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1f92:	2380      	movs	r3, #128	; 0x80
    1f94:	039b      	lsls	r3, r3, #14
    1f96:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f98:	4a13      	ldr	r2, [pc, #76]	; (1fe8 <system_gclk_gen_set_config+0xa8>)
    1f9a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1f9c:	b25b      	sxtb	r3, r3
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	dbfb      	blt.n	1f9a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1fa2:	4b12      	ldr	r3, [pc, #72]	; (1fec <system_gclk_gen_set_config+0xac>)
    1fa4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fa6:	4b12      	ldr	r3, [pc, #72]	; (1ff0 <system_gclk_gen_set_config+0xb0>)
    1fa8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1faa:	4a0f      	ldr	r2, [pc, #60]	; (1fe8 <system_gclk_gen_set_config+0xa8>)
    1fac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1fae:	b25b      	sxtb	r3, r3
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	dbfb      	blt.n	1fac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1fb4:	4b0c      	ldr	r3, [pc, #48]	; (1fe8 <system_gclk_gen_set_config+0xa8>)
    1fb6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb8:	001a      	movs	r2, r3
    1fba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1fbc:	b25b      	sxtb	r3, r3
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	dbfb      	blt.n	1fba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1fc2:	4a09      	ldr	r2, [pc, #36]	; (1fe8 <system_gclk_gen_set_config+0xa8>)
    1fc4:	6853      	ldr	r3, [r2, #4]
    1fc6:	2180      	movs	r1, #128	; 0x80
    1fc8:	0249      	lsls	r1, r1, #9
    1fca:	400b      	ands	r3, r1
    1fcc:	431d      	orrs	r5, r3
    1fce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1fd0:	4b08      	ldr	r3, [pc, #32]	; (1ff4 <system_gclk_gen_set_config+0xb4>)
    1fd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fd4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1fd6:	2200      	movs	r2, #0
    1fd8:	e7d2      	b.n	1f80 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1fda:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1fdc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1fde:	2380      	movs	r3, #128	; 0x80
    1fe0:	029b      	lsls	r3, r3, #10
    1fe2:	431d      	orrs	r5, r3
    1fe4:	e7d2      	b.n	1f8c <system_gclk_gen_set_config+0x4c>
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	40000c00 	.word	0x40000c00
    1fec:	00001c71 	.word	0x00001c71
    1ff0:	40000c08 	.word	0x40000c08
    1ff4:	00001cb1 	.word	0x00001cb1

00001ff8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ff8:	b510      	push	{r4, lr}
    1ffa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ffc:	4a0b      	ldr	r2, [pc, #44]	; (202c <STACK_SIZE+0x2c>)
    1ffe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2000:	b25b      	sxtb	r3, r3
    2002:	2b00      	cmp	r3, #0
    2004:	dbfb      	blt.n	1ffe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2006:	4b0a      	ldr	r3, [pc, #40]	; (2030 <STACK_SIZE+0x30>)
    2008:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    200a:	4b0a      	ldr	r3, [pc, #40]	; (2034 <STACK_SIZE+0x34>)
    200c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    200e:	4a07      	ldr	r2, [pc, #28]	; (202c <STACK_SIZE+0x2c>)
    2010:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2012:	b25b      	sxtb	r3, r3
    2014:	2b00      	cmp	r3, #0
    2016:	dbfb      	blt.n	2010 <STACK_SIZE+0x10>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2018:	4a04      	ldr	r2, [pc, #16]	; (202c <STACK_SIZE+0x2c>)
    201a:	6851      	ldr	r1, [r2, #4]
    201c:	2380      	movs	r3, #128	; 0x80
    201e:	025b      	lsls	r3, r3, #9
    2020:	430b      	orrs	r3, r1
    2022:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2024:	4b04      	ldr	r3, [pc, #16]	; (2038 <STACK_SIZE+0x38>)
    2026:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2028:	bd10      	pop	{r4, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	40000c00 	.word	0x40000c00
    2030:	00001c71 	.word	0x00001c71
    2034:	40000c04 	.word	0x40000c04
    2038:	00001cb1 	.word	0x00001cb1

0000203c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    203c:	b570      	push	{r4, r5, r6, lr}
    203e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2040:	4a1a      	ldr	r2, [pc, #104]	; (20ac <system_gclk_gen_get_hz+0x70>)
    2042:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2044:	b25b      	sxtb	r3, r3
    2046:	2b00      	cmp	r3, #0
    2048:	dbfb      	blt.n	2042 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    204a:	4b19      	ldr	r3, [pc, #100]	; (20b0 <system_gclk_gen_get_hz+0x74>)
    204c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    204e:	4b19      	ldr	r3, [pc, #100]	; (20b4 <system_gclk_gen_get_hz+0x78>)
    2050:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2052:	4a16      	ldr	r2, [pc, #88]	; (20ac <system_gclk_gen_get_hz+0x70>)
    2054:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2056:	b25b      	sxtb	r3, r3
    2058:	2b00      	cmp	r3, #0
    205a:	dbfb      	blt.n	2054 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    205c:	4e13      	ldr	r6, [pc, #76]	; (20ac <system_gclk_gen_get_hz+0x70>)
    205e:	6870      	ldr	r0, [r6, #4]
    2060:	04c0      	lsls	r0, r0, #19
    2062:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2064:	4b14      	ldr	r3, [pc, #80]	; (20b8 <system_gclk_gen_get_hz+0x7c>)
    2066:	4798      	blx	r3
    2068:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    206a:	4b12      	ldr	r3, [pc, #72]	; (20b4 <system_gclk_gen_get_hz+0x78>)
    206c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    206e:	6876      	ldr	r6, [r6, #4]
    2070:	02f6      	lsls	r6, r6, #11
    2072:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2074:	4b11      	ldr	r3, [pc, #68]	; (20bc <system_gclk_gen_get_hz+0x80>)
    2076:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2078:	4a0c      	ldr	r2, [pc, #48]	; (20ac <system_gclk_gen_get_hz+0x70>)
    207a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    207c:	b25b      	sxtb	r3, r3
    207e:	2b00      	cmp	r3, #0
    2080:	dbfb      	blt.n	207a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2082:	4b0a      	ldr	r3, [pc, #40]	; (20ac <system_gclk_gen_get_hz+0x70>)
    2084:	689c      	ldr	r4, [r3, #8]
    2086:	0224      	lsls	r4, r4, #8
    2088:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    208a:	4b0d      	ldr	r3, [pc, #52]	; (20c0 <system_gclk_gen_get_hz+0x84>)
    208c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    208e:	2e00      	cmp	r6, #0
    2090:	d107      	bne.n	20a2 <system_gclk_gen_get_hz+0x66>
    2092:	2c01      	cmp	r4, #1
    2094:	d907      	bls.n	20a6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2096:	0021      	movs	r1, r4
    2098:	0028      	movs	r0, r5
    209a:	4b0a      	ldr	r3, [pc, #40]	; (20c4 <system_gclk_gen_get_hz+0x88>)
    209c:	4798      	blx	r3
    209e:	0005      	movs	r5, r0
    20a0:	e001      	b.n	20a6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    20a2:	3401      	adds	r4, #1
    20a4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20a6:	0028      	movs	r0, r5
    20a8:	bd70      	pop	{r4, r5, r6, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	40000c00 	.word	0x40000c00
    20b0:	00001c71 	.word	0x00001c71
    20b4:	40000c04 	.word	0x40000c04
    20b8:	00001d3d 	.word	0x00001d3d
    20bc:	40000c08 	.word	0x40000c08
    20c0:	00001cb1 	.word	0x00001cb1
    20c4:	000027c5 	.word	0x000027c5

000020c8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    20c8:	b510      	push	{r4, lr}
    20ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20cc:	4b06      	ldr	r3, [pc, #24]	; (20e8 <system_gclk_chan_enable+0x20>)
    20ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20d0:	4b06      	ldr	r3, [pc, #24]	; (20ec <system_gclk_chan_enable+0x24>)
    20d2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    20d4:	4a06      	ldr	r2, [pc, #24]	; (20f0 <system_gclk_chan_enable+0x28>)
    20d6:	8853      	ldrh	r3, [r2, #2]
    20d8:	2180      	movs	r1, #128	; 0x80
    20da:	01c9      	lsls	r1, r1, #7
    20dc:	430b      	orrs	r3, r1
    20de:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    20e0:	4b04      	ldr	r3, [pc, #16]	; (20f4 <system_gclk_chan_enable+0x2c>)
    20e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20e4:	bd10      	pop	{r4, pc}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	00001c71 	.word	0x00001c71
    20ec:	40000c02 	.word	0x40000c02
    20f0:	40000c00 	.word	0x40000c00
    20f4:	00001cb1 	.word	0x00001cb1

000020f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    20f8:	b510      	push	{r4, lr}
    20fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20fc:	4b0f      	ldr	r3, [pc, #60]	; (213c <system_gclk_chan_disable+0x44>)
    20fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2100:	4b0f      	ldr	r3, [pc, #60]	; (2140 <system_gclk_chan_disable+0x48>)
    2102:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2104:	4a0f      	ldr	r2, [pc, #60]	; (2144 <system_gclk_chan_disable+0x4c>)
    2106:	8853      	ldrh	r3, [r2, #2]
    2108:	051b      	lsls	r3, r3, #20
    210a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    210c:	8853      	ldrh	r3, [r2, #2]
    210e:	490e      	ldr	r1, [pc, #56]	; (2148 <system_gclk_chan_disable+0x50>)
    2110:	400b      	ands	r3, r1
    2112:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2114:	8853      	ldrh	r3, [r2, #2]
    2116:	490d      	ldr	r1, [pc, #52]	; (214c <system_gclk_chan_disable+0x54>)
    2118:	400b      	ands	r3, r1
    211a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    211c:	0011      	movs	r1, r2
    211e:	2280      	movs	r2, #128	; 0x80
    2120:	01d2      	lsls	r2, r2, #7
    2122:	884b      	ldrh	r3, [r1, #2]
    2124:	4213      	tst	r3, r2
    2126:	d1fc      	bne.n	2122 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2128:	4906      	ldr	r1, [pc, #24]	; (2144 <system_gclk_chan_disable+0x4c>)
    212a:	884a      	ldrh	r2, [r1, #2]
    212c:	0203      	lsls	r3, r0, #8
    212e:	4806      	ldr	r0, [pc, #24]	; (2148 <system_gclk_chan_disable+0x50>)
    2130:	4002      	ands	r2, r0
    2132:	4313      	orrs	r3, r2
    2134:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2136:	4b06      	ldr	r3, [pc, #24]	; (2150 <system_gclk_chan_disable+0x58>)
    2138:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    213a:	bd10      	pop	{r4, pc}
    213c:	00001c71 	.word	0x00001c71
    2140:	40000c02 	.word	0x40000c02
    2144:	40000c00 	.word	0x40000c00
    2148:	fffff0ff 	.word	0xfffff0ff
    214c:	ffffbfff 	.word	0xffffbfff
    2150:	00001cb1 	.word	0x00001cb1

00002154 <system_gclk_chan_set_config>:
{
    2154:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2156:	780c      	ldrb	r4, [r1, #0]
    2158:	0224      	lsls	r4, r4, #8
    215a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    215c:	4b02      	ldr	r3, [pc, #8]	; (2168 <system_gclk_chan_set_config+0x14>)
    215e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2160:	b2a4      	uxth	r4, r4
    2162:	4b02      	ldr	r3, [pc, #8]	; (216c <system_gclk_chan_set_config+0x18>)
    2164:	805c      	strh	r4, [r3, #2]
}
    2166:	bd10      	pop	{r4, pc}
    2168:	000020f9 	.word	0x000020f9
    216c:	40000c00 	.word	0x40000c00

00002170 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2170:	b510      	push	{r4, lr}
    2172:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2174:	4b06      	ldr	r3, [pc, #24]	; (2190 <system_gclk_chan_get_hz+0x20>)
    2176:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2178:	4b06      	ldr	r3, [pc, #24]	; (2194 <system_gclk_chan_get_hz+0x24>)
    217a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    217c:	4b06      	ldr	r3, [pc, #24]	; (2198 <system_gclk_chan_get_hz+0x28>)
    217e:	885c      	ldrh	r4, [r3, #2]
    2180:	0524      	lsls	r4, r4, #20
    2182:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2184:	4b05      	ldr	r3, [pc, #20]	; (219c <system_gclk_chan_get_hz+0x2c>)
    2186:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2188:	0020      	movs	r0, r4
    218a:	4b05      	ldr	r3, [pc, #20]	; (21a0 <system_gclk_chan_get_hz+0x30>)
    218c:	4798      	blx	r3
}
    218e:	bd10      	pop	{r4, pc}
    2190:	00001c71 	.word	0x00001c71
    2194:	40000c02 	.word	0x40000c02
    2198:	40000c00 	.word	0x40000c00
    219c:	00001cb1 	.word	0x00001cb1
    21a0:	0000203d 	.word	0x0000203d

000021a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    21a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    21a6:	78d3      	ldrb	r3, [r2, #3]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d135      	bne.n	2218 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    21ac:	7813      	ldrb	r3, [r2, #0]
    21ae:	2b80      	cmp	r3, #128	; 0x80
    21b0:	d029      	beq.n	2206 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    21b2:	061b      	lsls	r3, r3, #24
    21b4:	2480      	movs	r4, #128	; 0x80
    21b6:	0264      	lsls	r4, r4, #9
    21b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    21ba:	7854      	ldrb	r4, [r2, #1]
    21bc:	2502      	movs	r5, #2
    21be:	43ac      	bics	r4, r5
    21c0:	d106      	bne.n	21d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    21c2:	7894      	ldrb	r4, [r2, #2]
    21c4:	2c00      	cmp	r4, #0
    21c6:	d120      	bne.n	220a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    21c8:	2480      	movs	r4, #128	; 0x80
    21ca:	02a4      	lsls	r4, r4, #10
    21cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    21ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21d0:	7854      	ldrb	r4, [r2, #1]
    21d2:	3c01      	subs	r4, #1
    21d4:	2c01      	cmp	r4, #1
    21d6:	d91c      	bls.n	2212 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21d8:	040d      	lsls	r5, r1, #16
    21da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21dc:	24a0      	movs	r4, #160	; 0xa0
    21de:	05e4      	lsls	r4, r4, #23
    21e0:	432c      	orrs	r4, r5
    21e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21e8:	24d0      	movs	r4, #208	; 0xd0
    21ea:	0624      	lsls	r4, r4, #24
    21ec:	432c      	orrs	r4, r5
    21ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    21f2:	78d4      	ldrb	r4, [r2, #3]
    21f4:	2c00      	cmp	r4, #0
    21f6:	d122      	bne.n	223e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    21f8:	035b      	lsls	r3, r3, #13
    21fa:	d51c      	bpl.n	2236 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    21fc:	7893      	ldrb	r3, [r2, #2]
    21fe:	2b01      	cmp	r3, #1
    2200:	d01e      	beq.n	2240 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2202:	6141      	str	r1, [r0, #20]
    2204:	e017      	b.n	2236 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2206:	2300      	movs	r3, #0
    2208:	e7d7      	b.n	21ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    220a:	24c0      	movs	r4, #192	; 0xc0
    220c:	02e4      	lsls	r4, r4, #11
    220e:	4323      	orrs	r3, r4
    2210:	e7dd      	b.n	21ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2212:	4c0d      	ldr	r4, [pc, #52]	; (2248 <_system_pinmux_config+0xa4>)
    2214:	4023      	ands	r3, r4
    2216:	e7df      	b.n	21d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2218:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    221a:	040c      	lsls	r4, r1, #16
    221c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    221e:	23a0      	movs	r3, #160	; 0xa0
    2220:	05db      	lsls	r3, r3, #23
    2222:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2224:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2226:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2228:	23d0      	movs	r3, #208	; 0xd0
    222a:	061b      	lsls	r3, r3, #24
    222c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    222e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2230:	78d3      	ldrb	r3, [r2, #3]
    2232:	2b00      	cmp	r3, #0
    2234:	d103      	bne.n	223e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2236:	7853      	ldrb	r3, [r2, #1]
    2238:	3b01      	subs	r3, #1
    223a:	2b01      	cmp	r3, #1
    223c:	d902      	bls.n	2244 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    223e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2240:	6181      	str	r1, [r0, #24]
    2242:	e7f8      	b.n	2236 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2244:	6081      	str	r1, [r0, #8]
}
    2246:	e7fa      	b.n	223e <_system_pinmux_config+0x9a>
    2248:	fffbffff 	.word	0xfffbffff

0000224c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    224c:	b510      	push	{r4, lr}
    224e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2250:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2252:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2254:	2900      	cmp	r1, #0
    2256:	d104      	bne.n	2262 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2258:	0943      	lsrs	r3, r0, #5
    225a:	01db      	lsls	r3, r3, #7
    225c:	4905      	ldr	r1, [pc, #20]	; (2274 <system_pinmux_pin_set_config+0x28>)
    225e:	468c      	mov	ip, r1
    2260:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2262:	241f      	movs	r4, #31
    2264:	4020      	ands	r0, r4
    2266:	2101      	movs	r1, #1
    2268:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    226a:	0018      	movs	r0, r3
    226c:	4b02      	ldr	r3, [pc, #8]	; (2278 <system_pinmux_pin_set_config+0x2c>)
    226e:	4798      	blx	r3
}
    2270:	bd10      	pop	{r4, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	41004400 	.word	0x41004400
    2278:	000021a5 	.word	0x000021a5

0000227c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    227c:	4770      	bx	lr
	...

00002280 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2280:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2282:	4b05      	ldr	r3, [pc, #20]	; (2298 <system_init+0x18>)
    2284:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2286:	4b05      	ldr	r3, [pc, #20]	; (229c <system_init+0x1c>)
    2288:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    228a:	4b05      	ldr	r3, [pc, #20]	; (22a0 <system_init+0x20>)
    228c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    228e:	4b05      	ldr	r3, [pc, #20]	; (22a4 <system_init+0x24>)
    2290:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2292:	4b05      	ldr	r3, [pc, #20]	; (22a8 <system_init+0x28>)
    2294:	4798      	blx	r3
}
    2296:	bd10      	pop	{r4, pc}
    2298:	00001e85 	.word	0x00001e85
    229c:	00001ce1 	.word	0x00001ce1
    22a0:	0000227d 	.word	0x0000227d
    22a4:	0000227d 	.word	0x0000227d
    22a8:	0000227d 	.word	0x0000227d

000022ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    22ac:	e7fe      	b.n	22ac <Dummy_Handler>
	...

000022b0 <Reset_Handler>:
{
    22b0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    22b2:	4a1a      	ldr	r2, [pc, #104]	; (231c <Reset_Handler+0x6c>)
    22b4:	4b1a      	ldr	r3, [pc, #104]	; (2320 <Reset_Handler+0x70>)
    22b6:	429a      	cmp	r2, r3
    22b8:	d011      	beq.n	22de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    22ba:	001a      	movs	r2, r3
    22bc:	4b19      	ldr	r3, [pc, #100]	; (2324 <Reset_Handler+0x74>)
    22be:	429a      	cmp	r2, r3
    22c0:	d20d      	bcs.n	22de <Reset_Handler+0x2e>
    22c2:	4a19      	ldr	r2, [pc, #100]	; (2328 <Reset_Handler+0x78>)
    22c4:	3303      	adds	r3, #3
    22c6:	1a9b      	subs	r3, r3, r2
    22c8:	089b      	lsrs	r3, r3, #2
    22ca:	3301      	adds	r3, #1
    22cc:	009b      	lsls	r3, r3, #2
    22ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    22d0:	4813      	ldr	r0, [pc, #76]	; (2320 <Reset_Handler+0x70>)
    22d2:	4912      	ldr	r1, [pc, #72]	; (231c <Reset_Handler+0x6c>)
    22d4:	588c      	ldr	r4, [r1, r2]
    22d6:	5084      	str	r4, [r0, r2]
    22d8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    22da:	429a      	cmp	r2, r3
    22dc:	d1fa      	bne.n	22d4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    22de:	4a13      	ldr	r2, [pc, #76]	; (232c <Reset_Handler+0x7c>)
    22e0:	4b13      	ldr	r3, [pc, #76]	; (2330 <Reset_Handler+0x80>)
    22e2:	429a      	cmp	r2, r3
    22e4:	d20a      	bcs.n	22fc <Reset_Handler+0x4c>
    22e6:	43d3      	mvns	r3, r2
    22e8:	4911      	ldr	r1, [pc, #68]	; (2330 <Reset_Handler+0x80>)
    22ea:	185b      	adds	r3, r3, r1
    22ec:	2103      	movs	r1, #3
    22ee:	438b      	bics	r3, r1
    22f0:	3304      	adds	r3, #4
    22f2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    22f4:	2100      	movs	r1, #0
    22f6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    22f8:	4293      	cmp	r3, r2
    22fa:	d1fc      	bne.n	22f6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    22fc:	4a0d      	ldr	r2, [pc, #52]	; (2334 <Reset_Handler+0x84>)
    22fe:	21ff      	movs	r1, #255	; 0xff
    2300:	4b0d      	ldr	r3, [pc, #52]	; (2338 <Reset_Handler+0x88>)
    2302:	438b      	bics	r3, r1
    2304:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2306:	4a0d      	ldr	r2, [pc, #52]	; (233c <Reset_Handler+0x8c>)
    2308:	6853      	ldr	r3, [r2, #4]
    230a:	397f      	subs	r1, #127	; 0x7f
    230c:	430b      	orrs	r3, r1
    230e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2310:	4b0b      	ldr	r3, [pc, #44]	; (2340 <Reset_Handler+0x90>)
    2312:	4798      	blx	r3
        main();
    2314:	4b0b      	ldr	r3, [pc, #44]	; (2344 <Reset_Handler+0x94>)
    2316:	4798      	blx	r3
    2318:	e7fe      	b.n	2318 <Reset_Handler+0x68>
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	00002fbc 	.word	0x00002fbc
    2320:	20000000 	.word	0x20000000
    2324:	2000002c 	.word	0x2000002c
    2328:	20000004 	.word	0x20000004
    232c:	2000002c 	.word	0x2000002c
    2330:	2000012c 	.word	0x2000012c
    2334:	e000ed00 	.word	0xe000ed00
    2338:	00000000 	.word	0x00000000
    233c:	41004000 	.word	0x41004000
    2340:	00002b05 	.word	0x00002b05
    2344:	000024c9 	.word	0x000024c9

00002348 <set_state>:
/*
 * @brief: changing the state variable at one single point. If system is in start state, just init is allowed.
 * @param: new system state of type system_states.
 * @returns: 0 when state is successfully set, 1 if change is not allowed
 */
int set_state(System_State_t new_state) {
    2348:	b510      	push	{r4, lr}
	
	if(sSystemState == start && new_state != init){
    234a:	4b09      	ldr	r3, [pc, #36]	; (2370 <set_state+0x28>)
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	2b00      	cmp	r3, #0
    2350:	d101      	bne.n	2356 <set_state+0xe>
    2352:	2803      	cmp	r0, #3
    2354:	d107      	bne.n	2366 <set_state+0x1e>
        #if LOGS > 0
        rprintf("LOG: new state failed, not init.");
        #endif
		return EXIT_FAILURE;
	} else {
		sSystemState = new_state;
    2356:	4b06      	ldr	r3, [pc, #24]	; (2370 <set_state+0x28>)
    2358:	7018      	strb	r0, [r3, #0]
        #if LOGS > 0
        rprintf("LOG: new state = %d", sSystemState);
    235a:	0001      	movs	r1, r0
    235c:	4805      	ldr	r0, [pc, #20]	; (2374 <set_state+0x2c>)
    235e:	4b06      	ldr	r3, [pc, #24]	; (2378 <set_state+0x30>)
    2360:	4798      	blx	r3
        #endif
		return EXIT_SUCCESS;
    2362:	2000      	movs	r0, #0
	}
}
    2364:	bd10      	pop	{r4, pc}
        rprintf("LOG: new state failed, not init.");
    2366:	4805      	ldr	r0, [pc, #20]	; (237c <set_state+0x34>)
    2368:	4b03      	ldr	r3, [pc, #12]	; (2378 <set_state+0x30>)
    236a:	4798      	blx	r3
		return EXIT_FAILURE;
    236c:	2001      	movs	r0, #1
    236e:	e7f9      	b.n	2364 <set_state+0x1c>
    2370:	200000b4 	.word	0x200000b4
    2374:	00002ef4 	.word	0x00002ef4
    2378:	00001a01 	.word	0x00001a01
    237c:	00002ed0 	.word	0x00002ed0

00002380 <get_state>:
 * @brief: get the actual system state at one single point.
 * @returns: current state of type system_states
 */
System_State_t get_state(void) {
	
	return sSystemState;
    2380:	4b01      	ldr	r3, [pc, #4]	; (2388 <get_state+0x8>)
    2382:	7818      	ldrb	r0, [r3, #0]
	
}
    2384:	4770      	bx	lr
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	200000b4 	.word	0x200000b4

0000238c <test_loop>:
        test_loop();
    #endif
	}
}

void test_loop(){
    238c:	b510      	push	{r4, lr}

        delay_ms(1000);
    238e:	20fa      	movs	r0, #250	; 0xfa
    2390:	0080      	lsls	r0, r0, #2
    2392:	4b39      	ldr	r3, [pc, #228]	; (2478 <test_loop+0xec>)
    2394:	4798      	blx	r3
        
        if(sSystemState == init) {
    2396:	4b39      	ldr	r3, [pc, #228]	; (247c <test_loop+0xf0>)
    2398:	781b      	ldrb	r3, [r3, #0]
    239a:	2b03      	cmp	r3, #3
    239c:	d007      	beq.n	23ae <test_loop+0x22>
            rprintf("INIT");
        }
        switch(sSystemState) {
    239e:	4b37      	ldr	r3, [pc, #220]	; (247c <test_loop+0xf0>)
    23a0:	781a      	ldrb	r2, [r3, #0]
    23a2:	2a0c      	cmp	r2, #12
    23a4:	d80a      	bhi.n	23bc <test_loop+0x30>
    23a6:	0093      	lsls	r3, r2, #2
    23a8:	4a35      	ldr	r2, [pc, #212]	; (2480 <test_loop+0xf4>)
    23aa:	58d3      	ldr	r3, [r2, r3]
    23ac:	469f      	mov	pc, r3
            rprintf("INIT");
    23ae:	4835      	ldr	r0, [pc, #212]	; (2484 <test_loop+0xf8>)
    23b0:	4b35      	ldr	r3, [pc, #212]	; (2488 <test_loop+0xfc>)
    23b2:	4798      	blx	r3
    23b4:	e7f3      	b.n	239e <test_loop+0x12>
            case(start):
            case(idle):
            case(busy):
                rprintf("IDLE\r\n");
    23b6:	4835      	ldr	r0, [pc, #212]	; (248c <test_loop+0x100>)
    23b8:	4b33      	ldr	r3, [pc, #204]	; (2488 <test_loop+0xfc>)
    23ba:	4798      	blx	r3
                break;
            case(success):
                plc_com_success();
            break;
        }
}
    23bc:	bd10      	pop	{r4, pc}
                rprintf("INIT called\r\n");
    23be:	4834      	ldr	r0, [pc, #208]	; (2490 <test_loop+0x104>)
    23c0:	4b31      	ldr	r3, [pc, #196]	; (2488 <test_loop+0xfc>)
    23c2:	4798      	blx	r3
                delay_ms(2000);
    23c4:	20fa      	movs	r0, #250	; 0xfa
    23c6:	00c0      	lsls	r0, r0, #3
    23c8:	4b2b      	ldr	r3, [pc, #172]	; (2478 <test_loop+0xec>)
    23ca:	4798      	blx	r3
                set_state(success);
    23cc:	200c      	movs	r0, #12
    23ce:	4b31      	ldr	r3, [pc, #196]	; (2494 <test_loop+0x108>)
    23d0:	4798      	blx	r3
                break;
    23d2:	e7f3      	b.n	23bc <test_loop+0x30>
                rprintf("PICK called\r\n");
    23d4:	4830      	ldr	r0, [pc, #192]	; (2498 <test_loop+0x10c>)
    23d6:	4b2c      	ldr	r3, [pc, #176]	; (2488 <test_loop+0xfc>)
    23d8:	4798      	blx	r3
                delay_ms(2000);
    23da:	20fa      	movs	r0, #250	; 0xfa
    23dc:	00c0      	lsls	r0, r0, #3
    23de:	4b26      	ldr	r3, [pc, #152]	; (2478 <test_loop+0xec>)
    23e0:	4798      	blx	r3
                set_state(success);
    23e2:	200c      	movs	r0, #12
    23e4:	4b2b      	ldr	r3, [pc, #172]	; (2494 <test_loop+0x108>)
    23e6:	4798      	blx	r3
                break;
    23e8:	e7e8      	b.n	23bc <test_loop+0x30>
                rprintf("PLACE called\r\n");
    23ea:	482c      	ldr	r0, [pc, #176]	; (249c <test_loop+0x110>)
    23ec:	4b26      	ldr	r3, [pc, #152]	; (2488 <test_loop+0xfc>)
    23ee:	4798      	blx	r3
                delay_ms(2000);
    23f0:	20fa      	movs	r0, #250	; 0xfa
    23f2:	00c0      	lsls	r0, r0, #3
    23f4:	4b20      	ldr	r3, [pc, #128]	; (2478 <test_loop+0xec>)
    23f6:	4798      	blx	r3
                set_state(success);
    23f8:	200c      	movs	r0, #12
    23fa:	4b26      	ldr	r3, [pc, #152]	; (2494 <test_loop+0x108>)
    23fc:	4798      	blx	r3
                break;
    23fe:	e7dd      	b.n	23bc <test_loop+0x30>
                rprintf("TOOL called\r\n");
    2400:	4827      	ldr	r0, [pc, #156]	; (24a0 <test_loop+0x114>)
    2402:	4b21      	ldr	r3, [pc, #132]	; (2488 <test_loop+0xfc>)
    2404:	4798      	blx	r3
                delay_ms(2000);
    2406:	20fa      	movs	r0, #250	; 0xfa
    2408:	00c0      	lsls	r0, r0, #3
    240a:	4b1b      	ldr	r3, [pc, #108]	; (2478 <test_loop+0xec>)
    240c:	4798      	blx	r3
                set_state(success);
    240e:	200c      	movs	r0, #12
    2410:	4b20      	ldr	r3, [pc, #128]	; (2494 <test_loop+0x108>)
    2412:	4798      	blx	r3
                break;
    2414:	e7d2      	b.n	23bc <test_loop+0x30>
                rprintf("STAMP called\r\n");
    2416:	4823      	ldr	r0, [pc, #140]	; (24a4 <test_loop+0x118>)
    2418:	4b1b      	ldr	r3, [pc, #108]	; (2488 <test_loop+0xfc>)
    241a:	4798      	blx	r3
                delay_ms(2000);
    241c:	20fa      	movs	r0, #250	; 0xfa
    241e:	00c0      	lsls	r0, r0, #3
    2420:	4b15      	ldr	r3, [pc, #84]	; (2478 <test_loop+0xec>)
    2422:	4798      	blx	r3
                set_state(success);
    2424:	200c      	movs	r0, #12
    2426:	4b1b      	ldr	r3, [pc, #108]	; (2494 <test_loop+0x108>)
    2428:	4798      	blx	r3
                break;
    242a:	e7c7      	b.n	23bc <test_loop+0x30>
                rprintf("INK called\r\n");
    242c:	481e      	ldr	r0, [pc, #120]	; (24a8 <test_loop+0x11c>)
    242e:	4b16      	ldr	r3, [pc, #88]	; (2488 <test_loop+0xfc>)
    2430:	4798      	blx	r3
                delay_ms(2000);
    2432:	20fa      	movs	r0, #250	; 0xfa
    2434:	00c0      	lsls	r0, r0, #3
    2436:	4b10      	ldr	r3, [pc, #64]	; (2478 <test_loop+0xec>)
    2438:	4798      	blx	r3
                set_state(success);
    243a:	200c      	movs	r0, #12
    243c:	4b15      	ldr	r3, [pc, #84]	; (2494 <test_loop+0x108>)
    243e:	4798      	blx	r3
                break;
    2440:	e7bc      	b.n	23bc <test_loop+0x30>
                rprintf("CLOSE LID called\r\n");
    2442:	481a      	ldr	r0, [pc, #104]	; (24ac <test_loop+0x120>)
    2444:	4b10      	ldr	r3, [pc, #64]	; (2488 <test_loop+0xfc>)
    2446:	4798      	blx	r3
                delay_ms(2000);
    2448:	20fa      	movs	r0, #250	; 0xfa
    244a:	00c0      	lsls	r0, r0, #3
    244c:	4b0a      	ldr	r3, [pc, #40]	; (2478 <test_loop+0xec>)
    244e:	4798      	blx	r3
                set_state(success);
    2450:	200c      	movs	r0, #12
    2452:	4b10      	ldr	r3, [pc, #64]	; (2494 <test_loop+0x108>)
    2454:	4798      	blx	r3
                break;
    2456:	e7b1      	b.n	23bc <test_loop+0x30>
                rprintf("FORCE called\r\n");
    2458:	4815      	ldr	r0, [pc, #84]	; (24b0 <test_loop+0x124>)
    245a:	4b0b      	ldr	r3, [pc, #44]	; (2488 <test_loop+0xfc>)
    245c:	4798      	blx	r3
                plc_com_transmit_force(
    245e:	4b15      	ldr	r3, [pc, #84]	; (24b4 <test_loop+0x128>)
    2460:	4798      	blx	r3
    2462:	4b15      	ldr	r3, [pc, #84]	; (24b8 <test_loop+0x12c>)
    2464:	4798      	blx	r3
                break;
    2466:	e7a9      	b.n	23bc <test_loop+0x30>
                stepper_music_play(notes1, 15);
    2468:	210f      	movs	r1, #15
    246a:	4814      	ldr	r0, [pc, #80]	; (24bc <test_loop+0x130>)
    246c:	4b14      	ldr	r3, [pc, #80]	; (24c0 <test_loop+0x134>)
    246e:	4798      	blx	r3
                break;
    2470:	e7a4      	b.n	23bc <test_loop+0x30>
                plc_com_success();
    2472:	4b14      	ldr	r3, [pc, #80]	; (24c4 <test_loop+0x138>)
    2474:	4798      	blx	r3
}
    2476:	e7a1      	b.n	23bc <test_loop+0x30>
    2478:	00000171 	.word	0x00000171
    247c:	200000b4 	.word	0x200000b4
    2480:	00002e9c 	.word	0x00002e9c
    2484:	00002f08 	.word	0x00002f08
    2488:	00001a01 	.word	0x00001a01
    248c:	00002f10 	.word	0x00002f10
    2490:	00002f18 	.word	0x00002f18
    2494:	00002349 	.word	0x00002349
    2498:	00002f28 	.word	0x00002f28
    249c:	00002f38 	.word	0x00002f38
    24a0:	00002f48 	.word	0x00002f48
    24a4:	00002f58 	.word	0x00002f58
    24a8:	00002f68 	.word	0x00002f68
    24ac:	00002f78 	.word	0x00002f78
    24b0:	00002f8c 	.word	0x00002f8c
    24b4:	000015f9 	.word	0x000015f9
    24b8:	00001681 	.word	0x00001681
    24bc:	2000000c 	.word	0x2000000c
    24c0:	00001b81 	.word	0x00001b81
    24c4:	00001665 	.word	0x00001665

000024c8 <main>:
{
    24c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ca:	46c6      	mov	lr, r8
    24cc:	b500      	push	{lr}
    24ce:	b08e      	sub	sp, #56	; 0x38
	system_init();
    24d0:	4b9a      	ldr	r3, [pc, #616]	; (273c <main+0x274>)
    24d2:	4798      	blx	r3
	delay_init();
    24d4:	4b9a      	ldr	r3, [pc, #616]	; (2740 <main+0x278>)
    24d6:	4798      	blx	r3
	config->powersave  = false;
    24d8:	ac01      	add	r4, sp, #4
    24da:	2600      	movs	r6, #0
    24dc:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    24de:	2301      	movs	r3, #1
    24e0:	4698      	mov	r8, r3
    24e2:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    24e4:	2302      	movs	r3, #2
    24e6:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(MOTOR_CONTROLLER_DIR_PIN, &config_port_pin);
    24e8:	0021      	movs	r1, r4
    24ea:	2014      	movs	r0, #20
    24ec:	4d95      	ldr	r5, [pc, #596]	; (2744 <main+0x27c>)
    24ee:	47a8      	blx	r5
	port_pin_set_config(MOTOR_CONTROLLER_STP_PIN, &config_port_pin);
    24f0:	0021      	movs	r1, r4
    24f2:	2015      	movs	r0, #21
    24f4:	47a8      	blx	r5
	port_pin_set_config(MOTOR_CONTROLLER_SS_PIN, &config_port_pin);
    24f6:	0021      	movs	r1, r4
    24f8:	2026      	movs	r0, #38	; 0x26
    24fa:	47a8      	blx	r5
	port_pin_set_config(MAGNET_SWITCH_PIN, &config_port_pin);
    24fc:	0021      	movs	r1, r4
    24fe:	2016      	movs	r0, #22
    2500:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2502:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2504:	4643      	mov	r3, r8
    2506:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(Z_AXIS_ZERO_SWITCH_PIN, &config_port_pin);
    2508:	0021      	movs	r1, r4
    250a:	2017      	movs	r0, #23
    250c:	47a8      	blx	r5
	slave->ss_pin          = config->ss_pin;
    250e:	4f8e      	ldr	r7, [pc, #568]	; (2748 <main+0x280>)
    2510:	2326      	movs	r3, #38	; 0x26
    2512:	703b      	strb	r3, [r7, #0]
	slave->address_enabled = config->address_enabled;
    2514:	707e      	strb	r6, [r7, #1]
	slave->address         = config->address;
    2516:	70be      	strb	r6, [r7, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2518:	4643      	mov	r3, r8
    251a:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    251c:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    251e:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2520:	0021      	movs	r1, r4
    2522:	2026      	movs	r0, #38	; 0x26
    2524:	47a8      	blx	r5
	port_pin_set_output_level(slave->ss_pin, true);
    2526:	783a      	ldrb	r2, [r7, #0]
	uint8_t group_index = (gpio_pin / 32);
    2528:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    252a:	09d0      	lsrs	r0, r2, #7
		return NULL;
    252c:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
    252e:	2800      	cmp	r0, #0
    2530:	d102      	bne.n	2538 <main+0x70>
		return &(ports[port_index]->Group[group_index]);
    2532:	01db      	lsls	r3, r3, #7
    2534:	4985      	ldr	r1, [pc, #532]	; (274c <main+0x284>)
    2536:	1859      	adds	r1, r3, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2538:	231f      	movs	r3, #31
    253a:	4013      	ands	r3, r2
    253c:	2201      	movs	r2, #1
    253e:	0010      	movs	r0, r2
    2540:	4098      	lsls	r0, r3
		port_base->OUTSET.reg = pin_mask;
    2542:	6188      	str	r0, [r1, #24]
	config->mode             = SPI_MODE_MASTER;
    2544:	ac01      	add	r4, sp, #4
    2546:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2548:	2300      	movs	r3, #0
    254a:	9302      	str	r3, [sp, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    254c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    254e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2550:	74a2      	strb	r2, [r4, #18]
	config->generator_source = GCLK_GENERATOR_0;
    2552:	321f      	adds	r2, #31
    2554:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2556:	3a14      	subs	r2, #20
    2558:	2100      	movs	r1, #0
    255a:	a806      	add	r0, sp, #24
    255c:	4b7c      	ldr	r3, [pc, #496]	; (2750 <main+0x288>)
    255e:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    2560:	4b7c      	ldr	r3, [pc, #496]	; (2754 <main+0x28c>)
    2562:	6163      	str	r3, [r4, #20]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_3;    //Acording to datasheet of the board
    2564:	23c0      	movs	r3, #192	; 0xc0
    2566:	059b      	lsls	r3, r3, #22
    2568:	60a3      	str	r3, [r4, #8]
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    256a:	2380      	movs	r3, #128	; 0x80
    256c:	025b      	lsls	r3, r3, #9
    256e:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
    2570:	4b79      	ldr	r3, [pc, #484]	; (2758 <main+0x290>)
    2572:	6263      	str	r3, [r4, #36]	; 0x24
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    2574:	2301      	movs	r3, #1
    2576:	425b      	negs	r3, r3
    2578:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
    257a:	4b78      	ldr	r3, [pc, #480]	; (275c <main+0x294>)
    257c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
    257e:	4b78      	ldr	r3, [pc, #480]	; (2760 <main+0x298>)
    2580:	6323      	str	r3, [r4, #48]	; 0x30
	spi_init(&gSpiMasterInstance, EXT1_SPI_MODULE, &config_spi_master);
    2582:	4d78      	ldr	r5, [pc, #480]	; (2764 <main+0x29c>)
    2584:	0022      	movs	r2, r4
    2586:	4978      	ldr	r1, [pc, #480]	; (2768 <main+0x2a0>)
    2588:	0028      	movs	r0, r5
    258a:	4b78      	ldr	r3, [pc, #480]	; (276c <main+0x2a4>)
    258c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    258e:	682b      	ldr	r3, [r5, #0]
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    2590:	8a1a      	ldrh	r2, [r3, #16]
	while (spi_is_syncing(module)) {
    2592:	b212      	sxth	r2, r2
    2594:	2a00      	cmp	r2, #0
    2596:	dbfb      	blt.n	2590 <main+0xc8>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2598:	681a      	ldr	r2, [r3, #0]
    259a:	2102      	movs	r1, #2
    259c:	430a      	orrs	r2, r1
    259e:	601a      	str	r2, [r3, #0]
	stepper_motor_config.direction_set = DRV_DIRPIN;
    25a0:	ac01      	add	r4, sp, #4
    25a2:	2300      	movs	r3, #0
    25a4:	70a3      	strb	r3, [r4, #2]
	stepper_motor_config.step_mode = DRV_MODE_1_4;
    25a6:	2010      	movs	r0, #16
    25a8:	70e0      	strb	r0, [r4, #3]
	stepper_motor_config.stall_detect = DRV_EXSTALL_INTERNAL;
    25aa:	7123      	strb	r3, [r4, #4]
	stepper_motor_config.isense_gain = DRV_ISGAIN_40;
    25ac:	22c0      	movs	r2, #192	; 0xc0
    25ae:	0092      	lsls	r2, r2, #2
    25b0:	80e2      	strh	r2, [r4, #6]
	stepper_motor_config.dead_time_insert = DRV_DTIME_850ns; //Check if change is needed
    25b2:	22c0      	movs	r2, #192	; 0xc0
    25b4:	0112      	lsls	r2, r2, #4
    25b6:	8122      	strh	r2, [r4, #8]
	stepper_motor_config.drv_torque = 0x96;
    25b8:	2296      	movs	r2, #150	; 0x96
    25ba:	72a2      	strb	r2, [r4, #10]
	stepper_motor_config.backemf_sample_th = DRV_SMPLTH_200us; //Check if change is needed
    25bc:	326b      	adds	r2, #107	; 0x6b
    25be:	32ff      	adds	r2, #255	; 0xff
    25c0:	81a2      	strh	r2, [r4, #12]
	stepper_motor_config.drv_toff = 0x80; // Check if change is needed
    25c2:	317e      	adds	r1, #126	; 0x7e
    25c4:	73a1      	strb	r1, [r4, #14]
	stepper_motor_config.pwm_mode = DRV_PWMMODE_INTERNAL;
    25c6:	2500      	movs	r5, #0
    25c8:	8223      	strh	r3, [r4, #16]
	stepper_motor_config.drv_tblank = 0xFF; //Check if change is needed
    25ca:	26ff      	movs	r6, #255	; 0xff
    25cc:	74a6      	strb	r6, [r4, #18]
	stepper_motor_config.adaptive_blanking_time= DRV_ABT_DISABLE;
    25ce:	82a3      	strh	r3, [r4, #20]
	stepper_motor_config.drv_tdecay = 0x10; //Check if check is needed
    25d0:	75a0      	strb	r0, [r4, #22]
	stepper_motor_config.decay_mode = DRV_DECMOD_FORCE_AUTOMIXED; //Check if change is needed
    25d2:	380b      	subs	r0, #11
    25d4:	75e0      	strb	r0, [r4, #23]
	stepper_motor_config.ocp_threshold = DRV_OCPTH_250mV;
    25d6:	77a5      	strb	r5, [r4, #30]
	stepper_motor_config.ocp_deglitch_time = DRV_OCPDEG_4us;
    25d8:	3003      	adds	r0, #3
    25da:	77e0      	strb	r0, [r4, #31]
	stepper_motor_config.ls_drive_time = DRV_TDRIVEN_1us;
    25dc:	3018      	adds	r0, #24
    25de:	5420      	strb	r0, [r4, r0]
	stepper_motor_config.hs_drive_time = DRV_TDRIVEP_1us;
    25e0:	3001      	adds	r0, #1
    25e2:	5421      	strb	r1, [r4, r0]
	stepper_motor_config.ls_current = DRV_IDRIVEN_100mA;
    25e4:	8463      	strh	r3, [r4, #34]	; 0x22
	stepper_motor_config.hs_current = DRV_IDRIVEP_100mA;
    25e6:	84a3      	strh	r3, [r4, #36]	; 0x24
	stepper_motor_config.drv_sdthr = 0x40;
    25e8:	3940      	subs	r1, #64	; 0x40
    25ea:	7621      	strb	r1, [r4, #24]
	stepper_motor_config.stall_count = DRV_SDCNT_4;
    25ec:	8362      	strh	r2, [r4, #26]
	stepper_motor_config.back_emf_div = DRV_VDIV_32;
    25ee:	83a3      	strh	r3, [r4, #28]
	drv_ctrl_init(&stepper_motor_config);
    25f0:	0020      	movs	r0, r4
    25f2:	4b5f      	ldr	r3, [pc, #380]	; (2770 <main+0x2a8>)
    25f4:	4798      	blx	r3
	drv_ctrl_enable();
    25f6:	4b5f      	ldr	r3, [pc, #380]	; (2774 <main+0x2ac>)
    25f8:	4798      	blx	r3
	adc_get_config_defaults(&config_adc);
    25fa:	0020      	movs	r0, r4
    25fc:	4b5e      	ldr	r3, [pc, #376]	; (2778 <main+0x2b0>)
    25fe:	4798      	blx	r3
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND; //Can be muxed to external pin
    2600:	23c0      	movs	r3, #192	; 0xc0
    2602:	015b      	lsls	r3, r3, #5
    2604:	81e3      	strh	r3, [r4, #14]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    2606:	7325      	strb	r5, [r4, #12]
	config_adc.reference = ADC_REFERENCE_INT1V;
    2608:	7065      	strb	r5, [r4, #1]
    config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_1024;
    260a:	230a      	movs	r3, #10
    260c:	7423      	strb	r3, [r4, #16]
	adc_init(&gAdcInstance, ADC, &config_adc);
    260e:	4d5b      	ldr	r5, [pc, #364]	; (277c <main+0x2b4>)
    2610:	0022      	movs	r2, r4
    2612:	495b      	ldr	r1, [pc, #364]	; (2780 <main+0x2b8>)
    2614:	0028      	movs	r0, r5
    2616:	4b5b      	ldr	r3, [pc, #364]	; (2784 <main+0x2bc>)
    2618:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    261a:	682b      	ldr	r3, [r5, #0]
    261c:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    261e:	b252      	sxtb	r2, r2
    2620:	2a00      	cmp	r2, #0
    2622:	dbfb      	blt.n	261c <main+0x154>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2624:	220f      	movs	r2, #15
    2626:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2628:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    262a:	781a      	ldrb	r2, [r3, #0]
    262c:	2102      	movs	r1, #2
    262e:	430a      	orrs	r2, r1
    2630:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2632:	4b52      	ldr	r3, [pc, #328]	; (277c <main+0x2b4>)
    2634:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2636:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2638:	b25b      	sxtb	r3, r3
    263a:	2b00      	cmp	r3, #0
    263c:	dbfb      	blt.n	2636 <main+0x16e>
	config->data_order       = USART_DATAORDER_LSB;
    263e:	ab01      	add	r3, sp, #4
    2640:	2280      	movs	r2, #128	; 0x80
    2642:	05d2      	lsls	r2, r2, #23
    2644:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2646:	2200      	movs	r2, #0
    2648:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    264a:	21ff      	movs	r1, #255	; 0xff
    264c:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    264e:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2650:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    2652:	2196      	movs	r1, #150	; 0x96
    2654:	0189      	lsls	r1, r1, #6
    2656:	6119      	str	r1, [r3, #16]
	config->receiver_enable  = true;
    2658:	2101      	movs	r1, #1
    265a:	7519      	strb	r1, [r3, #20]
	config->transmitter_enable = true;
    265c:	7559      	strb	r1, [r3, #21]
	config->clock_polarity_inverted = false;
    265e:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
    2660:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
    2662:	619a      	str	r2, [r3, #24]
	config->run_in_standby   = false;
    2664:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
    2666:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = EXT1_UART_SERCOM_MUX_SETTING;
    2668:	2280      	movs	r2, #128	; 0x80
    266a:	0352      	lsls	r2, r2, #13
    266c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EXT1_UART_SERCOM_PINMUX_PAD0;
    266e:	4a46      	ldr	r2, [pc, #280]	; (2788 <main+0x2c0>)
    2670:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = EXT1_UART_SERCOM_PINMUX_PAD1;
    2672:	4a46      	ldr	r2, [pc, #280]	; (278c <main+0x2c4>)
    2674:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = EXT1_UART_SERCOM_PINMUX_PAD2;
    2676:	2201      	movs	r2, #1
    2678:	4252      	negs	r2, r2
    267a:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = EXT1_UART_SERCOM_PINMUX_PAD3;
    267c:	62da      	str	r2, [r3, #44]	; 0x2c
	while(usart_init(&gUsartInstance, EXT1_UART_MODULE, &config_usart) != STATUS_OK){
    267e:	4d44      	ldr	r5, [pc, #272]	; (2790 <main+0x2c8>)
    2680:	4c44      	ldr	r4, [pc, #272]	; (2794 <main+0x2cc>)
    2682:	e003      	b.n	268c <main+0x1c4>
		delay_ms(1000);
    2684:	20fa      	movs	r0, #250	; 0xfa
    2686:	0080      	lsls	r0, r0, #2
    2688:	4b43      	ldr	r3, [pc, #268]	; (2798 <main+0x2d0>)
    268a:	4798      	blx	r3
	while(usart_init(&gUsartInstance, EXT1_UART_MODULE, &config_usart) != STATUS_OK){
    268c:	aa01      	add	r2, sp, #4
    268e:	4943      	ldr	r1, [pc, #268]	; (279c <main+0x2d4>)
    2690:	0028      	movs	r0, r5
    2692:	47a0      	blx	r4
    2694:	2800      	cmp	r0, #0
    2696:	d1f5      	bne.n	2684 <main+0x1bc>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2698:	4d3d      	ldr	r5, [pc, #244]	; (2790 <main+0x2c8>)
    269a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    269c:	0020      	movs	r0, r4
    269e:	4b40      	ldr	r3, [pc, #256]	; (27a0 <main+0x2d8>)
    26a0:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    26a2:	231f      	movs	r3, #31
    26a4:	4018      	ands	r0, r3
    26a6:	3b1e      	subs	r3, #30
    26a8:	4083      	lsls	r3, r0
    26aa:	4a3e      	ldr	r2, [pc, #248]	; (27a4 <main+0x2dc>)
    26ac:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    26ae:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    26b0:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    26b2:	b21b      	sxth	r3, r3
    26b4:	2b00      	cmp	r3, #0
    26b6:	dbfb      	blt.n	26b0 <main+0x1e8>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    26b8:	6823      	ldr	r3, [r4, #0]
    26ba:	2202      	movs	r2, #2
    26bc:	4313      	orrs	r3, r2
    26be:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    26c0:	4b33      	ldr	r3, [pc, #204]	; (2790 <main+0x2c8>)
    26c2:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    26c4:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    26c6:	b212      	sxth	r2, r2
    26c8:	2a00      	cmp	r2, #0
    26ca:	dbfb      	blt.n	26c4 <main+0x1fc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    26cc:	6859      	ldr	r1, [r3, #4]
    26ce:	2280      	movs	r2, #128	; 0x80
    26d0:	0252      	lsls	r2, r2, #9
    26d2:	430a      	orrs	r2, r1
    26d4:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    26d6:	2101      	movs	r1, #1
    26d8:	4a2d      	ldr	r2, [pc, #180]	; (2790 <main+0x2c8>)
    26da:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    26dc:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    26de:	b212      	sxth	r2, r2
    26e0:	2a00      	cmp	r2, #0
    26e2:	dbfb      	blt.n	26dc <main+0x214>
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    26e4:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    26e6:	b212      	sxth	r2, r2
    26e8:	2a00      	cmp	r2, #0
    26ea:	dbfb      	blt.n	26e4 <main+0x21c>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    26ec:	6859      	ldr	r1, [r3, #4]
    26ee:	2280      	movs	r2, #128	; 0x80
    26f0:	0292      	lsls	r2, r2, #10
    26f2:	430a      	orrs	r2, r1
    26f4:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    26f6:	2101      	movs	r1, #1
    26f8:	4a25      	ldr	r2, [pc, #148]	; (2790 <main+0x2c8>)
    26fa:	7191      	strb	r1, [r2, #6]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    26fc:	8a1a      	ldrh	r2, [r3, #16]
	while (usart_is_syncing(module)) {
    26fe:	b212      	sxth	r2, r2
    2700:	2a00      	cmp	r2, #0
    2702:	dbfb      	blt.n	26fc <main+0x234>
	usart_register_callback(&gUsartInstance,
    2704:	4c22      	ldr	r4, [pc, #136]	; (2790 <main+0x2c8>)
    2706:	2201      	movs	r2, #1
    2708:	4927      	ldr	r1, [pc, #156]	; (27a8 <main+0x2e0>)
    270a:	0020      	movs	r0, r4
    270c:	4b27      	ldr	r3, [pc, #156]	; (27ac <main+0x2e4>)
    270e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2710:	2221      	movs	r2, #33	; 0x21
    2712:	5ca3      	ldrb	r3, [r4, r2]
    2714:	2102      	movs	r1, #2
    2716:	430b      	orrs	r3, r1
    2718:	54a3      	strb	r3, [r4, r2]
	cpu_irq_enable();
    271a:	3a20      	subs	r2, #32
    271c:	4b24      	ldr	r3, [pc, #144]	; (27b0 <main+0x2e8>)
    271e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2720:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2724:	b662      	cpsie	i
    rprintf_init();
    2726:	4b23      	ldr	r3, [pc, #140]	; (27b4 <main+0x2ec>)
    2728:	4798      	blx	r3
	sSystemState = start;
    272a:	2200      	movs	r2, #0
    272c:	4b22      	ldr	r3, [pc, #136]	; (27b8 <main+0x2f0>)
    272e:	701a      	strb	r2, [r3, #0]
	plc_com_arm_receiver();
    2730:	4b22      	ldr	r3, [pc, #136]	; (27bc <main+0x2f4>)
    2732:	4798      	blx	r3
        test_loop();
    2734:	4c22      	ldr	r4, [pc, #136]	; (27c0 <main+0x2f8>)
    2736:	47a0      	blx	r4
    2738:	e7fd      	b.n	2736 <main+0x26e>
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	00002281 	.word	0x00002281
    2740:	00000105 	.word	0x00000105
    2744:	00001d19 	.word	0x00001d19
    2748:	20000118 	.word	0x20000118
    274c:	41004400 	.word	0x41004400
    2750:	00002b5f 	.word	0x00002b5f
    2754:	000186a0 	.word	0x000186a0
    2758:	00040003 	.word	0x00040003
    275c:	00060003 	.word	0x00060003
    2760:	00070003 	.word	0x00070003
    2764:	2000011c 	.word	0x2000011c
    2768:	42000800 	.word	0x42000800
    276c:	00000a61 	.word	0x00000a61
    2770:	00001479 	.word	0x00001479
    2774:	000014f1 	.word	0x000014f1
    2778:	0000019d 	.word	0x0000019d
    277c:	20000124 	.word	0x20000124
    2780:	42004000 	.word	0x42004000
    2784:	000001e5 	.word	0x000001e5
    2788:	00280003 	.word	0x00280003
    278c:	00290003 	.word	0x00290003
    2790:	200000f4 	.word	0x200000f4
    2794:	00000f61 	.word	0x00000f61
    2798:	00000171 	.word	0x00000171
    279c:	42001800 	.word	0x42001800
    27a0:	000009d1 	.word	0x000009d1
    27a4:	e000e100 	.word	0xe000e100
    27a8:	00001741 	.word	0x00001741
    27ac:	000012cd 	.word	0x000012cd
    27b0:	20000008 	.word	0x20000008
    27b4:	0000196d 	.word	0x0000196d
    27b8:	200000b4 	.word	0x200000b4
    27bc:	00001729 	.word	0x00001729
    27c0:	0000238d 	.word	0x0000238d

000027c4 <__udivsi3>:
    27c4:	2200      	movs	r2, #0
    27c6:	0843      	lsrs	r3, r0, #1
    27c8:	428b      	cmp	r3, r1
    27ca:	d374      	bcc.n	28b6 <__udivsi3+0xf2>
    27cc:	0903      	lsrs	r3, r0, #4
    27ce:	428b      	cmp	r3, r1
    27d0:	d35f      	bcc.n	2892 <__udivsi3+0xce>
    27d2:	0a03      	lsrs	r3, r0, #8
    27d4:	428b      	cmp	r3, r1
    27d6:	d344      	bcc.n	2862 <__udivsi3+0x9e>
    27d8:	0b03      	lsrs	r3, r0, #12
    27da:	428b      	cmp	r3, r1
    27dc:	d328      	bcc.n	2830 <__udivsi3+0x6c>
    27de:	0c03      	lsrs	r3, r0, #16
    27e0:	428b      	cmp	r3, r1
    27e2:	d30d      	bcc.n	2800 <__udivsi3+0x3c>
    27e4:	22ff      	movs	r2, #255	; 0xff
    27e6:	0209      	lsls	r1, r1, #8
    27e8:	ba12      	rev	r2, r2
    27ea:	0c03      	lsrs	r3, r0, #16
    27ec:	428b      	cmp	r3, r1
    27ee:	d302      	bcc.n	27f6 <__udivsi3+0x32>
    27f0:	1212      	asrs	r2, r2, #8
    27f2:	0209      	lsls	r1, r1, #8
    27f4:	d065      	beq.n	28c2 <__udivsi3+0xfe>
    27f6:	0b03      	lsrs	r3, r0, #12
    27f8:	428b      	cmp	r3, r1
    27fa:	d319      	bcc.n	2830 <__udivsi3+0x6c>
    27fc:	e000      	b.n	2800 <__udivsi3+0x3c>
    27fe:	0a09      	lsrs	r1, r1, #8
    2800:	0bc3      	lsrs	r3, r0, #15
    2802:	428b      	cmp	r3, r1
    2804:	d301      	bcc.n	280a <__udivsi3+0x46>
    2806:	03cb      	lsls	r3, r1, #15
    2808:	1ac0      	subs	r0, r0, r3
    280a:	4152      	adcs	r2, r2
    280c:	0b83      	lsrs	r3, r0, #14
    280e:	428b      	cmp	r3, r1
    2810:	d301      	bcc.n	2816 <__udivsi3+0x52>
    2812:	038b      	lsls	r3, r1, #14
    2814:	1ac0      	subs	r0, r0, r3
    2816:	4152      	adcs	r2, r2
    2818:	0b43      	lsrs	r3, r0, #13
    281a:	428b      	cmp	r3, r1
    281c:	d301      	bcc.n	2822 <__udivsi3+0x5e>
    281e:	034b      	lsls	r3, r1, #13
    2820:	1ac0      	subs	r0, r0, r3
    2822:	4152      	adcs	r2, r2
    2824:	0b03      	lsrs	r3, r0, #12
    2826:	428b      	cmp	r3, r1
    2828:	d301      	bcc.n	282e <__udivsi3+0x6a>
    282a:	030b      	lsls	r3, r1, #12
    282c:	1ac0      	subs	r0, r0, r3
    282e:	4152      	adcs	r2, r2
    2830:	0ac3      	lsrs	r3, r0, #11
    2832:	428b      	cmp	r3, r1
    2834:	d301      	bcc.n	283a <__udivsi3+0x76>
    2836:	02cb      	lsls	r3, r1, #11
    2838:	1ac0      	subs	r0, r0, r3
    283a:	4152      	adcs	r2, r2
    283c:	0a83      	lsrs	r3, r0, #10
    283e:	428b      	cmp	r3, r1
    2840:	d301      	bcc.n	2846 <__udivsi3+0x82>
    2842:	028b      	lsls	r3, r1, #10
    2844:	1ac0      	subs	r0, r0, r3
    2846:	4152      	adcs	r2, r2
    2848:	0a43      	lsrs	r3, r0, #9
    284a:	428b      	cmp	r3, r1
    284c:	d301      	bcc.n	2852 <__udivsi3+0x8e>
    284e:	024b      	lsls	r3, r1, #9
    2850:	1ac0      	subs	r0, r0, r3
    2852:	4152      	adcs	r2, r2
    2854:	0a03      	lsrs	r3, r0, #8
    2856:	428b      	cmp	r3, r1
    2858:	d301      	bcc.n	285e <__udivsi3+0x9a>
    285a:	020b      	lsls	r3, r1, #8
    285c:	1ac0      	subs	r0, r0, r3
    285e:	4152      	adcs	r2, r2
    2860:	d2cd      	bcs.n	27fe <__udivsi3+0x3a>
    2862:	09c3      	lsrs	r3, r0, #7
    2864:	428b      	cmp	r3, r1
    2866:	d301      	bcc.n	286c <__udivsi3+0xa8>
    2868:	01cb      	lsls	r3, r1, #7
    286a:	1ac0      	subs	r0, r0, r3
    286c:	4152      	adcs	r2, r2
    286e:	0983      	lsrs	r3, r0, #6
    2870:	428b      	cmp	r3, r1
    2872:	d301      	bcc.n	2878 <__udivsi3+0xb4>
    2874:	018b      	lsls	r3, r1, #6
    2876:	1ac0      	subs	r0, r0, r3
    2878:	4152      	adcs	r2, r2
    287a:	0943      	lsrs	r3, r0, #5
    287c:	428b      	cmp	r3, r1
    287e:	d301      	bcc.n	2884 <__udivsi3+0xc0>
    2880:	014b      	lsls	r3, r1, #5
    2882:	1ac0      	subs	r0, r0, r3
    2884:	4152      	adcs	r2, r2
    2886:	0903      	lsrs	r3, r0, #4
    2888:	428b      	cmp	r3, r1
    288a:	d301      	bcc.n	2890 <__udivsi3+0xcc>
    288c:	010b      	lsls	r3, r1, #4
    288e:	1ac0      	subs	r0, r0, r3
    2890:	4152      	adcs	r2, r2
    2892:	08c3      	lsrs	r3, r0, #3
    2894:	428b      	cmp	r3, r1
    2896:	d301      	bcc.n	289c <__udivsi3+0xd8>
    2898:	00cb      	lsls	r3, r1, #3
    289a:	1ac0      	subs	r0, r0, r3
    289c:	4152      	adcs	r2, r2
    289e:	0883      	lsrs	r3, r0, #2
    28a0:	428b      	cmp	r3, r1
    28a2:	d301      	bcc.n	28a8 <__udivsi3+0xe4>
    28a4:	008b      	lsls	r3, r1, #2
    28a6:	1ac0      	subs	r0, r0, r3
    28a8:	4152      	adcs	r2, r2
    28aa:	0843      	lsrs	r3, r0, #1
    28ac:	428b      	cmp	r3, r1
    28ae:	d301      	bcc.n	28b4 <__udivsi3+0xf0>
    28b0:	004b      	lsls	r3, r1, #1
    28b2:	1ac0      	subs	r0, r0, r3
    28b4:	4152      	adcs	r2, r2
    28b6:	1a41      	subs	r1, r0, r1
    28b8:	d200      	bcs.n	28bc <__udivsi3+0xf8>
    28ba:	4601      	mov	r1, r0
    28bc:	4152      	adcs	r2, r2
    28be:	4610      	mov	r0, r2
    28c0:	4770      	bx	lr
    28c2:	e7ff      	b.n	28c4 <__udivsi3+0x100>
    28c4:	b501      	push	{r0, lr}
    28c6:	2000      	movs	r0, #0
    28c8:	f000 f8f0 	bl	2aac <__aeabi_idiv0>
    28cc:	bd02      	pop	{r1, pc}
    28ce:	46c0      	nop			; (mov r8, r8)

000028d0 <__aeabi_uidivmod>:
    28d0:	2900      	cmp	r1, #0
    28d2:	d0f7      	beq.n	28c4 <__udivsi3+0x100>
    28d4:	e776      	b.n	27c4 <__udivsi3>
    28d6:	4770      	bx	lr

000028d8 <__divsi3>:
    28d8:	4603      	mov	r3, r0
    28da:	430b      	orrs	r3, r1
    28dc:	d47f      	bmi.n	29de <__divsi3+0x106>
    28de:	2200      	movs	r2, #0
    28e0:	0843      	lsrs	r3, r0, #1
    28e2:	428b      	cmp	r3, r1
    28e4:	d374      	bcc.n	29d0 <__divsi3+0xf8>
    28e6:	0903      	lsrs	r3, r0, #4
    28e8:	428b      	cmp	r3, r1
    28ea:	d35f      	bcc.n	29ac <__divsi3+0xd4>
    28ec:	0a03      	lsrs	r3, r0, #8
    28ee:	428b      	cmp	r3, r1
    28f0:	d344      	bcc.n	297c <__divsi3+0xa4>
    28f2:	0b03      	lsrs	r3, r0, #12
    28f4:	428b      	cmp	r3, r1
    28f6:	d328      	bcc.n	294a <__divsi3+0x72>
    28f8:	0c03      	lsrs	r3, r0, #16
    28fa:	428b      	cmp	r3, r1
    28fc:	d30d      	bcc.n	291a <__divsi3+0x42>
    28fe:	22ff      	movs	r2, #255	; 0xff
    2900:	0209      	lsls	r1, r1, #8
    2902:	ba12      	rev	r2, r2
    2904:	0c03      	lsrs	r3, r0, #16
    2906:	428b      	cmp	r3, r1
    2908:	d302      	bcc.n	2910 <__divsi3+0x38>
    290a:	1212      	asrs	r2, r2, #8
    290c:	0209      	lsls	r1, r1, #8
    290e:	d065      	beq.n	29dc <__divsi3+0x104>
    2910:	0b03      	lsrs	r3, r0, #12
    2912:	428b      	cmp	r3, r1
    2914:	d319      	bcc.n	294a <__divsi3+0x72>
    2916:	e000      	b.n	291a <__divsi3+0x42>
    2918:	0a09      	lsrs	r1, r1, #8
    291a:	0bc3      	lsrs	r3, r0, #15
    291c:	428b      	cmp	r3, r1
    291e:	d301      	bcc.n	2924 <__divsi3+0x4c>
    2920:	03cb      	lsls	r3, r1, #15
    2922:	1ac0      	subs	r0, r0, r3
    2924:	4152      	adcs	r2, r2
    2926:	0b83      	lsrs	r3, r0, #14
    2928:	428b      	cmp	r3, r1
    292a:	d301      	bcc.n	2930 <__divsi3+0x58>
    292c:	038b      	lsls	r3, r1, #14
    292e:	1ac0      	subs	r0, r0, r3
    2930:	4152      	adcs	r2, r2
    2932:	0b43      	lsrs	r3, r0, #13
    2934:	428b      	cmp	r3, r1
    2936:	d301      	bcc.n	293c <__divsi3+0x64>
    2938:	034b      	lsls	r3, r1, #13
    293a:	1ac0      	subs	r0, r0, r3
    293c:	4152      	adcs	r2, r2
    293e:	0b03      	lsrs	r3, r0, #12
    2940:	428b      	cmp	r3, r1
    2942:	d301      	bcc.n	2948 <__divsi3+0x70>
    2944:	030b      	lsls	r3, r1, #12
    2946:	1ac0      	subs	r0, r0, r3
    2948:	4152      	adcs	r2, r2
    294a:	0ac3      	lsrs	r3, r0, #11
    294c:	428b      	cmp	r3, r1
    294e:	d301      	bcc.n	2954 <__divsi3+0x7c>
    2950:	02cb      	lsls	r3, r1, #11
    2952:	1ac0      	subs	r0, r0, r3
    2954:	4152      	adcs	r2, r2
    2956:	0a83      	lsrs	r3, r0, #10
    2958:	428b      	cmp	r3, r1
    295a:	d301      	bcc.n	2960 <__divsi3+0x88>
    295c:	028b      	lsls	r3, r1, #10
    295e:	1ac0      	subs	r0, r0, r3
    2960:	4152      	adcs	r2, r2
    2962:	0a43      	lsrs	r3, r0, #9
    2964:	428b      	cmp	r3, r1
    2966:	d301      	bcc.n	296c <__divsi3+0x94>
    2968:	024b      	lsls	r3, r1, #9
    296a:	1ac0      	subs	r0, r0, r3
    296c:	4152      	adcs	r2, r2
    296e:	0a03      	lsrs	r3, r0, #8
    2970:	428b      	cmp	r3, r1
    2972:	d301      	bcc.n	2978 <__divsi3+0xa0>
    2974:	020b      	lsls	r3, r1, #8
    2976:	1ac0      	subs	r0, r0, r3
    2978:	4152      	adcs	r2, r2
    297a:	d2cd      	bcs.n	2918 <__divsi3+0x40>
    297c:	09c3      	lsrs	r3, r0, #7
    297e:	428b      	cmp	r3, r1
    2980:	d301      	bcc.n	2986 <__divsi3+0xae>
    2982:	01cb      	lsls	r3, r1, #7
    2984:	1ac0      	subs	r0, r0, r3
    2986:	4152      	adcs	r2, r2
    2988:	0983      	lsrs	r3, r0, #6
    298a:	428b      	cmp	r3, r1
    298c:	d301      	bcc.n	2992 <__divsi3+0xba>
    298e:	018b      	lsls	r3, r1, #6
    2990:	1ac0      	subs	r0, r0, r3
    2992:	4152      	adcs	r2, r2
    2994:	0943      	lsrs	r3, r0, #5
    2996:	428b      	cmp	r3, r1
    2998:	d301      	bcc.n	299e <__divsi3+0xc6>
    299a:	014b      	lsls	r3, r1, #5
    299c:	1ac0      	subs	r0, r0, r3
    299e:	4152      	adcs	r2, r2
    29a0:	0903      	lsrs	r3, r0, #4
    29a2:	428b      	cmp	r3, r1
    29a4:	d301      	bcc.n	29aa <__divsi3+0xd2>
    29a6:	010b      	lsls	r3, r1, #4
    29a8:	1ac0      	subs	r0, r0, r3
    29aa:	4152      	adcs	r2, r2
    29ac:	08c3      	lsrs	r3, r0, #3
    29ae:	428b      	cmp	r3, r1
    29b0:	d301      	bcc.n	29b6 <__divsi3+0xde>
    29b2:	00cb      	lsls	r3, r1, #3
    29b4:	1ac0      	subs	r0, r0, r3
    29b6:	4152      	adcs	r2, r2
    29b8:	0883      	lsrs	r3, r0, #2
    29ba:	428b      	cmp	r3, r1
    29bc:	d301      	bcc.n	29c2 <__divsi3+0xea>
    29be:	008b      	lsls	r3, r1, #2
    29c0:	1ac0      	subs	r0, r0, r3
    29c2:	4152      	adcs	r2, r2
    29c4:	0843      	lsrs	r3, r0, #1
    29c6:	428b      	cmp	r3, r1
    29c8:	d301      	bcc.n	29ce <__divsi3+0xf6>
    29ca:	004b      	lsls	r3, r1, #1
    29cc:	1ac0      	subs	r0, r0, r3
    29ce:	4152      	adcs	r2, r2
    29d0:	1a41      	subs	r1, r0, r1
    29d2:	d200      	bcs.n	29d6 <__divsi3+0xfe>
    29d4:	4601      	mov	r1, r0
    29d6:	4152      	adcs	r2, r2
    29d8:	4610      	mov	r0, r2
    29da:	4770      	bx	lr
    29dc:	e05d      	b.n	2a9a <__divsi3+0x1c2>
    29de:	0fca      	lsrs	r2, r1, #31
    29e0:	d000      	beq.n	29e4 <__divsi3+0x10c>
    29e2:	4249      	negs	r1, r1
    29e4:	1003      	asrs	r3, r0, #32
    29e6:	d300      	bcc.n	29ea <__divsi3+0x112>
    29e8:	4240      	negs	r0, r0
    29ea:	4053      	eors	r3, r2
    29ec:	2200      	movs	r2, #0
    29ee:	469c      	mov	ip, r3
    29f0:	0903      	lsrs	r3, r0, #4
    29f2:	428b      	cmp	r3, r1
    29f4:	d32d      	bcc.n	2a52 <__divsi3+0x17a>
    29f6:	0a03      	lsrs	r3, r0, #8
    29f8:	428b      	cmp	r3, r1
    29fa:	d312      	bcc.n	2a22 <__divsi3+0x14a>
    29fc:	22fc      	movs	r2, #252	; 0xfc
    29fe:	0189      	lsls	r1, r1, #6
    2a00:	ba12      	rev	r2, r2
    2a02:	0a03      	lsrs	r3, r0, #8
    2a04:	428b      	cmp	r3, r1
    2a06:	d30c      	bcc.n	2a22 <__divsi3+0x14a>
    2a08:	0189      	lsls	r1, r1, #6
    2a0a:	1192      	asrs	r2, r2, #6
    2a0c:	428b      	cmp	r3, r1
    2a0e:	d308      	bcc.n	2a22 <__divsi3+0x14a>
    2a10:	0189      	lsls	r1, r1, #6
    2a12:	1192      	asrs	r2, r2, #6
    2a14:	428b      	cmp	r3, r1
    2a16:	d304      	bcc.n	2a22 <__divsi3+0x14a>
    2a18:	0189      	lsls	r1, r1, #6
    2a1a:	d03a      	beq.n	2a92 <__divsi3+0x1ba>
    2a1c:	1192      	asrs	r2, r2, #6
    2a1e:	e000      	b.n	2a22 <__divsi3+0x14a>
    2a20:	0989      	lsrs	r1, r1, #6
    2a22:	09c3      	lsrs	r3, r0, #7
    2a24:	428b      	cmp	r3, r1
    2a26:	d301      	bcc.n	2a2c <__divsi3+0x154>
    2a28:	01cb      	lsls	r3, r1, #7
    2a2a:	1ac0      	subs	r0, r0, r3
    2a2c:	4152      	adcs	r2, r2
    2a2e:	0983      	lsrs	r3, r0, #6
    2a30:	428b      	cmp	r3, r1
    2a32:	d301      	bcc.n	2a38 <__divsi3+0x160>
    2a34:	018b      	lsls	r3, r1, #6
    2a36:	1ac0      	subs	r0, r0, r3
    2a38:	4152      	adcs	r2, r2
    2a3a:	0943      	lsrs	r3, r0, #5
    2a3c:	428b      	cmp	r3, r1
    2a3e:	d301      	bcc.n	2a44 <__divsi3+0x16c>
    2a40:	014b      	lsls	r3, r1, #5
    2a42:	1ac0      	subs	r0, r0, r3
    2a44:	4152      	adcs	r2, r2
    2a46:	0903      	lsrs	r3, r0, #4
    2a48:	428b      	cmp	r3, r1
    2a4a:	d301      	bcc.n	2a50 <__divsi3+0x178>
    2a4c:	010b      	lsls	r3, r1, #4
    2a4e:	1ac0      	subs	r0, r0, r3
    2a50:	4152      	adcs	r2, r2
    2a52:	08c3      	lsrs	r3, r0, #3
    2a54:	428b      	cmp	r3, r1
    2a56:	d301      	bcc.n	2a5c <__divsi3+0x184>
    2a58:	00cb      	lsls	r3, r1, #3
    2a5a:	1ac0      	subs	r0, r0, r3
    2a5c:	4152      	adcs	r2, r2
    2a5e:	0883      	lsrs	r3, r0, #2
    2a60:	428b      	cmp	r3, r1
    2a62:	d301      	bcc.n	2a68 <__divsi3+0x190>
    2a64:	008b      	lsls	r3, r1, #2
    2a66:	1ac0      	subs	r0, r0, r3
    2a68:	4152      	adcs	r2, r2
    2a6a:	d2d9      	bcs.n	2a20 <__divsi3+0x148>
    2a6c:	0843      	lsrs	r3, r0, #1
    2a6e:	428b      	cmp	r3, r1
    2a70:	d301      	bcc.n	2a76 <__divsi3+0x19e>
    2a72:	004b      	lsls	r3, r1, #1
    2a74:	1ac0      	subs	r0, r0, r3
    2a76:	4152      	adcs	r2, r2
    2a78:	1a41      	subs	r1, r0, r1
    2a7a:	d200      	bcs.n	2a7e <__divsi3+0x1a6>
    2a7c:	4601      	mov	r1, r0
    2a7e:	4663      	mov	r3, ip
    2a80:	4152      	adcs	r2, r2
    2a82:	105b      	asrs	r3, r3, #1
    2a84:	4610      	mov	r0, r2
    2a86:	d301      	bcc.n	2a8c <__divsi3+0x1b4>
    2a88:	4240      	negs	r0, r0
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d500      	bpl.n	2a90 <__divsi3+0x1b8>
    2a8e:	4249      	negs	r1, r1
    2a90:	4770      	bx	lr
    2a92:	4663      	mov	r3, ip
    2a94:	105b      	asrs	r3, r3, #1
    2a96:	d300      	bcc.n	2a9a <__divsi3+0x1c2>
    2a98:	4240      	negs	r0, r0
    2a9a:	b501      	push	{r0, lr}
    2a9c:	2000      	movs	r0, #0
    2a9e:	f000 f805 	bl	2aac <__aeabi_idiv0>
    2aa2:	bd02      	pop	{r1, pc}

00002aa4 <__aeabi_idivmod>:
    2aa4:	2900      	cmp	r1, #0
    2aa6:	d0f8      	beq.n	2a9a <__divsi3+0x1c2>
    2aa8:	e716      	b.n	28d8 <__divsi3>
    2aaa:	4770      	bx	lr

00002aac <__aeabi_idiv0>:
    2aac:	4770      	bx	lr
    2aae:	46c0      	nop			; (mov r8, r8)

00002ab0 <__aeabi_lmul>:
    2ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab2:	46ce      	mov	lr, r9
    2ab4:	4647      	mov	r7, r8
    2ab6:	0415      	lsls	r5, r2, #16
    2ab8:	0c2d      	lsrs	r5, r5, #16
    2aba:	002e      	movs	r6, r5
    2abc:	b580      	push	{r7, lr}
    2abe:	0407      	lsls	r7, r0, #16
    2ac0:	0c14      	lsrs	r4, r2, #16
    2ac2:	0c3f      	lsrs	r7, r7, #16
    2ac4:	4699      	mov	r9, r3
    2ac6:	0c03      	lsrs	r3, r0, #16
    2ac8:	437e      	muls	r6, r7
    2aca:	435d      	muls	r5, r3
    2acc:	4367      	muls	r7, r4
    2ace:	4363      	muls	r3, r4
    2ad0:	197f      	adds	r7, r7, r5
    2ad2:	0c34      	lsrs	r4, r6, #16
    2ad4:	19e4      	adds	r4, r4, r7
    2ad6:	469c      	mov	ip, r3
    2ad8:	42a5      	cmp	r5, r4
    2ada:	d903      	bls.n	2ae4 <__aeabi_lmul+0x34>
    2adc:	2380      	movs	r3, #128	; 0x80
    2ade:	025b      	lsls	r3, r3, #9
    2ae0:	4698      	mov	r8, r3
    2ae2:	44c4      	add	ip, r8
    2ae4:	464b      	mov	r3, r9
    2ae6:	4351      	muls	r1, r2
    2ae8:	4343      	muls	r3, r0
    2aea:	0436      	lsls	r6, r6, #16
    2aec:	0c36      	lsrs	r6, r6, #16
    2aee:	0c25      	lsrs	r5, r4, #16
    2af0:	0424      	lsls	r4, r4, #16
    2af2:	4465      	add	r5, ip
    2af4:	19a4      	adds	r4, r4, r6
    2af6:	1859      	adds	r1, r3, r1
    2af8:	1949      	adds	r1, r1, r5
    2afa:	0020      	movs	r0, r4
    2afc:	bc0c      	pop	{r2, r3}
    2afe:	4690      	mov	r8, r2
    2b00:	4699      	mov	r9, r3
    2b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002b04 <__libc_init_array>:
    2b04:	b570      	push	{r4, r5, r6, lr}
    2b06:	2600      	movs	r6, #0
    2b08:	4d0c      	ldr	r5, [pc, #48]	; (2b3c <__libc_init_array+0x38>)
    2b0a:	4c0d      	ldr	r4, [pc, #52]	; (2b40 <__libc_init_array+0x3c>)
    2b0c:	1b64      	subs	r4, r4, r5
    2b0e:	10a4      	asrs	r4, r4, #2
    2b10:	42a6      	cmp	r6, r4
    2b12:	d109      	bne.n	2b28 <__libc_init_array+0x24>
    2b14:	2600      	movs	r6, #0
    2b16:	f000 fa41 	bl	2f9c <_init>
    2b1a:	4d0a      	ldr	r5, [pc, #40]	; (2b44 <__libc_init_array+0x40>)
    2b1c:	4c0a      	ldr	r4, [pc, #40]	; (2b48 <__libc_init_array+0x44>)
    2b1e:	1b64      	subs	r4, r4, r5
    2b20:	10a4      	asrs	r4, r4, #2
    2b22:	42a6      	cmp	r6, r4
    2b24:	d105      	bne.n	2b32 <__libc_init_array+0x2e>
    2b26:	bd70      	pop	{r4, r5, r6, pc}
    2b28:	00b3      	lsls	r3, r6, #2
    2b2a:	58eb      	ldr	r3, [r5, r3]
    2b2c:	4798      	blx	r3
    2b2e:	3601      	adds	r6, #1
    2b30:	e7ee      	b.n	2b10 <__libc_init_array+0xc>
    2b32:	00b3      	lsls	r3, r6, #2
    2b34:	58eb      	ldr	r3, [r5, r3]
    2b36:	4798      	blx	r3
    2b38:	3601      	adds	r6, #1
    2b3a:	e7f2      	b.n	2b22 <__libc_init_array+0x1e>
    2b3c:	00002fa8 	.word	0x00002fa8
    2b40:	00002fa8 	.word	0x00002fa8
    2b44:	00002fa8 	.word	0x00002fa8
    2b48:	00002fac 	.word	0x00002fac

00002b4c <memcpy>:
    2b4c:	2300      	movs	r3, #0
    2b4e:	b510      	push	{r4, lr}
    2b50:	429a      	cmp	r2, r3
    2b52:	d100      	bne.n	2b56 <memcpy+0xa>
    2b54:	bd10      	pop	{r4, pc}
    2b56:	5ccc      	ldrb	r4, [r1, r3]
    2b58:	54c4      	strb	r4, [r0, r3]
    2b5a:	3301      	adds	r3, #1
    2b5c:	e7f8      	b.n	2b50 <memcpy+0x4>

00002b5e <memset>:
    2b5e:	0003      	movs	r3, r0
    2b60:	1882      	adds	r2, r0, r2
    2b62:	4293      	cmp	r3, r2
    2b64:	d100      	bne.n	2b68 <memset+0xa>
    2b66:	4770      	bx	lr
    2b68:	7019      	strb	r1, [r3, #0]
    2b6a:	3301      	adds	r3, #1
    2b6c:	e7f9      	b.n	2b62 <memset+0x4>
    2b6e:	0000      	movs	r0, r0
    2b70:	000003ac 	.word	0x000003ac
    2b74:	0000060a 	.word	0x0000060a
    2b78:	0000060a 	.word	0x0000060a
    2b7c:	0000060a 	.word	0x0000060a
    2b80:	0000060a 	.word	0x0000060a
    2b84:	0000060a 	.word	0x0000060a
    2b88:	0000060a 	.word	0x0000060a
    2b8c:	0000060a 	.word	0x0000060a
    2b90:	0000060a 	.word	0x0000060a
    2b94:	0000060a 	.word	0x0000060a
    2b98:	0000060a 	.word	0x0000060a
    2b9c:	0000060a 	.word	0x0000060a
    2ba0:	0000060a 	.word	0x0000060a
    2ba4:	0000060a 	.word	0x0000060a
    2ba8:	0000060a 	.word	0x0000060a
    2bac:	0000060a 	.word	0x0000060a
    2bb0:	0000038c 	.word	0x0000038c
    2bb4:	0000060a 	.word	0x0000060a
    2bb8:	0000060a 	.word	0x0000060a
    2bbc:	0000060a 	.word	0x0000060a
    2bc0:	0000060a 	.word	0x0000060a
    2bc4:	0000060a 	.word	0x0000060a
    2bc8:	0000060a 	.word	0x0000060a
    2bcc:	0000060a 	.word	0x0000060a
    2bd0:	0000060a 	.word	0x0000060a
    2bd4:	0000060a 	.word	0x0000060a
    2bd8:	0000060a 	.word	0x0000060a
    2bdc:	0000060a 	.word	0x0000060a
    2be0:	0000060a 	.word	0x0000060a
    2be4:	0000060a 	.word	0x0000060a
    2be8:	0000060a 	.word	0x0000060a
    2bec:	0000060a 	.word	0x0000060a
    2bf0:	000003a4 	.word	0x000003a4
    2bf4:	0000060a 	.word	0x0000060a
    2bf8:	0000060a 	.word	0x0000060a
    2bfc:	0000060a 	.word	0x0000060a
    2c00:	0000060a 	.word	0x0000060a
    2c04:	0000060a 	.word	0x0000060a
    2c08:	0000060a 	.word	0x0000060a
    2c0c:	0000060a 	.word	0x0000060a
    2c10:	0000060a 	.word	0x0000060a
    2c14:	0000060a 	.word	0x0000060a
    2c18:	0000060a 	.word	0x0000060a
    2c1c:	0000060a 	.word	0x0000060a
    2c20:	0000060a 	.word	0x0000060a
    2c24:	0000060a 	.word	0x0000060a
    2c28:	0000060a 	.word	0x0000060a
    2c2c:	0000060a 	.word	0x0000060a
    2c30:	0000039c 	.word	0x0000039c
    2c34:	000003b4 	.word	0x000003b4
    2c38:	0000036c 	.word	0x0000036c
    2c3c:	0000037c 	.word	0x0000037c
    2c40:	00000374 	.word	0x00000374
    2c44:	00000002 	.word	0x00000002
    2c48:	00000003 	.word	0x00000003
    2c4c:	00000028 	.word	0x00000028
    2c50:	00000029 	.word	0x00000029
    2c54:	00000004 	.word	0x00000004
    2c58:	00000005 	.word	0x00000005
    2c5c:	00000006 	.word	0x00000006
    2c60:	00000007 	.word	0x00000007
    2c64:	00000020 	.word	0x00000020
    2c68:	00000021 	.word	0x00000021
    2c6c:	00000022 	.word	0x00000022
    2c70:	00000023 	.word	0x00000023
    2c74:	00000024 	.word	0x00000024
    2c78:	00000025 	.word	0x00000025
    2c7c:	00000026 	.word	0x00000026
    2c80:	00000027 	.word	0x00000027
    2c84:	00000008 	.word	0x00000008
    2c88:	00000009 	.word	0x00000009
    2c8c:	0000000a 	.word	0x0000000a
    2c90:	0000000b 	.word	0x0000000b
    2c94:	42000800 	.word	0x42000800
    2c98:	42000c00 	.word	0x42000c00
    2c9c:	42001000 	.word	0x42001000
    2ca0:	42001400 	.word	0x42001400
    2ca4:	42001800 	.word	0x42001800
    2ca8:	42001c00 	.word	0x42001c00
    2cac:	00001520 	.word	0x00001520
    2cb0:	00001526 	.word	0x00001526
    2cb4:	00001526 	.word	0x00001526
    2cb8:	00001526 	.word	0x00001526
    2cbc:	00001526 	.word	0x00001526
    2cc0:	00001526 	.word	0x00001526
    2cc4:	00001526 	.word	0x00001526
    2cc8:	00001526 	.word	0x00001526
    2ccc:	00001528 	.word	0x00001528
    2cd0:	00001526 	.word	0x00001526
    2cd4:	00001526 	.word	0x00001526
    2cd8:	00001526 	.word	0x00001526
    2cdc:	00001526 	.word	0x00001526
    2ce0:	00001526 	.word	0x00001526
    2ce4:	00001526 	.word	0x00001526
    2ce8:	00001526 	.word	0x00001526
    2cec:	00001530 	.word	0x00001530
    2cf0:	00001526 	.word	0x00001526
    2cf4:	00001526 	.word	0x00001526
    2cf8:	00001526 	.word	0x00001526
    2cfc:	00001526 	.word	0x00001526
    2d00:	00001526 	.word	0x00001526
    2d04:	00001526 	.word	0x00001526
    2d08:	00001526 	.word	0x00001526
    2d0c:	00001538 	.word	0x00001538
    2d10:	00001526 	.word	0x00001526
    2d14:	00001526 	.word	0x00001526
    2d18:	00001526 	.word	0x00001526
    2d1c:	00001526 	.word	0x00001526
    2d20:	00001526 	.word	0x00001526
    2d24:	00001526 	.word	0x00001526
    2d28:	00001526 	.word	0x00001526
    2d2c:	00001540 	.word	0x00001540
    2d30:	00001526 	.word	0x00001526
    2d34:	00001526 	.word	0x00001526
    2d38:	00001526 	.word	0x00001526
    2d3c:	00001526 	.word	0x00001526
    2d40:	00001526 	.word	0x00001526
    2d44:	00001526 	.word	0x00001526
    2d48:	00001526 	.word	0x00001526
    2d4c:	00001548 	.word	0x00001548
    2d50:	00001526 	.word	0x00001526
    2d54:	00001526 	.word	0x00001526
    2d58:	00001526 	.word	0x00001526
    2d5c:	00001526 	.word	0x00001526
    2d60:	00001526 	.word	0x00001526
    2d64:	00001526 	.word	0x00001526
    2d68:	00001526 	.word	0x00001526
    2d6c:	00001550 	.word	0x00001550
    2d70:	00001526 	.word	0x00001526
    2d74:	00001526 	.word	0x00001526
    2d78:	00001526 	.word	0x00001526
    2d7c:	00001526 	.word	0x00001526
    2d80:	00001526 	.word	0x00001526
    2d84:	00001526 	.word	0x00001526
    2d88:	00001526 	.word	0x00001526
    2d8c:	00001558 	.word	0x00001558
    2d90:	00001526 	.word	0x00001526
    2d94:	00001526 	.word	0x00001526
    2d98:	00001526 	.word	0x00001526
    2d9c:	00001526 	.word	0x00001526
    2da0:	00001526 	.word	0x00001526
    2da4:	00001526 	.word	0x00001526
    2da8:	00001526 	.word	0x00001526
    2dac:	00001560 	.word	0x00001560
    2db0:	0000185c 	.word	0x0000185c
    2db4:	00001854 	.word	0x00001854
    2db8:	00001880 	.word	0x00001880
    2dbc:	00001880 	.word	0x00001880
    2dc0:	00001880 	.word	0x00001880
    2dc4:	00001880 	.word	0x00001880
    2dc8:	0000186c 	.word	0x0000186c
    2dcc:	00001880 	.word	0x00001880
    2dd0:	00001880 	.word	0x00001880
    2dd4:	00001880 	.word	0x00001880
    2dd8:	00001874 	.word	0x00001874
    2ddc:	00001880 	.word	0x00001880
    2de0:	00001880 	.word	0x00001880
    2de4:	00001880 	.word	0x00001880
    2de8:	00001880 	.word	0x00001880
    2dec:	00001880 	.word	0x00001880
    2df0:	00001864 	.word	0x00001864
    2df4:	00001880 	.word	0x00001880
    2df8:	0000184c 	.word	0x0000184c
    2dfc:	000018dc 	.word	0x000018dc
    2e00:	000018dc 	.word	0x000018dc
    2e04:	000018f2 	.word	0x000018f2
    2e08:	000018f2 	.word	0x000018f2
    2e0c:	000018f2 	.word	0x000018f2
    2e10:	000018f2 	.word	0x000018f2
    2e14:	000018dc 	.word	0x000018dc
    2e18:	000018f2 	.word	0x000018f2
    2e1c:	000018f2 	.word	0x000018f2
    2e20:	000018f2 	.word	0x000018f2
    2e24:	000018dc 	.word	0x000018dc
    2e28:	000018f2 	.word	0x000018f2
    2e2c:	000018f2 	.word	0x000018f2
    2e30:	000018f2 	.word	0x000018f2
    2e34:	000018f2 	.word	0x000018f2
    2e38:	000018f2 	.word	0x000018f2
    2e3c:	000018dc 	.word	0x000018dc
    2e40:	000018f2 	.word	0x000018f2
    2e44:	000018dc 	.word	0x000018dc
    2e48:	33323130 	.word	0x33323130
    2e4c:	37363534 	.word	0x37363534
    2e50:	62613938 	.word	0x62613938
    2e54:	66656463 	.word	0x66656463
    2e58:	00000000 	.word	0x00000000
    2e5c:	00001d4e 	.word	0x00001d4e
    2e60:	00001d4a 	.word	0x00001d4a
    2e64:	00001d4a 	.word	0x00001d4a
    2e68:	00001d9a 	.word	0x00001d9a
    2e6c:	00001d9a 	.word	0x00001d9a
    2e70:	00001d62 	.word	0x00001d62
    2e74:	00001d54 	.word	0x00001d54
    2e78:	00001d68 	.word	0x00001d68
    2e7c:	00001e20 	.word	0x00001e20
    2e80:	00001e00 	.word	0x00001e00
    2e84:	00001e00 	.word	0x00001e00
    2e88:	00001e70 	.word	0x00001e70
    2e8c:	00001e12 	.word	0x00001e12
    2e90:	00001e2e 	.word	0x00001e2e
    2e94:	00001e04 	.word	0x00001e04
    2e98:	00001e3c 	.word	0x00001e3c
    2e9c:	000023b6 	.word	0x000023b6
    2ea0:	000023b6 	.word	0x000023b6
    2ea4:	000023b6 	.word	0x000023b6
    2ea8:	000023be 	.word	0x000023be
    2eac:	000023d4 	.word	0x000023d4
    2eb0:	000023ea 	.word	0x000023ea
    2eb4:	00002400 	.word	0x00002400
    2eb8:	00002416 	.word	0x00002416
    2ebc:	0000242c 	.word	0x0000242c
    2ec0:	00002442 	.word	0x00002442
    2ec4:	00002458 	.word	0x00002458
    2ec8:	00002468 	.word	0x00002468
    2ecc:	00002472 	.word	0x00002472
    2ed0:	3a474f4c 	.word	0x3a474f4c
    2ed4:	77656e20 	.word	0x77656e20
    2ed8:	61747320 	.word	0x61747320
    2edc:	66206574 	.word	0x66206574
    2ee0:	656c6961 	.word	0x656c6961
    2ee4:	6e202c64 	.word	0x6e202c64
    2ee8:	6920746f 	.word	0x6920746f
    2eec:	2e74696e 	.word	0x2e74696e
    2ef0:	00000000 	.word	0x00000000
    2ef4:	3a474f4c 	.word	0x3a474f4c
    2ef8:	77656e20 	.word	0x77656e20
    2efc:	61747320 	.word	0x61747320
    2f00:	3d206574 	.word	0x3d206574
    2f04:	00642520 	.word	0x00642520
    2f08:	54494e49 	.word	0x54494e49
    2f0c:	00000000 	.word	0x00000000
    2f10:	454c4449 	.word	0x454c4449
    2f14:	00000a0d 	.word	0x00000a0d
    2f18:	54494e49 	.word	0x54494e49
    2f1c:	6c616320 	.word	0x6c616320
    2f20:	0d64656c 	.word	0x0d64656c
    2f24:	0000000a 	.word	0x0000000a
    2f28:	4b434950 	.word	0x4b434950
    2f2c:	6c616320 	.word	0x6c616320
    2f30:	0d64656c 	.word	0x0d64656c
    2f34:	0000000a 	.word	0x0000000a
    2f38:	43414c50 	.word	0x43414c50
    2f3c:	61632045 	.word	0x61632045
    2f40:	64656c6c 	.word	0x64656c6c
    2f44:	00000a0d 	.word	0x00000a0d
    2f48:	4c4f4f54 	.word	0x4c4f4f54
    2f4c:	6c616320 	.word	0x6c616320
    2f50:	0d64656c 	.word	0x0d64656c
    2f54:	0000000a 	.word	0x0000000a
    2f58:	4d415453 	.word	0x4d415453
    2f5c:	61632050 	.word	0x61632050
    2f60:	64656c6c 	.word	0x64656c6c
    2f64:	00000a0d 	.word	0x00000a0d
    2f68:	204b4e49 	.word	0x204b4e49
    2f6c:	6c6c6163 	.word	0x6c6c6163
    2f70:	0a0d6465 	.word	0x0a0d6465
    2f74:	00000000 	.word	0x00000000
    2f78:	534f4c43 	.word	0x534f4c43
    2f7c:	494c2045 	.word	0x494c2045
    2f80:	61632044 	.word	0x61632044
    2f84:	64656c6c 	.word	0x64656c6c
    2f88:	00000a0d 	.word	0x00000a0d
    2f8c:	43524f46 	.word	0x43524f46
    2f90:	61632045 	.word	0x61632045
    2f94:	64656c6c 	.word	0x64656c6c
    2f98:	00000a0d 	.word	0x00000a0d

00002f9c <_init>:
    2f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fa2:	bc08      	pop	{r3}
    2fa4:	469e      	mov	lr, r3
    2fa6:	4770      	bx	lr

00002fa8 <__init_array_start>:
    2fa8:	000000cd 	.word	0x000000cd

00002fac <_fini>:
    2fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fae:	46c0      	nop			; (mov r8, r8)
    2fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fb2:	bc08      	pop	{r3}
    2fb4:	469e      	mov	lr, r3
    2fb6:	4770      	bx	lr

00002fb8 <__fini_array_start>:
    2fb8:	000000a5 	.word	0x000000a5
